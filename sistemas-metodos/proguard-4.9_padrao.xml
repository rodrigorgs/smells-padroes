<?xml version="1.0" encoding="UTF-8"?>
<system>
	<pattern name="Factory Method">
		<instance>
			<role name="Creator" element="proguard.evaluation.value.DoubleValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.DoubleValue::negate():proguard.evaluation.value.DoubleValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.DoubleValue::convertToInteger():proguard.evaluation.value.IntegerValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.DoubleValue::convertToLong():proguard.evaluation.value.LongValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.DoubleValue::convertToFloat():proguard.evaluation.value.FloatValue" />
		</instance>
		<instance>
			<role name="Creator" element="proguard.evaluation.value.FloatValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.FloatValue::negate():proguard.evaluation.value.FloatValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.FloatValue::convertToInteger():proguard.evaluation.value.IntegerValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.FloatValue::convertToLong():proguard.evaluation.value.LongValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.FloatValue::convertToDouble():proguard.evaluation.value.DoubleValue" />
		</instance>
		<instance>
			<role name="Creator" element="proguard.evaluation.value.IntegerValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.IntegerValue::negate():proguard.evaluation.value.IntegerValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.IntegerValue::convertToByte():proguard.evaluation.value.IntegerValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.IntegerValue::convertToCharacter():proguard.evaluation.value.IntegerValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.IntegerValue::convertToShort():proguard.evaluation.value.IntegerValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.IntegerValue::convertToLong():proguard.evaluation.value.LongValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.IntegerValue::convertToFloat():proguard.evaluation.value.FloatValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.IntegerValue::convertToDouble():proguard.evaluation.value.DoubleValue" />
		</instance>
		<instance>
			<role name="Creator" element="proguard.evaluation.value.LongValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.LongValue::negate():proguard.evaluation.value.LongValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.LongValue::convertToInteger():proguard.evaluation.value.IntegerValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.LongValue::convertToFloat():proguard.evaluation.value.FloatValue" />
			<role name="FactoryMethod()" element="proguard.evaluation.value.LongValue::convertToDouble():proguard.evaluation.value.DoubleValue" />
		</instance>
		<instance>
			<role name="Creator" element="proguard.util.StringParser" />
			<role name="FactoryMethod()" element="proguard.util.StringParser::parse(java.lang.String):proguard.util.StringMatcher" />
		</instance>
	</pattern>
	<pattern name="Prototype" />
	<pattern name="Singleton">
		<instance>
			<role name="Singleton" element="proguard.evaluation.value.InstructionOffsetValue" />
			<role name="uniqueInstance" element="proguard.evaluation.value.InstructionOffsetValue::EMPTY_VALUE:proguard.evaluation.value.InstructionOffsetValue" />
		</instance>
	</pattern>
	<pattern name="(Object)Adapter">
		<instance>
			<role name="Adaptee" element="proguard.classfile.Clazz" />
			<role name="Adapter" element="proguard.classfile.util.DynamicMemberReferenceInitializer" />
			<role name="adaptee" element="proguard.classfile.util.DynamicMemberReferenceInitializer::referencedClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.util.DynamicMemberReferenceInitializer::visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.Clazz" />
			<role name="Adapter" element="proguard.classfile.editor.MethodInvocationFixer" />
			<role name="adaptee" element="proguard.classfile.editor.MethodInvocationFixer::referencedClass:proguard.classfile.Clazz" />
			<role name="adaptee" element="proguard.classfile.editor.MethodInvocationFixer::referencedMethodClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.editor.MethodInvocationFixer::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.Clazz" />
			<role name="Adapter" element="proguard.DescriptorKeepChecker" />
			<role name="adaptee" element="proguard.DescriptorKeepChecker::referencingClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.DescriptorKeepChecker::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Request()" element="proguard.DescriptorKeepChecker::visitProgramClass(proguard.classfile.ProgramClass):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.Clazz" />
			<role name="Adapter" element="proguard.classfile.attribute.annotation.visitor.AnnotatedClassVisitor" />
			<role name="adaptee" element="proguard.classfile.attribute.annotation.visitor.AnnotatedClassVisitor::lastVisitedClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.attribute.annotation.visitor.AnnotatedClassVisitor::visitAnnotation(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.Clazz" />
			<role name="Adapter" element="proguard.classfile.util.EnumFieldReferenceInitializer" />
			<role name="adaptee" element="proguard.classfile.util.EnumFieldReferenceInitializer::referencedEnumClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.util.EnumFieldReferenceInitializer::visitEnumConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.EnumConstantElementValue):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.Clazz" />
			<role name="Adapter" element="proguard.classfile.visitor.ImplementedClassConstantFilter" />
			<role name="adaptee" element="proguard.classfile.visitor.ImplementedClassConstantFilter::implementedClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.visitor.ImplementedClassConstantFilter::visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.Clazz" />
			<role name="Adapter" element="proguard.classfile.visitor.ImplementingClassConstantFilter" />
			<role name="adaptee" element="proguard.classfile.visitor.ImplementingClassConstantFilter::implementingClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.visitor.ImplementingClassConstantFilter::visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.ProgramClass" />
			<role name="Adapter" element="proguard.optimize.peephole.MethodInliner" />
			<role name="adaptee" element="proguard.optimize.peephole.MethodInliner::targetClass:proguard.classfile.ProgramClass" />
			<role name="Request()" element="proguard.optimize.peephole.MethodInliner::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
			<role name="Request()" element="proguard.optimize.peephole.MethodInliner::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.evaluation.ConstantValueFactory" />
			<role name="Adapter" element="proguard.evaluation.Processor" />
			<role name="adaptee" element="proguard.evaluation.Processor::constantValueFactory:proguard.evaluation.ConstantValueFactory" />
			<role name="Request()" element="proguard.evaluation.Processor::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.evaluation.ClassConstantValueFactory" />
			<role name="Adapter" element="proguard.evaluation.Processor" />
			<role name="adaptee" element="proguard.evaluation.Processor::classConstantValueFactory:proguard.evaluation.ClassConstantValueFactory" />
			<role name="Request()" element="proguard.evaluation.Processor::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.Clazz" />
			<role name="Adapter" element="proguard.classfile.editor.SubclassToAdder" />
			<role name="adaptee" element="proguard.classfile.editor.SubclassToAdder::targetClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.editor.SubclassToAdder::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Request()" element="proguard.classfile.editor.SubclassToAdder::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.visitor.SimilarMemberVisitor" />
			<role name="Adaptee" element="proguard.classfile.Clazz" />
			<role name="adaptee" element="proguard.classfile.visitor.SimilarMemberVisitor::targetClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.visitor.SimilarMemberVisitor::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Request()" element="proguard.classfile.visitor.SimilarMemberVisitor::visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField):void" />
			<role name="Request()" element="proguard.classfile.visitor.SimilarMemberVisitor::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Request()" element="proguard.classfile.visitor.SimilarMemberVisitor::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.editor.InstructionAdder" />
			<role name="Adaptee" element="proguard.classfile.editor.ConstantAdder" />
			<role name="adaptee" element="proguard.classfile.editor.InstructionAdder::constantAdder:proguard.classfile.editor.ConstantAdder" />
			<role name="Request()" element="proguard.classfile.editor.InstructionAdder::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.editor.AnnotationAdder" />
			<role name="Adaptee" element="proguard.classfile.editor.ConstantAdder" />
			<role name="adaptee" element="proguard.classfile.editor.AnnotationAdder::constantAdder:proguard.classfile.editor.ConstantAdder" />
			<role name="Request()" element="proguard.classfile.editor.AnnotationAdder::visitAnnotation(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation):void" />
			<role name="Request()" element="proguard.classfile.editor.AnnotationAdder::visitAnnotation(proguard.classfile.Clazz, proguard.classfile.Method, int, proguard.classfile.attribute.annotation.Annotation):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.editor.AttributeAdder" />
			<role name="Adaptee" element="proguard.classfile.editor.ConstantAdder" />
			<role name="adaptee" element="proguard.classfile.editor.AttributeAdder::constantAdder:proguard.classfile.editor.ConstantAdder" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitUnknownAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.UnknownAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitSourceFileAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceFileAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitSourceDirAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceDirAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitInnerClassesAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitEnclosingMethodAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.EnclosingMethodAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.DeprecatedAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SyntheticAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SignatureAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitConstantValueAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.ConstantValueAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitExceptionsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.ExceptionsAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitLineNumberTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LineNumberTableAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.annotation.RuntimeVisibleParameterAnnotationsAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.annotation.RuntimeInvisibleParameterAnnotationsAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitAnnotationDefaultAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.annotation.AnnotationDefaultAttribute):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.editor.MemberAdder" />
			<role name="Adaptee" element="proguard.classfile.editor.ConstantAdder" />
			<role name="adaptee" element="proguard.classfile.editor.MemberAdder::constantAdder:proguard.classfile.editor.ConstantAdder" />
			<role name="Request()" element="proguard.classfile.editor.MemberAdder::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Request()" element="proguard.classfile.editor.MemberAdder::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.util.DynamicClassReferenceInitializer" />
			<role name="Adaptee" element="proguard.classfile.util.WarningPrinter" />
			<role name="adaptee" element="proguard.classfile.util.DynamicClassReferenceInitializer::notePrinter:proguard.classfile.util.WarningPrinter" />
			<role name="Request()" element="proguard.classfile.util.DynamicClassReferenceInitializer::visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.editor.AnnotationAdder" />
			<role name="Adaptee" element="proguard.classfile.editor.AnnotationsAttributeEditor" />
			<role name="adaptee" element="proguard.classfile.editor.AnnotationAdder::annotationsAttributeEditor:proguard.classfile.editor.AnnotationsAttributeEditor" />
			<role name="Request()" element="proguard.classfile.editor.AnnotationAdder::visitAnnotation(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.editor.AnnotationAdder" />
			<role name="Adaptee" element="proguard.classfile.editor.ParameterAnnotationsAttributeEditor" />
			<role name="adaptee" element="proguard.classfile.editor.AnnotationAdder::parameterAnnotationsAttributeEditor:proguard.classfile.editor.ParameterAnnotationsAttributeEditor" />
			<role name="Request()" element="proguard.classfile.editor.AnnotationAdder::visitAnnotation(proguard.classfile.Clazz, proguard.classfile.Method, int, proguard.classfile.attribute.annotation.Annotation):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.io.LibraryClassReader" />
			<role name="Adaptee" element="proguard.classfile.io.RuntimeDataInput" />
			<role name="adaptee" element="proguard.classfile.io.LibraryClassReader::dataInput:proguard.classfile.io.RuntimeDataInput" />
			<role name="Request()" element="proguard.classfile.io.LibraryClassReader::visitLibraryClass(proguard.classfile.LibraryClass):void" />
			<role name="Request()" element="proguard.classfile.io.LibraryClassReader::visitIntegerConstant(proguard.classfile.Clazz, proguard.classfile.constant.IntegerConstant):void" />
			<role name="Request()" element="proguard.classfile.io.LibraryClassReader::visitLongConstant(proguard.classfile.Clazz, proguard.classfile.constant.LongConstant):void" />
			<role name="Request()" element="proguard.classfile.io.LibraryClassReader::visitFloatConstant(proguard.classfile.Clazz, proguard.classfile.constant.FloatConstant):void" />
			<role name="Request()" element="proguard.classfile.io.LibraryClassReader::visitDoubleConstant(proguard.classfile.Clazz, proguard.classfile.constant.DoubleConstant):void" />
			<role name="Request()" element="proguard.classfile.io.LibraryClassReader::visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant):void" />
			<role name="Request()" element="proguard.classfile.io.LibraryClassReader::visitUtf8Constant(proguard.classfile.Clazz, proguard.classfile.constant.Utf8Constant):void" />
			<role name="Request()" element="proguard.classfile.io.LibraryClassReader::visitInvokeDynamicConstant(proguard.classfile.Clazz, proguard.classfile.constant.InvokeDynamicConstant):void" />
			<role name="Request()" element="proguard.classfile.io.LibraryClassReader::visitMethodHandleConstant(proguard.classfile.Clazz, proguard.classfile.constant.MethodHandleConstant):void" />
			<role name="Request()" element="proguard.classfile.io.LibraryClassReader::visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant):void" />
			<role name="Request()" element="proguard.classfile.io.LibraryClassReader::visitMethodTypeConstant(proguard.classfile.Clazz, proguard.classfile.constant.MethodTypeConstant):void" />
			<role name="Request()" element="proguard.classfile.io.LibraryClassReader::visitNameAndTypeConstant(proguard.classfile.Clazz, proguard.classfile.constant.NameAndTypeConstant):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.io.ProgramClassReader" />
			<role name="Adaptee" element="proguard.classfile.io.RuntimeDataInput" />
			<role name="adaptee" element="proguard.classfile.io.ProgramClassReader::dataInput:proguard.classfile.io.RuntimeDataInput" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitIntegerConstant(proguard.classfile.Clazz, proguard.classfile.constant.IntegerConstant):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitLongConstant(proguard.classfile.Clazz, proguard.classfile.constant.LongConstant):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitFloatConstant(proguard.classfile.Clazz, proguard.classfile.constant.FloatConstant):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitDoubleConstant(proguard.classfile.Clazz, proguard.classfile.constant.DoubleConstant):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitUtf8Constant(proguard.classfile.Clazz, proguard.classfile.constant.Utf8Constant):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitInvokeDynamicConstant(proguard.classfile.Clazz, proguard.classfile.constant.InvokeDynamicConstant):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitMethodHandleConstant(proguard.classfile.Clazz, proguard.classfile.constant.MethodHandleConstant):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitMethodTypeConstant(proguard.classfile.Clazz, proguard.classfile.constant.MethodTypeConstant):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitNameAndTypeConstant(proguard.classfile.Clazz, proguard.classfile.constant.NameAndTypeConstant):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitUnknownAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.UnknownAttribute):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitBootstrapMethodsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.BootstrapMethodsAttribute):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitSourceFileAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceFileAttribute):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitSourceDirAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceDirAttribute):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitInnerClassesAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesAttribute):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitEnclosingMethodAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.EnclosingMethodAttribute):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SignatureAttribute):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitConstantValueAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.ConstantValueAttribute):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitExceptionsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.ExceptionsAttribute):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitStackMapAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapAttribute):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitStackMapTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapTableAttribute):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitLineNumberTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LineNumberTableAttribute):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitBootstrapMethodInfo(proguard.classfile.Clazz, proguard.classfile.attribute.BootstrapMethodInfo):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitInnerClassesInfo(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesInfo):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitSameZeroFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.SameZeroFrame):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitSameOneFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.SameOneFrame):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitLessZeroFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.LessZeroFrame):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitMoreZeroFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.MoreZeroFrame):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitFullFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.FullFrame):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitObjectType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.ObjectType):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitUninitializedType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.UninitializedType):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitLineNumberInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LineNumberInfo):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitLocalVariableInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableInfo):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitLocalVariableTypeInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeInfo):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitAnnotation(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.ConstantElementValue):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitEnumConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.EnumConstantElementValue):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitClassElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.ClassElementValue):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassReader::visitArrayElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.ArrayElementValue):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.editor.AttributeAdder" />
			<role name="Adaptee" element="proguard.classfile.editor.AttributesEditor" />
			<role name="adaptee" element="proguard.classfile.editor.AttributeAdder::attributesEditor:proguard.classfile.editor.AttributesEditor" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitUnknownAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.UnknownAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitSourceFileAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceFileAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitSourceDirAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceDirAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitInnerClassesAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitEnclosingMethodAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.EnclosingMethodAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.DeprecatedAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SyntheticAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SignatureAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitConstantValueAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.ConstantValueAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitExceptionsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.ExceptionsAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitLineNumberTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LineNumberTableAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.annotation.RuntimeVisibleParameterAnnotationsAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.annotation.RuntimeInvisibleParameterAnnotationsAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.AttributeAdder::visitAnnotationDefaultAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.annotation.AnnotationDefaultAttribute):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.editor.ExceptionAdder" />
			<role name="Adaptee" element="proguard.classfile.editor.ExceptionsAttributeEditor" />
			<role name="adaptee" element="proguard.classfile.editor.ExceptionAdder::exceptionsAttributeEditor:proguard.classfile.editor.ExceptionsAttributeEditor" />
			<role name="Request()" element="proguard.classfile.editor.ExceptionAdder::visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.editor.InterfaceAdder" />
			<role name="Adaptee" element="proguard.classfile.editor.InterfacesEditor" />
			<role name="adaptee" element="proguard.classfile.editor.InterfaceAdder::interfacesEditor:proguard.classfile.editor.InterfacesEditor" />
			<role name="Request()" element="proguard.classfile.editor.InterfaceAdder::visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.editor.MemberAdder" />
			<role name="Adaptee" element="proguard.classfile.editor.ClassEditor" />
			<role name="adaptee" element="proguard.classfile.editor.MemberAdder::classEditor:proguard.classfile.editor.ClassEditor" />
			<role name="Request()" element="proguard.classfile.editor.MemberAdder::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Request()" element="proguard.classfile.editor.MemberAdder::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.io.ProgramClassWriter" />
			<role name="Adaptee" element="proguard.classfile.io.RuntimeDataOutput" />
			<role name="adaptee" element="proguard.classfile.io.ProgramClassWriter::dataOutput:proguard.classfile.io.RuntimeDataOutput" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassWriter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassWriter::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Request()" element="proguard.classfile.io.ProgramClassWriter::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.DescriptorKeepChecker" />
			<role name="Adaptee" element="proguard.classfile.util.WarningPrinter" />
			<role name="adaptee" element="proguard.DescriptorKeepChecker::notePrinter:proguard.classfile.util.WarningPrinter" />
			<role name="Request()" element="proguard.DescriptorKeepChecker::visitProgramClass(proguard.classfile.ProgramClass):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.util.ClassReferenceInitializer" />
			<role name="Adaptee" element="proguard.classfile.util.WarningPrinter" />
			<role name="adaptee" element="proguard.classfile.util.ClassReferenceInitializer::missingMemberWarningPrinter:proguard.classfile.util.WarningPrinter" />
			<role name="Request()" element="proguard.classfile.util.ClassReferenceInitializer::visitEnclosingMethodAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.EnclosingMethodAttribute):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.DuplicateClassPrinter" />
			<role name="Adaptee" element="proguard.classfile.util.WarningPrinter" />
			<role name="adaptee" element="proguard.DuplicateClassPrinter::notePrinter:proguard.classfile.util.WarningPrinter" />
			<role name="Request()" element="proguard.DuplicateClassPrinter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Request()" element="proguard.DuplicateClassPrinter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.util.DynamicMemberReferenceInitializer" />
			<role name="Adaptee" element="proguard.classfile.util.WarningPrinter" />
			<role name="adaptee" element="proguard.classfile.util.DynamicMemberReferenceInitializer::notePrinter:proguard.classfile.util.WarningPrinter" />
			<role name="Request()" element="proguard.classfile.util.DynamicMemberReferenceInitializer::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Request()" element="proguard.classfile.util.DynamicMemberReferenceInitializer::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Request()" element="proguard.classfile.util.DynamicMemberReferenceInitializer::visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField):void" />
			<role name="Request()" element="proguard.classfile.util.DynamicMemberReferenceInitializer::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="Adapter" element="proguard.classfile.visitor.MemberToClassVisitor" />
			<role name="adaptee" element="proguard.classfile.visitor.MemberToClassVisitor::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Request()" element="proguard.classfile.visitor.MemberToClassVisitor::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Request()" element="proguard.classfile.visitor.MemberToClassVisitor::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Request()" element="proguard.classfile.visitor.MemberToClassVisitor::visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField):void" />
			<role name="Request()" element="proguard.classfile.visitor.MemberToClassVisitor::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.editor.ConstantAdder" />
			<role name="Adaptee" element="proguard.classfile.editor.ConstantPoolEditor" />
			<role name="adaptee" element="proguard.classfile.editor.ConstantAdder::constantPoolEditor:proguard.classfile.editor.ConstantPoolEditor" />
			<role name="Request()" element="proguard.classfile.editor.ConstantAdder::visitIntegerConstant(proguard.classfile.Clazz, proguard.classfile.constant.IntegerConstant):void" />
			<role name="Request()" element="proguard.classfile.editor.ConstantAdder::visitLongConstant(proguard.classfile.Clazz, proguard.classfile.constant.LongConstant):void" />
			<role name="Request()" element="proguard.classfile.editor.ConstantAdder::visitFloatConstant(proguard.classfile.Clazz, proguard.classfile.constant.FloatConstant):void" />
			<role name="Request()" element="proguard.classfile.editor.ConstantAdder::visitDoubleConstant(proguard.classfile.Clazz, proguard.classfile.constant.DoubleConstant):void" />
			<role name="Request()" element="proguard.classfile.editor.ConstantAdder::visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant):void" />
			<role name="Request()" element="proguard.classfile.editor.ConstantAdder::visitUtf8Constant(proguard.classfile.Clazz, proguard.classfile.constant.Utf8Constant):void" />
			<role name="Request()" element="proguard.classfile.editor.ConstantAdder::visitInvokeDynamicConstant(proguard.classfile.Clazz, proguard.classfile.constant.InvokeDynamicConstant):void" />
			<role name="Request()" element="proguard.classfile.editor.ConstantAdder::visitMethodHandleConstant(proguard.classfile.Clazz, proguard.classfile.constant.MethodHandleConstant):void" />
			<role name="Request()" element="proguard.classfile.editor.ConstantAdder::visitFieldrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.FieldrefConstant):void" />
			<role name="Request()" element="proguard.classfile.editor.ConstantAdder::visitInterfaceMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.InterfaceMethodrefConstant):void" />
			<role name="Request()" element="proguard.classfile.editor.ConstantAdder::visitMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.MethodrefConstant):void" />
			<role name="Request()" element="proguard.classfile.editor.ConstantAdder::visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant):void" />
			<role name="Request()" element="proguard.classfile.editor.ConstantAdder::visitMethodTypeConstant(proguard.classfile.Clazz, proguard.classfile.constant.MethodTypeConstant):void" />
			<role name="Request()" element="proguard.classfile.editor.ConstantAdder::visitNameAndTypeConstant(proguard.classfile.Clazz, proguard.classfile.constant.NameAndTypeConstant):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.editor.ConstantAdder" />
			<role name="Adapter" element="proguard.classfile.editor.ExceptionInfoAdder" />
			<role name="adaptee" element="proguard.classfile.editor.ExceptionInfoAdder::constantAdder:proguard.classfile.editor.ConstantAdder" />
			<role name="Request()" element="proguard.classfile.editor.ExceptionInfoAdder::visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.Member" />
			<role name="Adapter" element="proguard.DescriptorKeepChecker" />
			<role name="adaptee" element="proguard.DescriptorKeepChecker::referencingMember:proguard.classfile.Member" />
			<role name="Request()" element="proguard.DescriptorKeepChecker::visitProgramClass(proguard.classfile.ProgramClass):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.ProgramMethod" />
			<role name="Adapter" element="proguard.optimize.peephole.MethodInliner" />
			<role name="adaptee" element="proguard.optimize.peephole.MethodInliner::targetMethod:proguard.classfile.ProgramMethod" />
			<role name="Request()" element="proguard.optimize.peephole.MethodInliner::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
			<role name="Request()" element="proguard.optimize.peephole.MethodInliner::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.editor.ConstantAdder" />
			<role name="Adapter" element="proguard.classfile.editor.LocalVariableInfoAdder" />
			<role name="adaptee" element="proguard.classfile.editor.LocalVariableInfoAdder::constantAdder:proguard.classfile.editor.ConstantAdder" />
			<role name="Request()" element="proguard.classfile.editor.LocalVariableInfoAdder::visitLocalVariableInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableInfo):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.editor.ConstantAdder" />
			<role name="Adapter" element="proguard.classfile.editor.LocalVariableTypeInfoAdder" />
			<role name="adaptee" element="proguard.classfile.editor.LocalVariableTypeInfoAdder::constantAdder:proguard.classfile.editor.ConstantAdder" />
			<role name="Request()" element="proguard.classfile.editor.LocalVariableTypeInfoAdder::visitLocalVariableTypeInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeInfo):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.editor.MethodInvocationFixer" />
			<role name="Adaptee" element="proguard.classfile.Member" />
			<role name="adaptee" element="proguard.classfile.editor.MethodInvocationFixer::referencedMethod:proguard.classfile.Member" />
			<role name="Request()" element="proguard.classfile.editor.MethodInvocationFixer::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.optimize.TailRecursionSimplifier" />
			<role name="Adaptee" element="proguard.classfile.Method" />
			<role name="adaptee" element="proguard.optimize.TailRecursionSimplifier::targetMethod:proguard.classfile.Method" />
			<role name="Request()" element="proguard.optimize.TailRecursionSimplifier::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.editor.LocalVariableTableAttributeEditor" />
			<role name="Adapter" element="proguard.classfile.editor.LocalVariableInfoAdder" />
			<role name="adaptee" element="proguard.classfile.editor.LocalVariableInfoAdder::localVariableTableAttributeEditor:proguard.classfile.editor.LocalVariableTableAttributeEditor" />
			<role name="Request()" element="proguard.classfile.editor.LocalVariableInfoAdder::visitLocalVariableInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableInfo):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.editor.LocalVariableTypeTableAttributeEditor" />
			<role name="Adapter" element="proguard.classfile.editor.LocalVariableTypeInfoAdder" />
			<role name="adaptee" element="proguard.classfile.editor.LocalVariableTypeInfoAdder::localVariableTypeTableAttributeEditor:proguard.classfile.editor.LocalVariableTypeTableAttributeEditor" />
			<role name="Request()" element="proguard.classfile.editor.LocalVariableTypeInfoAdder::visitLocalVariableTypeInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeInfo):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.editor.LineNumberTableAttributeEditor" />
			<role name="Adapter" element="proguard.classfile.editor.LineNumberInfoAdder" />
			<role name="adaptee" element="proguard.classfile.editor.LineNumberInfoAdder::lineNumberTableAttributeEditor:proguard.classfile.editor.LineNumberTableAttributeEditor" />
			<role name="Request()" element="proguard.classfile.editor.LineNumberInfoAdder::visitLineNumberInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LineNumberInfo):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.editor.ConstantAdder" />
			<role name="Adapter" element="proguard.classfile.editor.ElementValueAdder" />
			<role name="adaptee" element="proguard.classfile.editor.ElementValueAdder::constantAdder:proguard.classfile.editor.ConstantAdder" />
			<role name="Request()" element="proguard.classfile.editor.ElementValueAdder::visitConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.ConstantElementValue):void" />
			<role name="Request()" element="proguard.classfile.editor.ElementValueAdder::visitEnumConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.EnumConstantElementValue):void" />
			<role name="Request()" element="proguard.classfile.editor.ElementValueAdder::visitClassElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.ClassElementValue):void" />
			<role name="Request()" element="proguard.classfile.editor.ElementValueAdder::visitAnnotationElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.AnnotationElementValue):void" />
			<role name="Request()" element="proguard.classfile.editor.ElementValueAdder::visitArrayElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.ArrayElementValue):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.ClassPool" />
			<role name="Adapter" element="proguard.obfuscate.MappingKeeper" />
			<role name="adaptee" element="proguard.obfuscate.MappingKeeper::classPool:proguard.classfile.ClassPool" />
			<role name="Request()" element="proguard.obfuscate.MappingKeeper::processClassMapping(java.lang.String, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.util.WarningPrinter" />
			<role name="Adapter" element="proguard.obfuscate.MappingKeeper" />
			<role name="adaptee" element="proguard.obfuscate.MappingKeeper::warningPrinter:proguard.classfile.util.WarningPrinter" />
			<role name="Request()" element="proguard.obfuscate.MappingKeeper::processClassMapping(java.lang.String, java.lang.String):boolean" />
			<role name="Request()" element="proguard.obfuscate.MappingKeeper::processFieldMapping(java.lang.String, java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Request()" element="proguard.obfuscate.MappingKeeper::processMethodMapping(java.lang.String, int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.util.WarningPrinter" />
			<role name="Adapter" element="proguard.io.ClassReader" />
			<role name="adaptee" element="proguard.io.ClassReader::warningPrinter:proguard.classfile.util.WarningPrinter" />
			<role name="Request()" element="proguard.io.ClassReader::read(proguard.io.DataEntry):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.ClassPool" />
			<role name="Adapter" element="proguard.io.ClassRewriter" />
			<role name="adaptee" element="proguard.io.ClassRewriter::classPool:proguard.classfile.ClassPool" />
			<role name="Request()" element="proguard.io.ClassRewriter::read(proguard.io.DataEntry):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.evaluation.Stack" />
			<role name="Adapter" element="proguard.evaluation.Processor" />
			<role name="adaptee" element="proguard.evaluation.Processor::stack:proguard.evaluation.Stack" />
			<role name="Request()" element="proguard.evaluation.Processor::visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitTableSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.TableSwitchInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitLookUpSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.LookUpSwitchInstruction):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.evaluation.Stack" />
			<role name="Adapter" element="proguard.evaluation.BasicInvocationUnit" />
			<role name="adaptee" element="proguard.evaluation.BasicInvocationUnit::stack:proguard.evaluation.Stack" />
			<role name="Request()" element="proguard.evaluation.BasicInvocationUnit::visitFieldrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.FieldrefConstant):void" />
			<role name="Request()" element="proguard.evaluation.BasicInvocationUnit::visitInvokeDynamicConstant(proguard.classfile.Clazz, proguard.classfile.constant.InvokeDynamicConstant):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.optimize.evaluation.PartialEvaluator" />
			<role name="Adaptee" element="proguard.evaluation.value.ValueFactory" />
			<role name="adaptee" element="proguard.optimize.evaluation.PartialEvaluator::valueFactory:proguard.evaluation.value.ValueFactory" />
			<role name="Request()" element="proguard.optimize.evaluation.PartialEvaluator::visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.evaluation.ConstantValueFactory" />
			<role name="Adaptee" element="proguard.evaluation.value.ValueFactory" />
			<role name="adaptee" element="proguard.evaluation.ConstantValueFactory::valueFactory:proguard.evaluation.value.ValueFactory" />
			<role name="Request()" element="proguard.evaluation.ConstantValueFactory::visitIntegerConstant(proguard.classfile.Clazz, proguard.classfile.constant.IntegerConstant):void" />
			<role name="Request()" element="proguard.evaluation.ConstantValueFactory::visitLongConstant(proguard.classfile.Clazz, proguard.classfile.constant.LongConstant):void" />
			<role name="Request()" element="proguard.evaluation.ConstantValueFactory::visitFloatConstant(proguard.classfile.Clazz, proguard.classfile.constant.FloatConstant):void" />
			<role name="Request()" element="proguard.evaluation.ConstantValueFactory::visitDoubleConstant(proguard.classfile.Clazz, proguard.classfile.constant.DoubleConstant):void" />
			<role name="Request()" element="proguard.evaluation.ConstantValueFactory::visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant):void" />
			<role name="Request()" element="proguard.evaluation.ConstantValueFactory::visitMethodHandleConstant(proguard.classfile.Clazz, proguard.classfile.constant.MethodHandleConstant):void" />
			<role name="Request()" element="proguard.evaluation.ConstantValueFactory::visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant):void" />
			<role name="Request()" element="proguard.evaluation.ConstantValueFactory::visitMethodTypeConstant(proguard.classfile.Clazz, proguard.classfile.constant.MethodTypeConstant):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.evaluation.Variables" />
			<role name="Adapter" element="proguard.evaluation.Processor" />
			<role name="adaptee" element="proguard.evaluation.Processor::variables:proguard.evaluation.Variables" />
			<role name="Request()" element="proguard.evaluation.Processor::visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.evaluation.value.ValueFactory" />
			<role name="Adapter" element="proguard.evaluation.Processor" />
			<role name="adaptee" element="proguard.evaluation.Processor::valueFactory:proguard.evaluation.value.ValueFactory" />
			<role name="Request()" element="proguard.evaluation.Processor::visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitTableSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.TableSwitchInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitLookUpSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.LookUpSwitchInstruction):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.gui.splash.BufferedSprite" />
			<role name="Adaptee" element="proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.BufferedSprite::x:proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.BufferedSprite::y:proguard.gui.splash.VariableInt" />
			<role name="Request()" element="proguard.gui.splash.BufferedSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.gui.splash.ShadowedSprite" />
			<role name="Adaptee" element="proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.ShadowedSprite::blur:proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.ShadowedSprite::xOffset:proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.ShadowedSprite::yOffset:proguard.gui.splash.VariableInt" />
			<role name="Request()" element="proguard.gui.splash.ShadowedSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.gui.splash.CircleSprite" />
			<role name="Adaptee" element="proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.CircleSprite::x:proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.CircleSprite::y:proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.CircleSprite::radius:proguard.gui.splash.VariableInt" />
			<role name="Request()" element="proguard.gui.splash.CircleSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.gui.splash.ImageSprite" />
			<role name="Adaptee" element="proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.ImageSprite::x:proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.ImageSprite::y:proguard.gui.splash.VariableInt" />
			<role name="Request()" element="proguard.gui.splash.ImageSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.gui.splash.RectangleSprite" />
			<role name="Adaptee" element="proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.RectangleSprite::x:proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.RectangleSprite::y:proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.RectangleSprite::width:proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.RectangleSprite::height:proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.RectangleSprite::arcWidth:proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.RectangleSprite::arcHeight:proguard.gui.splash.VariableInt" />
			<role name="Request()" element="proguard.gui.splash.RectangleSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.gui.splash.TextSprite" />
			<role name="Adaptee" element="proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.TextSprite::x:proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.TextSprite::y:proguard.gui.splash.VariableInt" />
			<role name="adaptee" element="proguard.gui.splash.TextSprite::spacing:proguard.gui.splash.VariableInt" />
			<role name="Request()" element="proguard.gui.splash.TextSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.io.DataEntryWriter" />
			<role name="Adapter" element="proguard.io.ClassRewriter" />
			<role name="adaptee" element="proguard.io.ClassRewriter::dataEntryWriter:proguard.io.DataEntryWriter" />
			<role name="Request()" element="proguard.io.ClassRewriter::read(proguard.io.DataEntry):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.io.DataEntryWriter" />
			<role name="Adapter" element="proguard.io.DataEntryCopier" />
			<role name="adaptee" element="proguard.io.DataEntryCopier::dataEntryWriter:proguard.io.DataEntryWriter" />
			<role name="Request()" element="proguard.io.DataEntryCopier::read(proguard.io.DataEntry):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.classfile.util.DynamicClassReferenceInitializer" />
			<role name="Adaptee" element="proguard.util.StringMatcher" />
			<role name="adaptee" element="proguard.classfile.util.DynamicClassReferenceInitializer::noteExceptionMatcher:proguard.util.StringMatcher" />
			<role name="Request()" element="proguard.classfile.util.DynamicClassReferenceInitializer::visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.io.FilteredDataEntryReader" />
			<role name="Adaptee" element="proguard.io.DataEntryFilter" />
			<role name="adaptee" element="proguard.io.FilteredDataEntryReader::dataEntryFilter:proguard.io.DataEntryFilter" />
			<role name="Request()" element="proguard.io.FilteredDataEntryReader::read(proguard.io.DataEntry):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.obfuscate.NameFactory" />
			<role name="Adapter" element="proguard.obfuscate.NameFactoryResetter" />
			<role name="adaptee" element="proguard.obfuscate.NameFactoryResetter::nameFactory:proguard.obfuscate.NameFactory" />
			<role name="Request()" element="proguard.obfuscate.NameFactoryResetter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Request()" element="proguard.obfuscate.NameFactoryResetter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.evaluation.BranchUnit" />
			<role name="Adapter" element="proguard.evaluation.Processor" />
			<role name="adaptee" element="proguard.evaluation.Processor::branchUnit:proguard.evaluation.BranchUnit" />
			<role name="Request()" element="proguard.evaluation.Processor::visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitTableSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.TableSwitchInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitLookUpSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.LookUpSwitchInstruction):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.io.JarWriter" />
			<role name="Adaptee" element="proguard.io.DataEntry" />
			<role name="adaptee" element="proguard.io.JarWriter::currentDataEntry:proguard.io.DataEntry" />
			<role name="Request()" element="proguard.io.JarWriter::createDirectory(proguard.io.DataEntry):boolean" />
			<role name="Request()" element="proguard.io.JarWriter::getOutputStream(proguard.io.DataEntry, proguard.io.Finisher):java.io.OutputStream" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.evaluation.value.InstructionOffsetValue" />
			<role name="Adapter" element="proguard.evaluation.BasicBranchUnit" />
			<role name="adaptee" element="proguard.evaluation.BasicBranchUnit::traceBranchTargets:proguard.evaluation.value.InstructionOffsetValue" />
			<role name="Request()" element="proguard.evaluation.BasicBranchUnit::branchConditionally(proguard.classfile.Clazz, proguard.classfile.attribute.CodeAttribute, int, int, int):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.gui.splash.ClipSprite" />
			<role name="Adaptee" element="proguard.gui.splash.VariableColor" />
			<role name="adaptee" element="proguard.gui.splash.ClipSprite::outsideClipColor:proguard.gui.splash.VariableColor" />
			<role name="adaptee" element="proguard.gui.splash.ClipSprite::insideClipColor:proguard.gui.splash.VariableColor" />
			<role name="Request()" element="proguard.gui.splash.ClipSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.gui.splash.ColorSprite" />
			<role name="Adaptee" element="proguard.gui.splash.VariableColor" />
			<role name="adaptee" element="proguard.gui.splash.ColorSprite::color:proguard.gui.splash.VariableColor" />
			<role name="Request()" element="proguard.gui.splash.ColorSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.gui.splash.RectangleSprite" />
			<role name="Adaptee" element="proguard.gui.splash.VariableColor" />
			<role name="adaptee" element="proguard.gui.splash.RectangleSprite::color:proguard.gui.splash.VariableColor" />
			<role name="Request()" element="proguard.gui.splash.RectangleSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.classfile.Clazz" />
			<role name="Adapter" element="proguard.obfuscate.MappingKeeper" />
			<role name="adaptee" element="proguard.obfuscate.MappingKeeper::clazz:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.obfuscate.MappingKeeper::processFieldMapping(java.lang.String, java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Request()" element="proguard.obfuscate.MappingKeeper::processMethodMapping(java.lang.String, int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.evaluation.InvocationUnit" />
			<role name="Adapter" element="proguard.evaluation.Processor" />
			<role name="adaptee" element="proguard.evaluation.Processor::invocationUnit:proguard.evaluation.InvocationUnit" />
			<role name="Request()" element="proguard.evaluation.Processor::visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.gui.splash.ShadowedSprite" />
			<role name="Adaptee" element="proguard.gui.splash.VariableDouble" />
			<role name="adaptee" element="proguard.gui.splash.ShadowedSprite::alpha:proguard.gui.splash.VariableDouble" />
			<role name="Request()" element="proguard.gui.splash.ShadowedSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.gui.splash.ImageSprite" />
			<role name="Adaptee" element="proguard.gui.splash.VariableDouble" />
			<role name="adaptee" element="proguard.gui.splash.ImageSprite::scaleX:proguard.gui.splash.VariableDouble" />
			<role name="adaptee" element="proguard.gui.splash.ImageSprite::scaleY:proguard.gui.splash.VariableDouble" />
			<role name="Request()" element="proguard.gui.splash.ImageSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.io.DataEntryWriter" />
			<role name="Adapter" element="proguard.io.DataEntryClassWriter" />
			<role name="adaptee" element="proguard.io.DataEntryClassWriter::dataEntryWriter:proguard.io.DataEntryWriter" />
			<role name="Request()" element="proguard.io.DataEntryClassWriter::visitProgramClass(proguard.classfile.ProgramClass):void" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.gui.splash.FontSprite" />
			<role name="Adaptee" element="proguard.gui.splash.VariableFont" />
			<role name="adaptee" element="proguard.gui.splash.FontSprite::font:proguard.gui.splash.VariableFont" />
			<role name="Request()" element="proguard.gui.splash.FontSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.gui.splash.Timing" />
			<role name="Adapter" element="proguard.gui.splash.LinearColor" />
			<role name="adaptee" element="proguard.gui.splash.LinearColor::timing:proguard.gui.splash.Timing" />
			<role name="Request()" element="proguard.gui.splash.LinearColor::getColor(long):java.awt.Color" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.gui.splash.Timing" />
			<role name="Adapter" element="proguard.gui.splash.LinearDouble" />
			<role name="adaptee" element="proguard.gui.splash.LinearDouble::timing:proguard.gui.splash.Timing" />
			<role name="Request()" element="proguard.gui.splash.LinearDouble::getDouble(long):double" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.gui.splash.VariableDouble" />
			<role name="Adapter" element="proguard.gui.splash.VariableSizeFont" />
			<role name="adaptee" element="proguard.gui.splash.VariableSizeFont::size:proguard.gui.splash.VariableDouble" />
			<role name="Request()" element="proguard.gui.splash.VariableSizeFont::getFont(long):java.awt.Font" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.gui.splash.Timing" />
			<role name="Adapter" element="proguard.gui.splash.LinearInt" />
			<role name="adaptee" element="proguard.gui.splash.LinearInt::timing:proguard.gui.splash.Timing" />
			<role name="Request()" element="proguard.gui.splash.LinearInt::getInt(long):int" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.gui.splash.Timing" />
			<role name="Adapter" element="proguard.gui.splash.TypeWriterString" />
			<role name="adaptee" element="proguard.gui.splash.TypeWriterString::timing:proguard.gui.splash.Timing" />
			<role name="Request()" element="proguard.gui.splash.TypeWriterString::getString(long):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="proguard.util.StringMatcher" />
			<role name="Adapter" element="proguard.io.DataEntryNameFilter" />
			<role name="adaptee" element="proguard.io.DataEntryNameFilter::stringMatcher:proguard.util.StringMatcher" />
			<role name="Request()" element="proguard.io.DataEntryNameFilter::accepts(proguard.io.DataEntry):boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="proguard.io.FilteredDataEntryWriter" />
			<role name="Adaptee" element="proguard.io.DataEntryFilter" />
			<role name="adaptee" element="proguard.io.FilteredDataEntryWriter::dataEntryFilter:proguard.io.DataEntryFilter" />
			<role name="Request()" element="proguard.io.FilteredDataEntryWriter::createDirectory(proguard.io.DataEntry):boolean" />
			<role name="Request()" element="proguard.io.FilteredDataEntryWriter::getOutputStream(proguard.io.DataEntry, proguard.io.Finisher):java.io.OutputStream" />
		</instance>
	</pattern>
	<pattern name="Command" />
	<pattern name="Composite">
		<instance>
			<role name="Component" element="proguard.classfile.Clazz" />
			<role name="Composite" element="proguard.classfile.LibraryClass" />
			<role name="Operation()" element="proguard.classfile.LibraryClass::extendsOrImplements(java.lang.String):boolean" />
			<role name="Operation()" element="proguard.classfile.LibraryClass::hierarchyAccept(boolean, boolean, boolean, boolean, proguard.classfile.visitor.ClassVisitor):void" />
			<role name="Operation()" element="proguard.classfile.LibraryClass::extendsOrImplements(proguard.classfile.Clazz):boolean" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.Clazz" />
			<role name="Composite" element="proguard.classfile.ProgramClass" />
			<role name="Operation()" element="proguard.classfile.ProgramClass::extendsOrImplements(proguard.classfile.Clazz):boolean" />
			<role name="Operation()" element="proguard.classfile.ProgramClass::extendsOrImplements(java.lang.String):boolean" />
			<role name="Operation()" element="proguard.classfile.ProgramClass::hierarchyAccept(boolean, boolean, boolean, boolean, proguard.classfile.visitor.ClassVisitor):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Composite" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitUnknownAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.UnknownAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitBootstrapMethodsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.BootstrapMethodsAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitSourceFileAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceFileAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitSourceDirAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceDirAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitInnerClassesAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitEnclosingMethodAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.EnclosingMethodAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.DeprecatedAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SyntheticAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SignatureAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.DeprecatedAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.SyntheticAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.SignatureAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.DeprecatedAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.SyntheticAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.SignatureAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitConstantValueAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.ConstantValueAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitExceptionsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.ExceptionsAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitStackMapAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitStackMapTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapTableAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitLineNumberTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LineNumberTableAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.annotation.RuntimeVisibleParameterAnnotationsAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.annotation.RuntimeInvisibleParameterAnnotationsAttribute):void" />
			<role name="Operation()" element="proguard.classfile.attribute.visitor.MultiAttributeVisitor::visitAnnotationDefaultAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.annotation.AnnotationDefaultAttribute):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="Composite" element="proguard.classfile.visitor.MultiClassVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.MultiClassVisitor::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Operation()" element="proguard.classfile.visitor.MultiClassVisitor::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Composite" element="proguard.classfile.visitor.MultiMemberVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.MultiMemberVisitor::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Operation()" element="proguard.classfile.visitor.MultiMemberVisitor::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Operation()" element="proguard.classfile.visitor.MultiMemberVisitor::visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField):void" />
			<role name="Operation()" element="proguard.classfile.visitor.MultiMemberVisitor::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Composite" element="proguard.classfile.instruction.visitor.MultiInstructionVisitor" />
			<role name="Operation()" element="proguard.classfile.instruction.visitor.MultiInstructionVisitor::visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction):void" />
			<role name="Operation()" element="proguard.classfile.instruction.visitor.MultiInstructionVisitor::visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction):void" />
			<role name="Operation()" element="proguard.classfile.instruction.visitor.MultiInstructionVisitor::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
			<role name="Operation()" element="proguard.classfile.instruction.visitor.MultiInstructionVisitor::visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction):void" />
			<role name="Operation()" element="proguard.classfile.instruction.visitor.MultiInstructionVisitor::visitTableSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.TableSwitchInstruction):void" />
			<role name="Operation()" element="proguard.classfile.instruction.visitor.MultiInstructionVisitor::visitLookUpSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.LookUpSwitchInstruction):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.ClassPoolVisitor" />
			<role name="Composite" element="proguard.classfile.visitor.MultiClassPoolVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.MultiClassPoolVisitor::visitClassPool(proguard.classfile.ClassPool):void" />
		</instance>
	</pattern>
	<pattern name="Decorator">
		<instance>
			<role name="Component" element="proguard.classfile.Clazz" />
			<role name="Decorator" element="proguard.classfile.LibraryClass" />
			<role name="component" element="proguard.classfile.LibraryClass::superClass:proguard.classfile.Clazz" />
			<role name="component" element="proguard.classfile.LibraryClass::interfaceClasses:proguard.classfile.Clazz[]" />
			<role name="component" element="proguard.classfile.LibraryClass::subClasses:proguard.classfile.Clazz[]" />
			<role name="Operation()" element="proguard.classfile.LibraryClass::extends_(proguard.classfile.Clazz):boolean" />
			<role name="Operation()" element="proguard.classfile.LibraryClass::extends_(java.lang.String):boolean" />
			<role name="Operation()" element="proguard.classfile.LibraryClass::extendsOrImplements(proguard.classfile.Clazz):boolean" />
			<role name="Operation()" element="proguard.classfile.LibraryClass::extendsOrImplements(java.lang.String):boolean" />
			<role name="Operation()" element="proguard.classfile.LibraryClass::hierarchyAccept(boolean, boolean, boolean, boolean, proguard.classfile.visitor.ClassVisitor):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Decorator" element="proguard.obfuscate.ParameterNameMarker" />
			<role name="component" element="proguard.obfuscate.ParameterNameMarker::attributeUsageMarker:proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Operation()" element="proguard.obfuscate.ParameterNameMarker::visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute):void" />
			<role name="Operation()" element="proguard.obfuscate.ParameterNameMarker::visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Decorator" element="proguard.optimize.ChangedCodePrinter" />
			<role name="component" element="proguard.optimize.ChangedCodePrinter::attributeVisitor:proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitUnknownAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.UnknownAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitBootstrapMethodsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.BootstrapMethodsAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitSourceFileAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceFileAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitSourceDirAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceDirAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitInnerClassesAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitEnclosingMethodAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.EnclosingMethodAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.DeprecatedAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SyntheticAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SignatureAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.DeprecatedAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.SyntheticAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.SignatureAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.DeprecatedAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.SyntheticAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.SignatureAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitConstantValueAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.ConstantValueAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitExceptionsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.ExceptionsAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitStackMapAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitStackMapTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapTableAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitLineNumberTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LineNumberTableAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.annotation.RuntimeVisibleParameterAnnotationsAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.annotation.RuntimeInvisibleParameterAnnotationsAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitAnnotationDefaultAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.annotation.AnnotationDefaultAttribute):void" />
			<role name="Operation()" element="proguard.optimize.ChangedCodePrinter::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.attribute.annotation.visitor.AnnotationVisitor" />
			<role name="Decorator" element="proguard.classfile.attribute.annotation.visitor.AnnotationTypeFilter" />
			<role name="component" element="proguard.classfile.attribute.annotation.visitor.AnnotationTypeFilter::annotationVisitor:proguard.classfile.attribute.annotation.visitor.AnnotationVisitor" />
			<role name="Operation()" element="proguard.classfile.attribute.annotation.visitor.AnnotationTypeFilter::visitAnnotation(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation):void" />
			<role name="Operation()" element="proguard.classfile.attribute.annotation.visitor.AnnotationTypeFilter::visitAnnotation(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.annotation.Annotation):void" />
			<role name="Operation()" element="proguard.classfile.attribute.annotation.visitor.AnnotationTypeFilter::visitAnnotation(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.annotation.Annotation):void" />
			<role name="Operation()" element="proguard.classfile.attribute.annotation.visitor.AnnotationTypeFilter::visitAnnotation(proguard.classfile.Clazz, proguard.classfile.Method, int, proguard.classfile.attribute.annotation.Annotation):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.attribute.annotation.visitor.ElementValueVisitor" />
			<role name="Decorator" element="proguard.classfile.attribute.annotation.visitor.AllElementValueVisitor" />
			<role name="component" element="proguard.classfile.attribute.annotation.visitor.AllElementValueVisitor::elementValueVisitor:proguard.classfile.attribute.annotation.visitor.ElementValueVisitor" />
			<role name="Operation()" element="proguard.classfile.attribute.annotation.visitor.AllElementValueVisitor::visitConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.ConstantElementValue):void" />
			<role name="Operation()" element="proguard.classfile.attribute.annotation.visitor.AllElementValueVisitor::visitEnumConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.EnumConstantElementValue):void" />
			<role name="Operation()" element="proguard.classfile.attribute.annotation.visitor.AllElementValueVisitor::visitClassElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.ClassElementValue):void" />
			<role name="Operation()" element="proguard.classfile.attribute.annotation.visitor.AllElementValueVisitor::visitAnnotationElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.AnnotationElementValue):void" />
			<role name="Operation()" element="proguard.classfile.attribute.annotation.visitor.AllElementValueVisitor::visitArrayElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.ArrayElementValue):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.SubclassedClassFilter" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.SubclassedClassFilter::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.SubclassedClassFilter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Operation()" element="proguard.SubclassedClassFilter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.classfile.visitor.BottomClassFilter" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.classfile.visitor.BottomClassFilter::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.BottomClassFilter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Operation()" element="proguard.classfile.visitor.BottomClassFilter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.classfile.visitor.ClassAccessFilter" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.classfile.visitor.ClassAccessFilter::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.ClassAccessFilter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Operation()" element="proguard.classfile.visitor.ClassAccessFilter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.classfile.visitor.ClassNameFilter" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.classfile.visitor.ClassNameFilter::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.ClassNameFilter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Operation()" element="proguard.classfile.visitor.ClassNameFilter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.classfile.visitor.ClassVersionFilter" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.classfile.visitor.ClassVersionFilter::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.ClassVersionFilter::visitProgramClass(proguard.classfile.ProgramClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.classfile.visitor.ExceptClassFilter" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.classfile.visitor.ExceptClassFilter::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.ExceptClassFilter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Operation()" element="proguard.classfile.visitor.ExceptClassFilter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.classfile.visitor.ExceptClassesFilter" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.classfile.visitor.ExceptClassesFilter::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.ExceptClassesFilter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Operation()" element="proguard.classfile.visitor.ExceptClassesFilter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.classfile.visitor.ImplementedClassFilter" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.classfile.visitor.ImplementedClassFilter::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.ImplementedClassFilter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Operation()" element="proguard.classfile.visitor.ImplementedClassFilter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.classfile.visitor.LibraryClassFilter" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.classfile.visitor.LibraryClassFilter::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.LibraryClassFilter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.classfile.visitor.ProgramClassFilter" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.classfile.visitor.ProgramClassFilter::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.ProgramClassFilter::visitProgramClass(proguard.classfile.ProgramClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.classfile.visitor.SubclassFilter" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.classfile.visitor.SubclassFilter::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.SubclassFilter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Operation()" element="proguard.classfile.visitor.SubclassFilter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.classfile.visitor.VariableClassVisitor" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.classfile.visitor.VariableClassVisitor::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.VariableClassVisitor::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Operation()" element="proguard.classfile.visitor.VariableClassVisitor::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.optimize.KeptClassFilter" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.optimize.KeptClassFilter::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.optimize.KeptClassFilter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Operation()" element="proguard.optimize.KeptClassFilter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.optimize.info.CaughtClassFilter" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.optimize.info.CaughtClassFilter::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.optimize.info.CaughtClassFilter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Operation()" element="proguard.optimize.info.CaughtClassFilter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.optimize.info.DotClassFilter" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.optimize.info.DotClassFilter::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.optimize.info.DotClassFilter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Operation()" element="proguard.optimize.info.DotClassFilter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.optimize.info.InstanceofClassFilter" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.optimize.info.InstanceofClassFilter::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.optimize.info.InstanceofClassFilter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Operation()" element="proguard.optimize.info.InstanceofClassFilter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.optimize.info.InstantiationClassFilter" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.optimize.info.InstantiationClassFilter::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.optimize.info.InstantiationClassFilter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Operation()" element="proguard.optimize.info.InstantiationClassFilter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.optimize.info.StaticInitializerContainingClassFilter" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.optimize.info.StaticInitializerContainingClassFilter::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.optimize.info.StaticInitializerContainingClassFilter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Operation()" element="proguard.optimize.info.StaticInitializerContainingClassFilter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.optimize.peephole.ClassFinalizer" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.optimize.peephole.ClassFinalizer::extraClassVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.optimize.peephole.ClassFinalizer::visitProgramClass(proguard.classfile.ProgramClass):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.shrink.UsedClassFilter" />
			<role name="Component" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="component" element="proguard.shrink.UsedClassFilter::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Operation()" element="proguard.shrink.UsedClassFilter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Operation()" element="proguard.shrink.UsedClassFilter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.classfile.editor.MemberAdder" />
			<role name="component" element="proguard.classfile.editor.MemberAdder::extraMemberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.classfile.editor.MemberAdder::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Operation()" element="proguard.classfile.editor.MemberAdder::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.classfile.visitor.LibraryMemberFilter" />
			<role name="component" element="proguard.classfile.visitor.LibraryMemberFilter::memberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.LibraryMemberFilter::visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField):void" />
			<role name="Operation()" element="proguard.classfile.visitor.LibraryMemberFilter::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.classfile.visitor.MemberAccessFilter" />
			<role name="component" element="proguard.classfile.visitor.MemberAccessFilter::memberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.MemberAccessFilter::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Operation()" element="proguard.classfile.visitor.MemberAccessFilter::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Operation()" element="proguard.classfile.visitor.MemberAccessFilter::visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField):void" />
			<role name="Operation()" element="proguard.classfile.visitor.MemberAccessFilter::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.classfile.visitor.MemberClassAccessFilter" />
			<role name="component" element="proguard.classfile.visitor.MemberClassAccessFilter::memberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.MemberClassAccessFilter::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Operation()" element="proguard.classfile.visitor.MemberClassAccessFilter::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Operation()" element="proguard.classfile.visitor.MemberClassAccessFilter::visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField):void" />
			<role name="Operation()" element="proguard.classfile.visitor.MemberClassAccessFilter::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.classfile.visitor.MemberDescriptorFilter" />
			<role name="component" element="proguard.classfile.visitor.MemberDescriptorFilter::memberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.MemberDescriptorFilter::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Operation()" element="proguard.classfile.visitor.MemberDescriptorFilter::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Operation()" element="proguard.classfile.visitor.MemberDescriptorFilter::visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField):void" />
			<role name="Operation()" element="proguard.classfile.visitor.MemberDescriptorFilter::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.classfile.visitor.MemberNameFilter" />
			<role name="component" element="proguard.classfile.visitor.MemberNameFilter::memberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.MemberNameFilter::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Operation()" element="proguard.classfile.visitor.MemberNameFilter::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Operation()" element="proguard.classfile.visitor.MemberNameFilter::visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField):void" />
			<role name="Operation()" element="proguard.classfile.visitor.MemberNameFilter::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.classfile.visitor.MethodImplementationFilter" />
			<role name="component" element="proguard.classfile.visitor.MethodImplementationFilter::memberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.MethodImplementationFilter::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Operation()" element="proguard.classfile.visitor.MethodImplementationFilter::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.classfile.visitor.ProgramMemberFilter" />
			<role name="component" element="proguard.classfile.visitor.ProgramMemberFilter::memberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.ProgramMemberFilter::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Operation()" element="proguard.classfile.visitor.ProgramMemberFilter::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.classfile.visitor.VariableMemberVisitor" />
			<role name="component" element="proguard.classfile.visitor.VariableMemberVisitor::memberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.VariableMemberVisitor::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Operation()" element="proguard.classfile.visitor.VariableMemberVisitor::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Operation()" element="proguard.classfile.visitor.VariableMemberVisitor::visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField):void" />
			<role name="Operation()" element="proguard.classfile.visitor.VariableMemberVisitor::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.obfuscate.MemberNameFilter" />
			<role name="component" element="proguard.obfuscate.MemberNameFilter::memberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.obfuscate.MemberNameFilter::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Operation()" element="proguard.obfuscate.MemberNameFilter::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Operation()" element="proguard.obfuscate.MemberNameFilter::visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField):void" />
			<role name="Operation()" element="proguard.obfuscate.MemberNameFilter::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.obfuscate.MemberSpecialNameFilter" />
			<role name="component" element="proguard.obfuscate.MemberSpecialNameFilter::memberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.obfuscate.MemberSpecialNameFilter::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Operation()" element="proguard.obfuscate.MemberSpecialNameFilter::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Operation()" element="proguard.obfuscate.MemberSpecialNameFilter::visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField):void" />
			<role name="Operation()" element="proguard.obfuscate.MemberSpecialNameFilter::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.optimize.ConstantMemberFilter" />
			<role name="component" element="proguard.optimize.ConstantMemberFilter::constantMemberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.optimize.ConstantMemberFilter::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Operation()" element="proguard.optimize.ConstantMemberFilter::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.optimize.ConstantParameterFilter" />
			<role name="component" element="proguard.optimize.ConstantParameterFilter::constantParameterVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.optimize.ConstantParameterFilter::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.optimize.DuplicateInitializerFixer" />
			<role name="component" element="proguard.optimize.DuplicateInitializerFixer::extraFixedInitializerVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.optimize.DuplicateInitializerFixer::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.optimize.KeptMemberFilter" />
			<role name="component" element="proguard.optimize.KeptMemberFilter::memberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.optimize.KeptMemberFilter::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Operation()" element="proguard.optimize.KeptMemberFilter::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Operation()" element="proguard.optimize.KeptMemberFilter::visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField):void" />
			<role name="Operation()" element="proguard.optimize.KeptMemberFilter::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.optimize.MemberDescriptorSpecializer" />
			<role name="component" element="proguard.optimize.MemberDescriptorSpecializer::extraParameterMemberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.optimize.MemberDescriptorSpecializer::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Operation()" element="proguard.optimize.MemberDescriptorSpecializer::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.optimize.MethodDescriptorShrinker" />
			<role name="component" element="proguard.optimize.MethodDescriptorShrinker::extraMemberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.optimize.MethodDescriptorShrinker::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.optimize.MethodStaticizer" />
			<role name="component" element="proguard.optimize.MethodStaticizer::extraStaticMemberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.optimize.MethodStaticizer::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.optimize.OptimizationInfoMemberFilter" />
			<role name="component" element="proguard.optimize.OptimizationInfoMemberFilter::memberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.optimize.OptimizationInfoMemberFilter::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Operation()" element="proguard.optimize.OptimizationInfoMemberFilter::visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField):void" />
			<role name="Operation()" element="proguard.optimize.OptimizationInfoMemberFilter::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Operation()" element="proguard.optimize.OptimizationInfoMemberFilter::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.optimize.WriteOnlyFieldFilter" />
			<role name="component" element="proguard.optimize.WriteOnlyFieldFilter::writeOnlyFieldVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.optimize.WriteOnlyFieldFilter::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.optimize.info.SideEffectMethodFilter" />
			<role name="component" element="proguard.optimize.info.SideEffectMethodFilter::memberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.optimize.info.SideEffectMethodFilter::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Operation()" element="proguard.optimize.info.SideEffectMethodFilter::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.optimize.peephole.MemberPrivatizer" />
			<role name="component" element="proguard.optimize.peephole.MemberPrivatizer::extraMemberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.optimize.peephole.MemberPrivatizer::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Operation()" element="proguard.optimize.peephole.MemberPrivatizer::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.optimize.peephole.MethodFinalizer" />
			<role name="component" element="proguard.optimize.peephole.MethodFinalizer::extraMemberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.optimize.peephole.MethodFinalizer::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Decorator" element="proguard.shrink.UsedMemberFilter" />
			<role name="component" element="proguard.shrink.UsedMemberFilter::memberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Operation()" element="proguard.shrink.UsedMemberFilter::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Operation()" element="proguard.shrink.UsedMemberFilter::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Operation()" element="proguard.shrink.UsedMemberFilter::visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField):void" />
			<role name="Operation()" element="proguard.shrink.UsedMemberFilter::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.optimize.TailRecursionSimplifier" />
			<role name="Component" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="component" element="proguard.optimize.TailRecursionSimplifier::extraTailRecursionVisitor:proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Operation()" element="proguard.optimize.TailRecursionSimplifier::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.optimize.peephole.GotoCommonCodeReplacer" />
			<role name="Component" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="component" element="proguard.optimize.peephole.GotoCommonCodeReplacer::extraInstructionVisitor:proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Operation()" element="proguard.optimize.peephole.GotoCommonCodeReplacer::visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.optimize.peephole.GotoGotoReplacer" />
			<role name="Component" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="component" element="proguard.optimize.peephole.GotoGotoReplacer::extraInstructionVisitor:proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Operation()" element="proguard.optimize.peephole.GotoGotoReplacer::visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.optimize.peephole.GotoReturnReplacer" />
			<role name="Component" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="component" element="proguard.optimize.peephole.GotoReturnReplacer::extraInstructionVisitor:proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Operation()" element="proguard.optimize.peephole.GotoReturnReplacer::visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.optimize.peephole.MethodInliner" />
			<role name="Component" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="component" element="proguard.optimize.peephole.MethodInliner::extraInlinedInvocationVisitor:proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Operation()" element="proguard.optimize.peephole.MethodInliner::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.optimize.peephole.NopRemover" />
			<role name="Component" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="component" element="proguard.optimize.peephole.NopRemover::extraInstructionVisitor:proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Operation()" element="proguard.optimize.peephole.NopRemover::visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.attribute.visitor.ExceptionInfoVisitor" />
			<role name="Decorator" element="proguard.classfile.visitor.ExceptionExcludedOffsetFilter" />
			<role name="component" element="proguard.classfile.visitor.ExceptionExcludedOffsetFilter::exceptionInfoVisitor:proguard.classfile.attribute.visitor.ExceptionInfoVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.ExceptionExcludedOffsetFilter::visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.attribute.visitor.ExceptionInfoVisitor" />
			<role name="Decorator" element="proguard.classfile.visitor.ExceptionHandlerFilter" />
			<role name="component" element="proguard.classfile.visitor.ExceptionHandlerFilter::exceptionInfoVisitor:proguard.classfile.attribute.visitor.ExceptionInfoVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.ExceptionHandlerFilter::visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.attribute.visitor.ExceptionInfoVisitor" />
			<role name="Decorator" element="proguard.classfile.visitor.ExceptionOffsetFilter" />
			<role name="component" element="proguard.classfile.visitor.ExceptionOffsetFilter::exceptionInfoVisitor:proguard.classfile.attribute.visitor.ExceptionInfoVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.ExceptionOffsetFilter::visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.attribute.visitor.ExceptionInfoVisitor" />
			<role name="Decorator" element="proguard.classfile.visitor.ExceptionRangeFilter" />
			<role name="component" element="proguard.classfile.visitor.ExceptionRangeFilter::exceptionInfoVisitor:proguard.classfile.attribute.visitor.ExceptionInfoVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.ExceptionRangeFilter::visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.classfile.attribute.visitor.ExceptionInfoVisitor" />
			<role name="Decorator" element="proguard.optimize.peephole.UnreachableExceptionRemover" />
			<role name="component" element="proguard.optimize.peephole.UnreachableExceptionRemover::extraExceptionInfoVisitor:proguard.classfile.attribute.visitor.ExceptionInfoVisitor" />
			<role name="Operation()" element="proguard.optimize.peephole.UnreachableExceptionRemover::visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.classfile.constant.visitor.ExceptClassConstantFilter" />
			<role name="Component" element="proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="component" element="proguard.classfile.constant.visitor.ExceptClassConstantFilter::constantVisitor:proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="Operation()" element="proguard.classfile.constant.visitor.ExceptClassConstantFilter::visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.classfile.visitor.ImplementedClassConstantFilter" />
			<role name="Component" element="proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="component" element="proguard.classfile.visitor.ImplementedClassConstantFilter::constantVisitor:proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.ImplementedClassConstantFilter::visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.classfile.visitor.ImplementingClassConstantFilter" />
			<role name="Component" element="proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="component" element="proguard.classfile.visitor.ImplementingClassConstantFilter::constantVisitor:proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="Operation()" element="proguard.classfile.visitor.ImplementingClassConstantFilter::visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.io.DataEntryReader" />
			<role name="Decorator" element="proguard.io.DataEntryObfuscator" />
			<role name="component" element="proguard.io.DataEntryObfuscator::dataEntryReader:proguard.io.DataEntryReader" />
			<role name="Operation()" element="proguard.io.DataEntryObfuscator::read(proguard.io.DataEntry):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.io.DataEntryReader" />
			<role name="Decorator" element="proguard.io.DataEntryRenamer" />
			<role name="component" element="proguard.io.DataEntryRenamer::renamedDataEntryReader:proguard.io.DataEntryReader" />
			<role name="component" element="proguard.io.DataEntryRenamer::missingDataEntryReader:proguard.io.DataEntryReader" />
			<role name="Operation()" element="proguard.io.DataEntryRenamer::read(proguard.io.DataEntry):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.io.DataEntryReader" />
			<role name="Decorator" element="proguard.io.FilteredDataEntryReader" />
			<role name="component" element="proguard.io.FilteredDataEntryReader::acceptedDataEntryReader:proguard.io.DataEntryReader" />
			<role name="component" element="proguard.io.FilteredDataEntryReader::rejectedDataEntryReader:proguard.io.DataEntryReader" />
			<role name="Operation()" element="proguard.io.FilteredDataEntryReader::read(proguard.io.DataEntry):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.io.DataEntryReader" />
			<role name="Decorator" element="proguard.io.JarReader" />
			<role name="component" element="proguard.io.JarReader::dataEntryReader:proguard.io.DataEntryReader" />
			<role name="Operation()" element="proguard.io.JarReader::read(proguard.io.DataEntry):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.gui.splash.BufferedSprite" />
			<role name="Component" element="proguard.gui.splash.Sprite" />
			<role name="component" element="proguard.gui.splash.BufferedSprite::sprite:proguard.gui.splash.Sprite" />
			<role name="Operation()" element="proguard.gui.splash.BufferedSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.gui.splash.ClipSprite" />
			<role name="Component" element="proguard.gui.splash.Sprite" />
			<role name="component" element="proguard.gui.splash.ClipSprite::sprite:proguard.gui.splash.Sprite" />
			<role name="component" element="proguard.gui.splash.ClipSprite::clipSprite:proguard.gui.splash.Sprite" />
			<role name="Operation()" element="proguard.gui.splash.ClipSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.gui.splash.ColorSprite" />
			<role name="Component" element="proguard.gui.splash.Sprite" />
			<role name="component" element="proguard.gui.splash.ColorSprite::sprite:proguard.gui.splash.Sprite" />
			<role name="Operation()" element="proguard.gui.splash.ColorSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.gui.splash.FontSprite" />
			<role name="Component" element="proguard.gui.splash.Sprite" />
			<role name="component" element="proguard.gui.splash.FontSprite::sprite:proguard.gui.splash.Sprite" />
			<role name="Operation()" element="proguard.gui.splash.FontSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.gui.splash.ShadowedSprite" />
			<role name="Component" element="proguard.gui.splash.Sprite" />
			<role name="component" element="proguard.gui.splash.ShadowedSprite::sprite:proguard.gui.splash.Sprite" />
			<role name="Operation()" element="proguard.gui.splash.ShadowedSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.gui.splash.TimeSwitchSprite" />
			<role name="Component" element="proguard.gui.splash.Sprite" />
			<role name="component" element="proguard.gui.splash.TimeSwitchSprite::sprite:proguard.gui.splash.Sprite" />
			<role name="Operation()" element="proguard.gui.splash.TimeSwitchSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.io.DataEntryWriter" />
			<role name="Decorator" element="proguard.io.CascadingDataEntryWriter" />
			<role name="component" element="proguard.io.CascadingDataEntryWriter::dataEntryWriter1:proguard.io.DataEntryWriter" />
			<role name="component" element="proguard.io.CascadingDataEntryWriter::dataEntryWriter2:proguard.io.DataEntryWriter" />
			<role name="Operation()" element="proguard.io.CascadingDataEntryWriter::createDirectory(proguard.io.DataEntry):boolean" />
			<role name="Operation()" element="proguard.io.CascadingDataEntryWriter::getOutputStream(proguard.io.DataEntry, proguard.io.Finisher):java.io.OutputStream" />
			<role name="Operation()" element="proguard.io.CascadingDataEntryWriter::close():void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.io.DataEntryWriter" />
			<role name="Decorator" element="proguard.io.FilteredDataEntryWriter" />
			<role name="component" element="proguard.io.FilteredDataEntryWriter::acceptedDataEntryWriter:proguard.io.DataEntryWriter" />
			<role name="component" element="proguard.io.FilteredDataEntryWriter::rejectedDataEntryWriter:proguard.io.DataEntryWriter" />
			<role name="Operation()" element="proguard.io.FilteredDataEntryWriter::createDirectory(proguard.io.DataEntry):boolean" />
			<role name="Operation()" element="proguard.io.FilteredDataEntryWriter::getOutputStream(proguard.io.DataEntry, proguard.io.Finisher):java.io.OutputStream" />
			<role name="Operation()" element="proguard.io.FilteredDataEntryWriter::close():void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.io.DataEntryWriter" />
			<role name="Decorator" element="proguard.io.JarWriter" />
			<role name="component" element="proguard.io.JarWriter::dataEntryWriter:proguard.io.DataEntryWriter" />
			<role name="Operation()" element="proguard.io.JarWriter::close():void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.io.DataEntryWriter" />
			<role name="Decorator" element="proguard.io.ParentDataEntryWriter" />
			<role name="component" element="proguard.io.ParentDataEntryWriter::dataEntryWriter:proguard.io.DataEntryWriter" />
			<role name="Operation()" element="proguard.io.ParentDataEntryWriter::getOutputStream(proguard.io.DataEntry, proguard.io.Finisher):java.io.OutputStream" />
			<role name="Operation()" element="proguard.io.ParentDataEntryWriter::close():void" />
		</instance>
		<instance>
			<role name="Component" element="proguard.io.DataEntryFilter" />
			<role name="Decorator" element="proguard.io.DataEntryParentFilter" />
			<role name="component" element="proguard.io.DataEntryParentFilter::dataEntryFilter:proguard.io.DataEntryFilter" />
			<role name="Operation()" element="proguard.io.DataEntryParentFilter::accepts(proguard.io.DataEntry):boolean" />
		</instance>
		<instance>
			<role name="Component" element="proguard.io.DataEntry" />
			<role name="Decorator" element="proguard.io.RenamedDataEntry" />
			<role name="component" element="proguard.io.RenamedDataEntry::dataEntry:proguard.io.DataEntry" />
			<role name="Operation()" element="proguard.io.RenamedDataEntry::isDirectory():boolean" />
			<role name="Operation()" element="proguard.io.RenamedDataEntry::getInputStream():java.io.InputStream" />
			<role name="Operation()" element="proguard.io.RenamedDataEntry::closeInputStream():void" />
			<role name="Operation()" element="proguard.io.RenamedDataEntry::getParent():proguard.io.DataEntry" />
		</instance>
		<instance>
			<role name="Component" element="proguard.obfuscate.NameFactory" />
			<role name="Decorator" element="proguard.obfuscate.DictionaryNameFactory" />
			<role name="component" element="proguard.obfuscate.DictionaryNameFactory::nameFactory:proguard.obfuscate.NameFactory" />
			<role name="Operation()" element="proguard.obfuscate.DictionaryNameFactory::reset():void" />
			<role name="Operation()" element="proguard.obfuscate.DictionaryNameFactory::nextName():java.lang.String" />
		</instance>
		<instance>
			<role name="Component" element="proguard.obfuscate.NameFactory" />
			<role name="Decorator" element="proguard.obfuscate.SpecialNameFactory" />
			<role name="component" element="proguard.obfuscate.SpecialNameFactory::nameFactory:proguard.obfuscate.NameFactory" />
			<role name="Operation()" element="proguard.obfuscate.SpecialNameFactory::reset():void" />
			<role name="Operation()" element="proguard.obfuscate.SpecialNameFactory::nextName():java.lang.String" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.util.AndMatcher" />
			<role name="Component" element="proguard.util.StringMatcher" />
			<role name="component" element="proguard.util.AndMatcher::matcher1:proguard.util.StringMatcher" />
			<role name="component" element="proguard.util.AndMatcher::matcher2:proguard.util.StringMatcher" />
			<role name="Operation()" element="proguard.util.AndMatcher::matches(java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.util.FixedStringMatcher" />
			<role name="Component" element="proguard.util.StringMatcher" />
			<role name="component" element="proguard.util.FixedStringMatcher::nextMatcher:proguard.util.StringMatcher" />
			<role name="Operation()" element="proguard.util.FixedStringMatcher::matches(java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.util.NotMatcher" />
			<role name="Component" element="proguard.util.StringMatcher" />
			<role name="component" element="proguard.util.NotMatcher::matcher:proguard.util.StringMatcher" />
			<role name="Operation()" element="proguard.util.NotMatcher::matches(java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.util.OrMatcher" />
			<role name="Component" element="proguard.util.StringMatcher" />
			<role name="component" element="proguard.util.OrMatcher::matcher1:proguard.util.StringMatcher" />
			<role name="component" element="proguard.util.OrMatcher::matcher2:proguard.util.StringMatcher" />
			<role name="Operation()" element="proguard.util.OrMatcher::matches(java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.util.SettableMatcher" />
			<role name="Component" element="proguard.util.StringMatcher" />
			<role name="component" element="proguard.util.SettableMatcher::matcher:proguard.util.StringMatcher" />
			<role name="Operation()" element="proguard.util.SettableMatcher::matches(java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="proguard.util.VariableStringMatcher" />
			<role name="Component" element="proguard.util.StringMatcher" />
			<role name="component" element="proguard.util.VariableStringMatcher::nextMatcher:proguard.util.StringMatcher" />
			<role name="Operation()" element="proguard.util.VariableStringMatcher::matches(java.lang.String):boolean" />
		</instance>
	</pattern>
	<pattern name="Observer">
		<instance>
			<role name="Observer" element="proguard.classfile.instruction.Instruction" />
			<role name="Subject" element="proguard.classfile.editor.CodeAttributeEditor" />
			<role name="Notify()" element="proguard.classfile.editor.CodeAttributeEditor::canPerformSimpleReplacements(proguard.classfile.attribute.CodeAttribute):boolean" />
		</instance>
		<instance>
			<role name="Observer" element="proguard.evaluation.value.Value" />
			<role name="Subject" element="proguard.evaluation.Stack" />
			<role name="Notify()" element="proguard.evaluation.Stack::generalize(proguard.evaluation.Stack):boolean" />
		</instance>
		<instance>
			<role name="Observer" element="proguard.evaluation.value.Value" />
			<role name="Subject" element="proguard.evaluation.Variables" />
			<role name="Notify()" element="proguard.evaluation.Variables::generalize(proguard.evaluation.Variables, boolean):boolean" />
			<role name="Notify()" element="proguard.evaluation.Variables::equals(java.lang.Object):boolean" />
		</instance>
	</pattern>
	<pattern name="State">
		<instance>
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="Context" element="proguard.classfile.util.DynamicMemberReferenceInitializer" />
			<role name="state" element="proguard.classfile.util.DynamicMemberReferenceInitializer::referencedClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.util.DynamicMemberReferenceInitializer::visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="Context" element="proguard.classfile.editor.MethodInvocationFixer" />
			<role name="state" element="proguard.classfile.editor.MethodInvocationFixer::referencedClass:proguard.classfile.Clazz" />
			<role name="state" element="proguard.classfile.editor.MethodInvocationFixer::referencedMethodClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.editor.MethodInvocationFixer::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
			<role name="Request()" element="proguard.classfile.editor.MethodInvocationFixer::visitAnyMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant):void" />
			<role name="Request()" element="proguard.classfile.editor.MethodInvocationFixer::debug(proguard.classfile.Clazz, proguard.classfile.Method, int, proguard.classfile.instruction.ConstantInstruction, proguard.classfile.instruction.Instruction):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="Context" element="proguard.classfile.editor.AccessFixer" />
			<role name="state" element="proguard.classfile.editor.AccessFixer::referencingClass:proguard.classfile.Clazz" />
			<role name="state" element="proguard.classfile.editor.AccessFixer::referencedClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.editor.AccessFixer::visitAnyRefConstant(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant):void" />
			<role name="Request()" element="proguard.classfile.editor.AccessFixer::visitProgramMember(proguard.classfile.ProgramClass, proguard.classfile.ProgramMember):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="Context" element="proguard.DescriptorKeepChecker" />
			<role name="state" element="proguard.DescriptorKeepChecker::referencingClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.DescriptorKeepChecker::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Request()" element="proguard.DescriptorKeepChecker::visitProgramClass(proguard.classfile.ProgramClass):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="Context" element="proguard.classfile.attribute.annotation.visitor.AnnotatedClassVisitor" />
			<role name="state" element="proguard.classfile.attribute.annotation.visitor.AnnotatedClassVisitor::lastVisitedClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.attribute.annotation.visitor.AnnotatedClassVisitor::visitAnnotation(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="Context" element="proguard.classfile.util.EnumFieldReferenceInitializer" />
			<role name="state" element="proguard.classfile.util.EnumFieldReferenceInitializer::referencedEnumClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.util.EnumFieldReferenceInitializer::visitEnumConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.EnumConstantElementValue):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="Context" element="proguard.classfile.util.MemberFinder" />
			<role name="state" element="proguard.classfile.util.MemberFinder::clazz:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.util.MemberFinder::findMember(proguard.classfile.Clazz, proguard.classfile.Clazz, java.lang.String, java.lang.String, boolean):proguard.classfile.Member" />
			<role name="Request()" element="proguard.classfile.util.MemberFinder::isOverriden(proguard.classfile.Clazz, proguard.classfile.Method):boolean" />
			<role name="Request()" element="proguard.classfile.util.MemberFinder::isShadowed(proguard.classfile.Clazz, proguard.classfile.Field):boolean" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="Context" element="proguard.classfile.visitor.ImplementedClassConstantFilter" />
			<role name="state" element="proguard.classfile.visitor.ImplementedClassConstantFilter::implementedClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.visitor.ImplementedClassConstantFilter::visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="Context" element="proguard.classfile.visitor.ImplementingClassConstantFilter" />
			<role name="state" element="proguard.classfile.visitor.ImplementingClassConstantFilter::implementingClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.visitor.ImplementingClassConstantFilter::visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="Context" element="proguard.optimize.info.PackageVisibleMemberInvokingClassMarker" />
			<role name="state" element="proguard.optimize.info.PackageVisibleMemberInvokingClassMarker::referencingClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.optimize.info.PackageVisibleMemberInvokingClassMarker::visitAnyClass(proguard.classfile.Clazz):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="Context" element="proguard.classfile.editor.SubclassToAdder" />
			<role name="state" element="proguard.classfile.editor.SubclassToAdder::targetClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.editor.SubclassToAdder::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Request()" element="proguard.classfile.editor.SubclassToAdder::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.classfile.visitor.MemberClassAccessFilter" />
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="state" element="proguard.classfile.visitor.MemberClassAccessFilter::referencingClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.visitor.MemberClassAccessFilter::accepted(proguard.classfile.Clazz, int):boolean" />
		</instance>
		<instance>
			<role name="Context" element="proguard.classfile.visitor.SimilarMemberVisitor" />
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="state" element="proguard.classfile.visitor.SimilarMemberVisitor::targetClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.visitor.SimilarMemberVisitor::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Request()" element="proguard.classfile.visitor.SimilarMemberVisitor::visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField):void" />
			<role name="Request()" element="proguard.classfile.visitor.SimilarMemberVisitor::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Request()" element="proguard.classfile.visitor.SimilarMemberVisitor::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="Context" element="proguard.classfile.visitor.MemberToClassVisitor" />
			<role name="state" element="proguard.classfile.visitor.MemberToClassVisitor::classVisitor:proguard.classfile.visitor.ClassVisitor" />
			<role name="Request()" element="proguard.classfile.visitor.MemberToClassVisitor::visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField):void" />
			<role name="Request()" element="proguard.classfile.visitor.MemberToClassVisitor::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
			<role name="Request()" element="proguard.classfile.visitor.MemberToClassVisitor::visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField):void" />
			<role name="Request()" element="proguard.classfile.visitor.MemberToClassVisitor::visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.DescriptorKeepChecker" />
			<role name="State" element="proguard.classfile.Member" />
			<role name="state" element="proguard.DescriptorKeepChecker::referencingMember:proguard.classfile.Member" />
			<role name="Request()" element="proguard.DescriptorKeepChecker::visitProgramClass(proguard.classfile.ProgramClass):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.classfile.editor.MethodInvocationFixer" />
			<role name="State" element="proguard.classfile.Member" />
			<role name="state" element="proguard.classfile.editor.MethodInvocationFixer::referencedMethod:proguard.classfile.Member" />
			<role name="Request()" element="proguard.classfile.editor.MethodInvocationFixer::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
			<role name="Request()" element="proguard.classfile.editor.MethodInvocationFixer::debug(proguard.classfile.Clazz, proguard.classfile.Method, int, proguard.classfile.instruction.ConstantInstruction, proguard.classfile.instruction.Instruction):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.classfile.attribute.annotation.visitor.AnnotationToMemberVisitor" />
			<role name="State" element="proguard.classfile.Member" />
			<role name="state" element="proguard.classfile.attribute.annotation.visitor.AnnotationToMemberVisitor::lastVisitedMember:proguard.classfile.Member" />
			<role name="Request()" element="proguard.classfile.attribute.annotation.visitor.AnnotationToMemberVisitor::visitAnnotation(proguard.classfile.Clazz, proguard.classfile.Member, proguard.classfile.attribute.annotation.Annotation):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.optimize.peephole.InstructionSequenceReplacer" />
			<role name="State" element="proguard.classfile.instruction.Instruction" />
			<role name="state" element="proguard.optimize.peephole.InstructionSequenceReplacer::replacementInstructions:proguard.classfile.instruction.Instruction[]" />
			<role name="Request()" element="proguard.optimize.peephole.InstructionSequenceReplacer::visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.classfile.editor.CodeAttributeEditor" />
			<role name="State" element="proguard.classfile.instruction.Instruction" />
			<role name="state" element="proguard.classfile.editor.CodeAttributeEditor::preInsertions:proguard.classfile.instruction.Instruction[]" />
			<role name="state" element="proguard.classfile.editor.CodeAttributeEditor::replacements:proguard.classfile.instruction.Instruction[]" />
			<role name="state" element="proguard.classfile.editor.CodeAttributeEditor::postInsertions:proguard.classfile.instruction.Instruction[]" />
			<role name="Request()" element="proguard.classfile.editor.CodeAttributeEditor::insertBeforeInstruction(int, proguard.classfile.instruction.Instruction):void" />
			<role name="Request()" element="proguard.classfile.editor.CodeAttributeEditor::replaceInstruction(int, proguard.classfile.instruction.Instruction):void" />
			<role name="Request()" element="proguard.classfile.editor.CodeAttributeEditor::insertAfterInstruction(int, proguard.classfile.instruction.Instruction):void" />
			<role name="Request()" element="proguard.classfile.editor.CodeAttributeEditor::canPerformSimpleReplacements(proguard.classfile.attribute.CodeAttribute):boolean" />
			<role name="Request()" element="proguard.classfile.editor.CodeAttributeEditor::mapInstruction(int, proguard.classfile.instruction.Instruction):void" />
			<role name="Request()" element="proguard.classfile.editor.CodeAttributeEditor::moveInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory" />
			<role name="State" element="proguard.classfile.instruction.Instruction" />
			<role name="state" element="proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory::replacementInstruction:proguard.classfile.instruction.Instruction" />
			<role name="Request()" element="proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory::create(proguard.classfile.Clazz, int):proguard.classfile.instruction.Instruction" />
		</instance>
		<instance>
			<role name="Context" element="proguard.classfile.util.InstructionSequenceMatcher" />
			<role name="State" element="proguard.classfile.instruction.Instruction" />
			<role name="state" element="proguard.classfile.util.InstructionSequenceMatcher::patternInstructions:proguard.classfile.instruction.Instruction[]" />
			<role name="Request()" element="proguard.classfile.util.InstructionSequenceMatcher::checkMatch(boolean, proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="Context" element="proguard.shrink.ShortestUsageMark" />
			<role name="state" element="proguard.shrink.ShortestUsageMark::clazz:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.shrink.ShortestUsageMark::acceptClassVisitor(proguard.classfile.visitor.ClassVisitor):void" />
			<role name="Request()" element="proguard.shrink.ShortestUsageMark::toString():java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.constant.Constant" />
			<role name="Context" element="proguard.optimize.peephole.InstructionSequenceConstants" />
			<role name="state" element="proguard.optimize.peephole.InstructionSequenceConstants::CONSTANTS:proguard.classfile.constant.Constant[]" />
			<role name="Request()" element="proguard.optimize.peephole.InstructionSequenceConstants::main(java.lang.String[]):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.evaluation.value.Value" />
			<role name="Context" element="proguard.optimize.info.FieldOptimizationInfo" />
			<role name="state" element="proguard.optimize.info.FieldOptimizationInfo::value:proguard.evaluation.value.Value" />
			<role name="Request()" element="proguard.optimize.info.FieldOptimizationInfo::generalizeValue(proguard.evaluation.value.Value):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.evaluation.InvocationUnit" />
			<role name="Context" element="proguard.optimize.evaluation.PartialEvaluator" />
			<role name="state" element="proguard.optimize.evaluation.PartialEvaluator::invocationUnit:proguard.evaluation.InvocationUnit" />
			<role name="Request()" element="proguard.optimize.evaluation.PartialEvaluator::initializeParameters(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.evaluation.TracedVariables):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="Context" element="proguard.classfile.LibraryMethod" />
			<role name="state" element="proguard.classfile.LibraryMethod::referencedClasses:proguard.classfile.Clazz[]" />
			<role name="Request()" element="proguard.classfile.LibraryMethod::referencedClassesAccept(proguard.classfile.visitor.ClassVisitor):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="Context" element="proguard.classfile.ProgramMethod" />
			<role name="state" element="proguard.classfile.ProgramMethod::referencedClasses:proguard.classfile.Clazz[]" />
			<role name="Request()" element="proguard.classfile.ProgramMethod::referencedClassesAccept(proguard.classfile.visitor.ClassVisitor):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.SplashPanel" />
			<role name="State" element="proguard.gui.splash.Sprite" />
			<role name="state" element="proguard.gui.splash.SplashPanel::sprite:proguard.gui.splash.Sprite" />
			<role name="Request()" element="proguard.gui.splash.SplashPanel::paintComponent(java.awt.Graphics):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="Context" element="proguard.classfile.LibraryField" />
			<role name="state" element="proguard.classfile.LibraryField::referencedClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.LibraryField::referencedClassesAccept(proguard.classfile.visitor.ClassVisitor):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="Context" element="proguard.classfile.ProgramField" />
			<role name="state" element="proguard.classfile.ProgramField::referencedClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.classfile.ProgramField::referencedClassesAccept(proguard.classfile.visitor.ClassVisitor):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.evaluation.value.Value" />
			<role name="Context" element="proguard.evaluation.Stack" />
			<role name="state" element="proguard.evaluation.Stack::values:proguard.evaluation.value.Value[]" />
			<role name="Request()" element="proguard.evaluation.Stack::generalize(proguard.evaluation.Stack):boolean" />
			<role name="Request()" element="proguard.evaluation.Stack::push(proguard.evaluation.value.Value):void" />
			<role name="Request()" element="proguard.evaluation.Stack::pop():proguard.evaluation.value.Value" />
		</instance>
		<instance>
			<role name="State" element="proguard.evaluation.value.Value" />
			<role name="Context" element="proguard.evaluation.TracedVariables" />
			<role name="state" element="proguard.evaluation.TracedVariables::producerValue:proguard.evaluation.value.Value" />
			<role name="Request()" element="proguard.evaluation.TracedVariables::store(int, proguard.evaluation.value.Value):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.evaluation.value.Value" />
			<role name="Context" element="proguard.evaluation.Variables" />
			<role name="state" element="proguard.evaluation.Variables::values:proguard.evaluation.value.Value[]" />
			<role name="Request()" element="proguard.evaluation.Variables::generalize(proguard.evaluation.Variables, boolean):boolean" />
			<role name="Request()" element="proguard.evaluation.Variables::store(int, proguard.evaluation.value.Value):void" />
			<role name="Request()" element="proguard.evaluation.Variables::equals(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.BufferedSprite" />
			<role name="State" element="proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.BufferedSprite::x:proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.BufferedSprite::y:proguard.gui.splash.VariableInt" />
			<role name="Request()" element="proguard.gui.splash.BufferedSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.ShadowedSprite" />
			<role name="State" element="proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.ShadowedSprite::blur:proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.ShadowedSprite::xOffset:proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.ShadowedSprite::yOffset:proguard.gui.splash.VariableInt" />
			<role name="Request()" element="proguard.gui.splash.ShadowedSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.CircleSprite" />
			<role name="State" element="proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.CircleSprite::x:proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.CircleSprite::y:proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.CircleSprite::radius:proguard.gui.splash.VariableInt" />
			<role name="Request()" element="proguard.gui.splash.CircleSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.ImageSprite" />
			<role name="State" element="proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.ImageSprite::x:proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.ImageSprite::y:proguard.gui.splash.VariableInt" />
			<role name="Request()" element="proguard.gui.splash.ImageSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.RectangleSprite" />
			<role name="State" element="proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.RectangleSprite::x:proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.RectangleSprite::y:proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.RectangleSprite::width:proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.RectangleSprite::height:proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.RectangleSprite::arcWidth:proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.RectangleSprite::arcHeight:proguard.gui.splash.VariableInt" />
			<role name="Request()" element="proguard.gui.splash.RectangleSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.TextSprite" />
			<role name="State" element="proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.TextSprite::x:proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.TextSprite::y:proguard.gui.splash.VariableInt" />
			<role name="state" element="proguard.gui.splash.TextSprite::spacing:proguard.gui.splash.VariableInt" />
			<role name="Request()" element="proguard.gui.splash.TextSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.evaluation.value.Value" />
			<role name="Context" element="proguard.optimize.info.MethodOptimizationInfo" />
			<role name="state" element="proguard.optimize.info.MethodOptimizationInfo::parameters:proguard.evaluation.value.Value[]" />
			<role name="state" element="proguard.optimize.info.MethodOptimizationInfo::returnValue:proguard.evaluation.value.Value" />
			<role name="Request()" element="proguard.optimize.info.MethodOptimizationInfo::generalizeParameter(int, proguard.evaluation.value.Value):void" />
			<role name="Request()" element="proguard.optimize.info.MethodOptimizationInfo::generalizeReturnValue(proguard.evaluation.value.Value):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.io.ClassRewriter" />
			<role name="State" element="proguard.io.DataEntryWriter" />
			<role name="state" element="proguard.io.ClassRewriter::dataEntryWriter:proguard.io.DataEntryWriter" />
			<role name="Request()" element="proguard.io.ClassRewriter::read(proguard.io.DataEntry):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.io.DataEntryCopier" />
			<role name="State" element="proguard.io.DataEntryWriter" />
			<role name="state" element="proguard.io.DataEntryCopier::dataEntryWriter:proguard.io.DataEntryWriter" />
			<role name="Request()" element="proguard.io.DataEntryCopier::read(proguard.io.DataEntry):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.classfile.util.WarningPrinter" />
			<role name="State" element="proguard.util.StringMatcher" />
			<role name="state" element="proguard.classfile.util.WarningPrinter::classFilter:proguard.util.StringMatcher" />
			<role name="Request()" element="proguard.classfile.util.WarningPrinter::accepts(java.lang.String):boolean" />
			<role name="Request()" element="proguard.classfile.util.WarningPrinter::accepts(java.lang.String, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Context" element="proguard.shrink.ShortestUsageMark" />
			<role name="State" element="proguard.classfile.Member" />
			<role name="state" element="proguard.shrink.ShortestUsageMark::member:proguard.classfile.Member" />
			<role name="Request()" element="proguard.shrink.ShortestUsageMark::acceptMemberVisitor(proguard.classfile.visitor.MemberVisitor):void" />
			<role name="Request()" element="proguard.shrink.ShortestUsageMark::toString():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="proguard.classfile.util.DynamicClassReferenceInitializer" />
			<role name="State" element="proguard.util.StringMatcher" />
			<role name="state" element="proguard.classfile.util.DynamicClassReferenceInitializer::noteExceptionMatcher:proguard.util.StringMatcher" />
			<role name="Request()" element="proguard.classfile.util.DynamicClassReferenceInitializer::visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.classfile.util.DynamicMemberReferenceInitializer" />
			<role name="State" element="proguard.util.StringMatcher" />
			<role name="state" element="proguard.classfile.util.DynamicMemberReferenceInitializer::noteFieldExceptionMatcher:proguard.util.StringMatcher" />
			<role name="state" element="proguard.classfile.util.DynamicMemberReferenceInitializer::noteMethodExceptionMatcher:proguard.util.StringMatcher" />
			<role name="Request()" element="proguard.classfile.util.DynamicMemberReferenceInitializer::printDynamicInvocationNote(proguard.classfile.Clazz, proguard.classfile.util.InstructionSequenceMatcher, boolean, boolean, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.obfuscate.ClassObfuscator" />
			<role name="State" element="proguard.util.StringMatcher" />
			<role name="state" element="proguard.obfuscate.ClassObfuscator::keepPackageNamesMatcher:proguard.util.StringMatcher" />
			<role name="Request()" element="proguard.obfuscate.ClassObfuscator::newPackagePrefix(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="proguard.obfuscate.MemberObfuscator" />
			<role name="State" element="proguard.obfuscate.NameFactory" />
			<role name="state" element="proguard.obfuscate.MemberObfuscator::nameFactory:proguard.obfuscate.NameFactory" />
			<role name="Request()" element="proguard.obfuscate.MemberObfuscator::visitAnyMember(proguard.classfile.Clazz, proguard.classfile.Member):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.io.FilteredDataEntryReader" />
			<role name="State" element="proguard.io.DataEntryFilter" />
			<role name="state" element="proguard.io.FilteredDataEntryReader::dataEntryFilter:proguard.io.DataEntryFilter" />
			<role name="Request()" element="proguard.io.FilteredDataEntryReader::read(proguard.io.DataEntry):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.obfuscate.NameFactoryResetter" />
			<role name="State" element="proguard.obfuscate.NameFactory" />
			<role name="state" element="proguard.obfuscate.NameFactoryResetter::nameFactory:proguard.obfuscate.NameFactory" />
			<role name="Request()" element="proguard.obfuscate.NameFactoryResetter::visitProgramClass(proguard.classfile.ProgramClass):void" />
			<role name="Request()" element="proguard.obfuscate.NameFactoryResetter::visitLibraryClass(proguard.classfile.LibraryClass):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.classfile.visitor.ClassNameFilter" />
			<role name="State" element="proguard.util.StringMatcher" />
			<role name="state" element="proguard.classfile.visitor.ClassNameFilter::regularExpressionMatcher:proguard.util.StringMatcher" />
			<role name="Request()" element="proguard.classfile.visitor.ClassNameFilter::accepted(java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Context" element="proguard.evaluation.Processor" />
			<role name="State" element="proguard.evaluation.BranchUnit" />
			<role name="state" element="proguard.evaluation.Processor::branchUnit:proguard.evaluation.BranchUnit" />
			<role name="Request()" element="proguard.evaluation.Processor::visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitTableSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.TableSwitchInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitLookUpSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.LookUpSwitchInstruction):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="Context" element="proguard.evaluation.value.ReferenceValue" />
			<role name="state" element="proguard.evaluation.value.ReferenceValue::referencedClass:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.evaluation.value.ReferenceValue::instanceOf(java.lang.String, proguard.classfile.Clazz):int" />
			<role name="Request()" element="proguard.evaluation.value.ReferenceValue::generalize(proguard.evaluation.value.ReferenceValue):proguard.evaluation.value.ReferenceValue" />
		</instance>
		<instance>
			<role name="Context" element="proguard.io.JarWriter" />
			<role name="State" element="proguard.io.DataEntry" />
			<role name="state" element="proguard.io.JarWriter::currentDataEntry:proguard.io.DataEntry" />
			<role name="Request()" element="proguard.io.JarWriter::createDirectory(proguard.io.DataEntry):boolean" />
			<role name="Request()" element="proguard.io.JarWriter::getOutputStream(proguard.io.DataEntry, proguard.io.Finisher):java.io.OutputStream" />
		</instance>
		<instance>
			<role name="State" element="proguard.io.Finisher" />
			<role name="Context" element="proguard.io.DirectoryWriter" />
			<role name="state" element="proguard.io.DirectoryWriter::currentFinisher:proguard.io.Finisher" />
			<role name="Request()" element="proguard.io.DirectoryWriter::closeEntry():void" />
		</instance>
		<instance>
			<role name="State" element="proguard.util.StringMatcher" />
			<role name="Context" element="proguard.classfile.attribute.visitor.AttributeNameFilter" />
			<role name="state" element="proguard.classfile.attribute.visitor.AttributeNameFilter::regularExpressionMatcher:proguard.util.StringMatcher" />
			<role name="Request()" element="proguard.classfile.attribute.visitor.AttributeNameFilter::accepted(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute):boolean" />
		</instance>
		<instance>
			<role name="Context" element="proguard.classfile.visitor.MemberDescriptorFilter" />
			<role name="State" element="proguard.util.StringMatcher" />
			<role name="state" element="proguard.classfile.visitor.MemberDescriptorFilter::regularExpressionMatcher:proguard.util.StringMatcher" />
			<role name="Request()" element="proguard.classfile.visitor.MemberDescriptorFilter::accepted(java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Context" element="proguard.classfile.visitor.MemberNameFilter" />
			<role name="State" element="proguard.util.StringMatcher" />
			<role name="state" element="proguard.classfile.visitor.MemberNameFilter::regularExpressionMatcher:proguard.util.StringMatcher" />
			<role name="Request()" element="proguard.classfile.visitor.MemberNameFilter::accepted(java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.ClipSprite" />
			<role name="State" element="proguard.gui.splash.VariableColor" />
			<role name="state" element="proguard.gui.splash.ClipSprite::outsideClipColor:proguard.gui.splash.VariableColor" />
			<role name="state" element="proguard.gui.splash.ClipSprite::insideClipColor:proguard.gui.splash.VariableColor" />
			<role name="Request()" element="proguard.gui.splash.ClipSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.ColorSprite" />
			<role name="State" element="proguard.gui.splash.VariableColor" />
			<role name="state" element="proguard.gui.splash.ColorSprite::color:proguard.gui.splash.VariableColor" />
			<role name="Request()" element="proguard.gui.splash.ColorSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.RectangleSprite" />
			<role name="State" element="proguard.gui.splash.VariableColor" />
			<role name="state" element="proguard.gui.splash.RectangleSprite::color:proguard.gui.splash.VariableColor" />
			<role name="Request()" element="proguard.gui.splash.RectangleSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="State" element="proguard.classfile.Clazz" />
			<role name="Context" element="proguard.obfuscate.MappingKeeper" />
			<role name="state" element="proguard.obfuscate.MappingKeeper::clazz:proguard.classfile.Clazz" />
			<role name="Request()" element="proguard.obfuscate.MappingKeeper::processFieldMapping(java.lang.String, java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Request()" element="proguard.obfuscate.MappingKeeper::processMethodMapping(java.lang.String, int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.evaluation.Processor" />
			<role name="State" element="proguard.evaluation.InvocationUnit" />
			<role name="state" element="proguard.evaluation.Processor::invocationUnit:proguard.evaluation.InvocationUnit" />
			<role name="Request()" element="proguard.evaluation.Processor::visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction):void" />
			<role name="Request()" element="proguard.evaluation.Processor::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.ShadowedSprite" />
			<role name="State" element="proguard.gui.splash.VariableDouble" />
			<role name="state" element="proguard.gui.splash.ShadowedSprite::alpha:proguard.gui.splash.VariableDouble" />
			<role name="Request()" element="proguard.gui.splash.ShadowedSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.ImageSprite" />
			<role name="State" element="proguard.gui.splash.VariableDouble" />
			<role name="state" element="proguard.gui.splash.ImageSprite::scaleX:proguard.gui.splash.VariableDouble" />
			<role name="state" element="proguard.gui.splash.ImageSprite::scaleY:proguard.gui.splash.VariableDouble" />
			<role name="Request()" element="proguard.gui.splash.ImageSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.classfile.attribute.annotation.visitor.AnnotationTypeFilter" />
			<role name="State" element="proguard.util.StringMatcher" />
			<role name="state" element="proguard.classfile.attribute.annotation.visitor.AnnotationTypeFilter::regularExpressionMatcher:proguard.util.StringMatcher" />
			<role name="Request()" element="proguard.classfile.attribute.annotation.visitor.AnnotationTypeFilter::accepted(java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Context" element="proguard.io.DataEntryClassWriter" />
			<role name="State" element="proguard.io.DataEntryWriter" />
			<role name="state" element="proguard.io.DataEntryClassWriter::dataEntryWriter:proguard.io.DataEntryWriter" />
			<role name="Request()" element="proguard.io.DataEntryClassWriter::visitProgramClass(proguard.classfile.ProgramClass):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.FontSprite" />
			<role name="State" element="proguard.gui.splash.VariableFont" />
			<role name="state" element="proguard.gui.splash.FontSprite::font:proguard.gui.splash.VariableFont" />
			<role name="Request()" element="proguard.gui.splash.FontSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.TextSprite" />
			<role name="State" element="proguard.gui.splash.VariableString" />
			<role name="state" element="proguard.gui.splash.TextSprite::text:proguard.gui.splash.VariableString[]" />
			<role name="Request()" element="proguard.gui.splash.TextSprite::paint(java.awt.Graphics, long):void" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.LinearColor" />
			<role name="State" element="proguard.gui.splash.Timing" />
			<role name="state" element="proguard.gui.splash.LinearColor::timing:proguard.gui.splash.Timing" />
			<role name="Request()" element="proguard.gui.splash.LinearColor::getColor(long):java.awt.Color" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.LinearDouble" />
			<role name="State" element="proguard.gui.splash.Timing" />
			<role name="state" element="proguard.gui.splash.LinearDouble::timing:proguard.gui.splash.Timing" />
			<role name="Request()" element="proguard.gui.splash.LinearDouble::getDouble(long):double" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.VariableSizeFont" />
			<role name="State" element="proguard.gui.splash.VariableDouble" />
			<role name="state" element="proguard.gui.splash.VariableSizeFont::size:proguard.gui.splash.VariableDouble" />
			<role name="Request()" element="proguard.gui.splash.VariableSizeFont::getFont(long):java.awt.Font" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.LinearInt" />
			<role name="State" element="proguard.gui.splash.Timing" />
			<role name="state" element="proguard.gui.splash.LinearInt::timing:proguard.gui.splash.Timing" />
			<role name="Request()" element="proguard.gui.splash.LinearInt::getInt(long):int" />
		</instance>
		<instance>
			<role name="Context" element="proguard.gui.splash.TypeWriterString" />
			<role name="State" element="proguard.gui.splash.Timing" />
			<role name="state" element="proguard.gui.splash.TypeWriterString::timing:proguard.gui.splash.Timing" />
			<role name="Request()" element="proguard.gui.splash.TypeWriterString::getString(long):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="proguard.io.DataEntryNameFilter" />
			<role name="State" element="proguard.util.StringMatcher" />
			<role name="state" element="proguard.io.DataEntryNameFilter::stringMatcher:proguard.util.StringMatcher" />
			<role name="Request()" element="proguard.io.DataEntryNameFilter::accepts(proguard.io.DataEntry):boolean" />
		</instance>
		<instance>
			<role name="Context" element="proguard.io.FilteredDataEntryWriter" />
			<role name="State" element="proguard.io.DataEntryFilter" />
			<role name="state" element="proguard.io.FilteredDataEntryWriter::dataEntryFilter:proguard.io.DataEntryFilter" />
			<role name="Request()" element="proguard.io.FilteredDataEntryWriter::createDirectory(proguard.io.DataEntry):boolean" />
			<role name="Request()" element="proguard.io.FilteredDataEntryWriter::getOutputStream(proguard.io.DataEntry, proguard.io.Finisher):java.io.OutputStream" />
		</instance>
	</pattern>
	<pattern name="Strategy" />
	<pattern name="Bridge">
		<instance>
			<role name="Abstraction" element="proguard.classfile.constant.RefConstant" />
			<role name="Implementor" element="proguard.classfile.Member" />
			<role name="implementor" element="proguard.classfile.constant.RefConstant::referencedMember:proguard.classfile.Member" />
			<role name="Operation()" element="proguard.classfile.constant.RefConstant::referencedMemberAccept(proguard.classfile.visitor.MemberVisitor):void" />
		</instance>
	</pattern>
	<pattern name="Template Method">
		<instance>
			<role name="AbstractClass" element="proguard.classfile.instruction.Instruction" />
			<role name="TemplateMethod()" element="proguard.classfile.instruction.Instruction::write(byte[], int):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="proguard.classfile.LibraryMember" />
			<role name="TemplateMethod()" element="proguard.classfile.LibraryMember::accept(proguard.classfile.Clazz, proguard.classfile.visitor.MemberVisitor):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="proguard.classfile.ProgramMember" />
			<role name="TemplateMethod()" element="proguard.classfile.ProgramMember::accept(proguard.classfile.Clazz, proguard.classfile.visitor.MemberVisitor):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="proguard.evaluation.value.DoubleValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.DoubleValue::compareReverse(proguard.evaluation.value.DoubleValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.DoubleValue::generalize(proguard.evaluation.value.SpecificDoubleValue):proguard.evaluation.value.DoubleValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.DoubleValue::add(proguard.evaluation.value.SpecificDoubleValue):proguard.evaluation.value.DoubleValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.DoubleValue::subtract(proguard.evaluation.value.SpecificDoubleValue):proguard.evaluation.value.DoubleValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.DoubleValue::subtractFrom(proguard.evaluation.value.SpecificDoubleValue):proguard.evaluation.value.DoubleValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.DoubleValue::multiply(proguard.evaluation.value.SpecificDoubleValue):proguard.evaluation.value.DoubleValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.DoubleValue::divide(proguard.evaluation.value.SpecificDoubleValue):proguard.evaluation.value.DoubleValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.DoubleValue::divideOf(proguard.evaluation.value.SpecificDoubleValue):proguard.evaluation.value.DoubleValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.DoubleValue::remainder(proguard.evaluation.value.SpecificDoubleValue):proguard.evaluation.value.DoubleValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.DoubleValue::remainderOf(proguard.evaluation.value.SpecificDoubleValue):proguard.evaluation.value.DoubleValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.DoubleValue::compare(proguard.evaluation.value.SpecificDoubleValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.DoubleValue::generalize(proguard.evaluation.value.Value):proguard.evaluation.value.Value" />
		</instance>
		<instance>
			<role name="AbstractClass" element="proguard.evaluation.value.FloatValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.FloatValue::compareReverse(proguard.evaluation.value.FloatValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.FloatValue::generalize(proguard.evaluation.value.SpecificFloatValue):proguard.evaluation.value.FloatValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.FloatValue::add(proguard.evaluation.value.SpecificFloatValue):proguard.evaluation.value.FloatValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.FloatValue::subtract(proguard.evaluation.value.SpecificFloatValue):proguard.evaluation.value.FloatValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.FloatValue::subtractFrom(proguard.evaluation.value.SpecificFloatValue):proguard.evaluation.value.FloatValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.FloatValue::multiply(proguard.evaluation.value.SpecificFloatValue):proguard.evaluation.value.FloatValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.FloatValue::divide(proguard.evaluation.value.SpecificFloatValue):proguard.evaluation.value.FloatValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.FloatValue::divideOf(proguard.evaluation.value.SpecificFloatValue):proguard.evaluation.value.FloatValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.FloatValue::remainder(proguard.evaluation.value.SpecificFloatValue):proguard.evaluation.value.FloatValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.FloatValue::remainderOf(proguard.evaluation.value.SpecificFloatValue):proguard.evaluation.value.FloatValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.FloatValue::compare(proguard.evaluation.value.SpecificFloatValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.FloatValue::generalize(proguard.evaluation.value.Value):proguard.evaluation.value.Value" />
		</instance>
		<instance>
			<role name="AbstractClass" element="proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::notEqual(proguard.evaluation.value.IntegerValue):int" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::greaterThan(proguard.evaluation.value.IntegerValue):int" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::greaterThanOrEqual(proguard.evaluation.value.IntegerValue):int" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::generalize(proguard.evaluation.value.UnknownIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::add(proguard.evaluation.value.UnknownIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::subtract(proguard.evaluation.value.UnknownIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::subtractFrom(proguard.evaluation.value.UnknownIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::multiply(proguard.evaluation.value.UnknownIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::divide(proguard.evaluation.value.UnknownIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::divideOf(proguard.evaluation.value.UnknownIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::remainder(proguard.evaluation.value.UnknownIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::remainderOf(proguard.evaluation.value.UnknownIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::shiftLeft(proguard.evaluation.value.UnknownIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::shiftRight(proguard.evaluation.value.UnknownIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::unsignedShiftRight(proguard.evaluation.value.UnknownIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::shiftLeftOf(proguard.evaluation.value.UnknownIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::shiftRightOf(proguard.evaluation.value.UnknownIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::unsignedShiftRightOf(proguard.evaluation.value.UnknownIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::shiftLeftOf(proguard.evaluation.value.UnknownLongValue):proguard.evaluation.value.LongValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::shiftRightOf(proguard.evaluation.value.UnknownLongValue):proguard.evaluation.value.LongValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::unsignedShiftRightOf(proguard.evaluation.value.UnknownLongValue):proguard.evaluation.value.LongValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::and(proguard.evaluation.value.UnknownIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::or(proguard.evaluation.value.UnknownIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::xor(proguard.evaluation.value.UnknownIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::equal(proguard.evaluation.value.UnknownIntegerValue):int" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::lessThan(proguard.evaluation.value.UnknownIntegerValue):int" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::lessThanOrEqual(proguard.evaluation.value.UnknownIntegerValue):int" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::generalize(proguard.evaluation.value.SpecificIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::add(proguard.evaluation.value.SpecificIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::subtract(proguard.evaluation.value.SpecificIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::subtractFrom(proguard.evaluation.value.SpecificIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::multiply(proguard.evaluation.value.SpecificIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::divide(proguard.evaluation.value.SpecificIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::divideOf(proguard.evaluation.value.SpecificIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::remainder(proguard.evaluation.value.SpecificIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::remainderOf(proguard.evaluation.value.SpecificIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::shiftLeft(proguard.evaluation.value.SpecificIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::shiftRight(proguard.evaluation.value.SpecificIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::unsignedShiftRight(proguard.evaluation.value.SpecificIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::shiftLeftOf(proguard.evaluation.value.SpecificIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::shiftRightOf(proguard.evaluation.value.SpecificIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::unsignedShiftRightOf(proguard.evaluation.value.SpecificIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::shiftLeftOf(proguard.evaluation.value.SpecificLongValue):proguard.evaluation.value.LongValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::shiftRightOf(proguard.evaluation.value.SpecificLongValue):proguard.evaluation.value.LongValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::unsignedShiftRightOf(proguard.evaluation.value.SpecificLongValue):proguard.evaluation.value.LongValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::and(proguard.evaluation.value.SpecificIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::or(proguard.evaluation.value.SpecificIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::xor(proguard.evaluation.value.SpecificIntegerValue):proguard.evaluation.value.IntegerValue" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::equal(proguard.evaluation.value.SpecificIntegerValue):int" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::lessThan(proguard.evaluation.value.SpecificIntegerValue):int" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::lessThanOrEqual(proguard.evaluation.value.SpecificIntegerValue):int" />
			<role name="TemplateMethod()" element="proguard.evaluation.value.IntegerValue::generalize(proguard.evaluation.value.Value):proguard.evaluation.value.Value" />
		</instance>
		<instance>
			<role name="AbstractClass" element="proguard.WordReader" />
			<role name="TemplateMethod()" element="proguard.WordReader::nextWord(boolean):java.lang.String" />
			<role name="TemplateMethod()" element="proguard.WordReader::locationDescription():java.lang.String" />
		</instance>
	</pattern>
	<pattern name="Visitor">
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.BootstrapMethodsAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.BootstrapMethodsAttribute::accept(proguard.classfile.Clazz, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.CodeAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.CodeAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.ConstantValueAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.ConstantValueAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.DeprecatedAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.DeprecatedAttribute::accept(proguard.classfile.Clazz, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.DeprecatedAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.DeprecatedAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.EnclosingMethodAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.EnclosingMethodAttribute::accept(proguard.classfile.Clazz, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.ExceptionsAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.ExceptionsAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.InnerClassesAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.InnerClassesAttribute::accept(proguard.classfile.Clazz, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.LineNumberTableAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.LineNumberTableAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.LocalVariableTableAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.LocalVariableTableAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.LocalVariableTypeTableAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.LocalVariableTypeTableAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.SignatureAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.SignatureAttribute::accept(proguard.classfile.Clazz, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.SignatureAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.SignatureAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.SourceDirAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.SourceDirAttribute::accept(proguard.classfile.Clazz, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.SourceFileAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.SourceFileAttribute::accept(proguard.classfile.Clazz, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.SyntheticAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.SyntheticAttribute::accept(proguard.classfile.Clazz, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.SyntheticAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.SyntheticAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.UnknownAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.UnknownAttribute::accept(proguard.classfile.Clazz, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.UnknownAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.UnknownAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.UnknownAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.annotation.AnnotationDefaultAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.annotation.AnnotationDefaultAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute::accept(proguard.classfile.Clazz, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.annotation.RuntimeInvisibleParameterAnnotationsAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.annotation.RuntimeInvisibleParameterAnnotationsAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute::accept(proguard.classfile.Clazz, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.annotation.RuntimeVisibleParameterAnnotationsAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.annotation.RuntimeVisibleParameterAnnotationsAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.preverification.StackMapAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.StackMapAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.preverification.StackMapTableAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.StackMapTableAttribute::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.visitor.AttributeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.constant.ClassConstant" />
			<role name="Visitor" element="proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="Accept()" element="proguard.classfile.constant.ClassConstant::accept(proguard.classfile.Clazz, proguard.classfile.constant.visitor.ConstantVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.constant.DoubleConstant" />
			<role name="Visitor" element="proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="Accept()" element="proguard.classfile.constant.DoubleConstant::accept(proguard.classfile.Clazz, proguard.classfile.constant.visitor.ConstantVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.constant.FieldrefConstant" />
			<role name="Visitor" element="proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="Accept()" element="proguard.classfile.constant.FieldrefConstant::accept(proguard.classfile.Clazz, proguard.classfile.constant.visitor.ConstantVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.constant.FloatConstant" />
			<role name="Visitor" element="proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="Accept()" element="proguard.classfile.constant.FloatConstant::accept(proguard.classfile.Clazz, proguard.classfile.constant.visitor.ConstantVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.constant.IntegerConstant" />
			<role name="Visitor" element="proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="Accept()" element="proguard.classfile.constant.IntegerConstant::accept(proguard.classfile.Clazz, proguard.classfile.constant.visitor.ConstantVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.constant.InterfaceMethodrefConstant" />
			<role name="Visitor" element="proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="Accept()" element="proguard.classfile.constant.InterfaceMethodrefConstant::accept(proguard.classfile.Clazz, proguard.classfile.constant.visitor.ConstantVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.constant.InvokeDynamicConstant" />
			<role name="Visitor" element="proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="Accept()" element="proguard.classfile.constant.InvokeDynamicConstant::accept(proguard.classfile.Clazz, proguard.classfile.constant.visitor.ConstantVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.constant.LongConstant" />
			<role name="Visitor" element="proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="Accept()" element="proguard.classfile.constant.LongConstant::accept(proguard.classfile.Clazz, proguard.classfile.constant.visitor.ConstantVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.constant.MethodHandleConstant" />
			<role name="Visitor" element="proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="Accept()" element="proguard.classfile.constant.MethodHandleConstant::accept(proguard.classfile.Clazz, proguard.classfile.constant.visitor.ConstantVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.constant.MethodTypeConstant" />
			<role name="Visitor" element="proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="Accept()" element="proguard.classfile.constant.MethodTypeConstant::accept(proguard.classfile.Clazz, proguard.classfile.constant.visitor.ConstantVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.constant.MethodrefConstant" />
			<role name="Visitor" element="proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="Accept()" element="proguard.classfile.constant.MethodrefConstant::accept(proguard.classfile.Clazz, proguard.classfile.constant.visitor.ConstantVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.constant.NameAndTypeConstant" />
			<role name="Visitor" element="proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="Accept()" element="proguard.classfile.constant.NameAndTypeConstant::accept(proguard.classfile.Clazz, proguard.classfile.constant.visitor.ConstantVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.constant.StringConstant" />
			<role name="Visitor" element="proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="Accept()" element="proguard.classfile.constant.StringConstant::accept(proguard.classfile.Clazz, proguard.classfile.constant.visitor.ConstantVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.constant.Utf8Constant" />
			<role name="Visitor" element="proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="Accept()" element="proguard.classfile.constant.Utf8Constant::accept(proguard.classfile.Clazz, proguard.classfile.constant.visitor.ConstantVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.LibraryClass" />
			<role name="Visitor" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="Accept()" element="proguard.classfile.LibraryClass::accept(proguard.classfile.visitor.ClassVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.ProgramClass" />
			<role name="Visitor" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="Accept()" element="proguard.classfile.ProgramClass::accept(proguard.classfile.visitor.ClassVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.annotation.AnnotationElementValue" />
			<role name="Visitor" element="proguard.classfile.attribute.annotation.visitor.ElementValueVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.annotation.AnnotationElementValue::accept(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.visitor.ElementValueVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.annotation.ArrayElementValue" />
			<role name="Visitor" element="proguard.classfile.attribute.annotation.visitor.ElementValueVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.annotation.ArrayElementValue::accept(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.visitor.ElementValueVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.annotation.ClassElementValue" />
			<role name="Visitor" element="proguard.classfile.attribute.annotation.visitor.ElementValueVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.annotation.ClassElementValue::accept(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.visitor.ElementValueVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.annotation.ConstantElementValue" />
			<role name="Visitor" element="proguard.classfile.attribute.annotation.visitor.ElementValueVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.annotation.ConstantElementValue::accept(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.visitor.ElementValueVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.annotation.EnumConstantElementValue" />
			<role name="Visitor" element="proguard.classfile.attribute.annotation.visitor.ElementValueVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.annotation.EnumConstantElementValue::accept(proguard.classfile.Clazz, proguard.classfile.attribute.annotation.Annotation, proguard.classfile.attribute.annotation.visitor.ElementValueVisitor):void" />
		</instance>
		<instance>
			<role name="Visitor" element="proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor" />
			<role name="ConcreteElement" element="proguard.classfile.attribute.preverification.DoubleType" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.DoubleType::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.DoubleType::stackAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.DoubleType::variablesAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
		</instance>
		<instance>
			<role name="Visitor" element="proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor" />
			<role name="ConcreteElement" element="proguard.classfile.attribute.preverification.FloatType" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.FloatType::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.FloatType::stackAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.FloatType::variablesAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
		</instance>
		<instance>
			<role name="Visitor" element="proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor" />
			<role name="ConcreteElement" element="proguard.classfile.attribute.preverification.IntegerType" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.IntegerType::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.IntegerType::stackAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.IntegerType::variablesAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
		</instance>
		<instance>
			<role name="Visitor" element="proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor" />
			<role name="ConcreteElement" element="proguard.classfile.attribute.preverification.LongType" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.LongType::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.LongType::stackAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.LongType::variablesAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
		</instance>
		<instance>
			<role name="Visitor" element="proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor" />
			<role name="ConcreteElement" element="proguard.classfile.attribute.preverification.NullType" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.NullType::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.NullType::stackAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.NullType::variablesAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
		</instance>
		<instance>
			<role name="Visitor" element="proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor" />
			<role name="ConcreteElement" element="proguard.classfile.attribute.preverification.ObjectType" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.ObjectType::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.ObjectType::stackAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.ObjectType::variablesAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
		</instance>
		<instance>
			<role name="Visitor" element="proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor" />
			<role name="ConcreteElement" element="proguard.classfile.attribute.preverification.TopType" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.TopType::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.TopType::stackAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.TopType::variablesAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
		</instance>
		<instance>
			<role name="Visitor" element="proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor" />
			<role name="ConcreteElement" element="proguard.classfile.attribute.preverification.UninitializedThisType" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.UninitializedThisType::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.UninitializedThisType::stackAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.UninitializedThisType::variablesAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
		</instance>
		<instance>
			<role name="Visitor" element="proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor" />
			<role name="ConcreteElement" element="proguard.classfile.attribute.preverification.UninitializedType" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.UninitializedType::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.UninitializedType::stackAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.UninitializedType::variablesAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.CodeAttribute" />
			<role name="Visitor" element="proguard.classfile.attribute.visitor.ExceptionInfoVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.CodeAttribute::exceptionsAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.visitor.ExceptionInfoVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.CodeAttribute::exceptionsAccept(proguard.classfile.Clazz, proguard.classfile.Method, int, proguard.classfile.attribute.visitor.ExceptionInfoVisitor):void" />
			<role name="Accept()" element="proguard.classfile.attribute.CodeAttribute::exceptionsAccept(proguard.classfile.Clazz, proguard.classfile.Method, int, int, proguard.classfile.attribute.visitor.ExceptionInfoVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.preverification.FullFrame" />
			<role name="Visitor" element="proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.FullFrame::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.preverification.LessZeroFrame" />
			<role name="Visitor" element="proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.LessZeroFrame::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.preverification.MoreZeroFrame" />
			<role name="Visitor" element="proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.MoreZeroFrame::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.preverification.SameOneFrame" />
			<role name="Visitor" element="proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.SameOneFrame::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.attribute.preverification.SameZeroFrame" />
			<role name="Visitor" element="proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor" />
			<role name="Accept()" element="proguard.classfile.attribute.preverification.SameZeroFrame::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.instruction.ConstantInstruction" />
			<role name="Visitor" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Accept()" element="proguard.classfile.instruction.ConstantInstruction::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.visitor.InstructionVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.LibraryField" />
			<role name="Visitor" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Accept()" element="proguard.classfile.LibraryField::accept(proguard.classfile.LibraryClass, proguard.classfile.visitor.MemberVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.LibraryMethod" />
			<role name="Visitor" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Accept()" element="proguard.classfile.LibraryMethod::accept(proguard.classfile.LibraryClass, proguard.classfile.visitor.MemberVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.ProgramField" />
			<role name="Visitor" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Accept()" element="proguard.classfile.ProgramField::accept(proguard.classfile.ProgramClass, proguard.classfile.visitor.MemberVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.ProgramMethod" />
			<role name="Visitor" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Accept()" element="proguard.classfile.ProgramMethod::accept(proguard.classfile.ProgramClass, proguard.classfile.visitor.MemberVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.instruction.BranchInstruction" />
			<role name="Visitor" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Accept()" element="proguard.classfile.instruction.BranchInstruction::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.visitor.InstructionVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.instruction.LookUpSwitchInstruction" />
			<role name="Visitor" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Accept()" element="proguard.classfile.instruction.LookUpSwitchInstruction::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.visitor.InstructionVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.instruction.SimpleInstruction" />
			<role name="Visitor" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Accept()" element="proguard.classfile.instruction.SimpleInstruction::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.visitor.InstructionVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.instruction.TableSwitchInstruction" />
			<role name="Visitor" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Accept()" element="proguard.classfile.instruction.TableSwitchInstruction::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.visitor.InstructionVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.instruction.VariableInstruction" />
			<role name="Visitor" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Accept()" element="proguard.classfile.instruction.VariableInstruction::accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.visitor.InstructionVisitor):void" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="proguard.classfile.ClassPool" />
			<role name="Visitor" element="proguard.classfile.visitor.ClassPoolVisitor" />
			<role name="Accept()" element="proguard.classfile.ClassPool::accept(proguard.classfile.visitor.ClassPoolVisitor):void" />
		</instance>
	</pattern>
	<pattern name="Proxy">
		<instance>
			<role name="RealSubject" element="proguard.classfile.editor.CodeAttributeEditor" />
			<role name="Proxy" element="proguard.optimize.peephole.GotoCommonCodeReplacer" />
			<role name="Request()" element="proguard.optimize.peephole.GotoCommonCodeReplacer::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.editor.CodeAttributeEditor" />
			<role name="Proxy" element="proguard.optimize.peephole.PeepholeOptimizer" />
			<role name="Request()" element="proguard.optimize.peephole.PeepholeOptimizer::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.editor.CodeAttributeEditor" />
			<role name="Proxy" element="proguard.classfile.editor.ConstantPoolRemapper" />
			<role name="Request()" element="proguard.classfile.editor.ConstantPoolRemapper::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.editor.CodeAttributeEditor" />
			<role name="Proxy" element="proguard.classfile.editor.InstructionWriter" />
			<role name="Request()" element="proguard.classfile.editor.CodeAttributeEditor::visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction):void" />
			<role name="Request()" element="proguard.classfile.editor.CodeAttributeEditor::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
			<role name="Request()" element="proguard.classfile.editor.CodeAttributeEditor::visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction):void" />
			<role name="Request()" element="proguard.classfile.editor.CodeAttributeEditor::visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction):void" />
			<role name="Request()" element="proguard.classfile.editor.InstructionWriter::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.editor.CodeAttributeEditor" />
			<role name="Proxy" element="proguard.classfile.editor.MethodInvocationFixer" />
			<role name="Request()" element="proguard.classfile.editor.MethodInvocationFixer::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.editor.CodeAttributeEditor" />
			<role name="Proxy" element="proguard.classfile.editor.VariableRemapper" />
			<role name="Request()" element="proguard.classfile.editor.VariableRemapper::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.editor.CodeAttributeEditor" />
			<role name="Proxy" element="proguard.optimize.DuplicateInitializerInvocationFixer" />
			<role name="Request()" element="proguard.optimize.DuplicateInitializerInvocationFixer::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.editor.StackSizeUpdater" />
			<role name="Proxy" element="proguard.classfile.editor.CodeAttributeComposer" />
			<role name="Request()" element="proguard.classfile.editor.CodeAttributeComposer::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.editor.VariableEditor" />
			<role name="Proxy" element="proguard.classfile.editor.VariableRemapper" />
			<role name="Request()" element="proguard.classfile.editor.VariableEditor::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.editor.VariableEditor" />
			<role name="Proxy" element="proguard.optimize.peephole.VariableShrinker" />
			<role name="Request()" element="proguard.optimize.peephole.VariableShrinker::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.optimize.info.VariableUsageMarker" />
			<role name="Proxy" element="proguard.optimize.peephole.VariableShrinker" />
			<role name="Request()" element="proguard.optimize.peephole.VariableShrinker::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
		</instance>
		<instance>
			<role name="Proxy" element="proguard.classfile.editor.ConstantPoolShrinker" />
			<role name="RealSubject" element="proguard.classfile.editor.ConstantPoolRemapper" />
			<role name="Request()" element="proguard.classfile.editor.ConstantPoolShrinker::visitProgramClass(proguard.classfile.ProgramClass):void" />
		</instance>
		<instance>
			<role name="Proxy" element="proguard.classfile.editor.Utf8Shrinker" />
			<role name="RealSubject" element="proguard.classfile.editor.ConstantPoolRemapper" />
			<role name="Request()" element="proguard.classfile.editor.Utf8Shrinker::visitProgramClass(proguard.classfile.ProgramClass):void" />
		</instance>
		<instance>
			<role name="Proxy" element="proguard.shrink.ClassShrinker" />
			<role name="RealSubject" element="proguard.classfile.editor.ConstantPoolRemapper" />
			<role name="Request()" element="proguard.shrink.ClassShrinker::visitProgramClass(proguard.classfile.ProgramClass):void" />
		</instance>
		<instance>
			<role name="Proxy" element="proguard.classfile.editor.ConstantPoolSorter" />
			<role name="RealSubject" element="proguard.classfile.editor.ConstantPoolRemapper" />
			<role name="Request()" element="proguard.classfile.editor.ConstantPoolSorter::visitProgramClass(proguard.classfile.ProgramClass):void" />
		</instance>
		<instance>
			<role name="Proxy" element="proguard.classfile.editor.NameAndTypeShrinker" />
			<role name="RealSubject" element="proguard.classfile.editor.ConstantPoolRemapper" />
			<role name="Request()" element="proguard.classfile.editor.NameAndTypeShrinker::visitProgramClass(proguard.classfile.ProgramClass):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.editor.InstructionWriter" />
			<role name="Proxy" element="proguard.classfile.editor.CodeAttributeComposer" />
			<role name="Request()" element="proguard.classfile.editor.CodeAttributeComposer::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.editor.InstructionWriter" />
			<role name="Proxy" element="proguard.classfile.editor.CodeAttributeEditor" />
			<role name="Request()" element="proguard.classfile.editor.InstructionWriter::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
			<role name="Request()" element="proguard.classfile.editor.CodeAttributeEditor::visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction):void" />
			<role name="Request()" element="proguard.classfile.editor.CodeAttributeEditor::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
			<role name="Request()" element="proguard.classfile.editor.CodeAttributeEditor::visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction):void" />
			<role name="Request()" element="proguard.classfile.editor.CodeAttributeEditor::visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.editor.VariableSizeUpdater" />
			<role name="Proxy" element="proguard.classfile.editor.CodeAttributeComposer" />
			<role name="Request()" element="proguard.classfile.editor.CodeAttributeComposer::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.editor.ConstantPoolRemapper" />
			<role name="Proxy" element="proguard.classfile.editor.CodeAttributeEditor" />
			<role name="Request()" element="proguard.classfile.editor.ConstantPoolRemapper::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
		</instance>
		<instance>
			<role name="Proxy" element="proguard.optimize.evaluation.LivenessAnalyzer" />
			<role name="RealSubject" element="proguard.optimize.evaluation.PartialEvaluator" />
			<role name="Request()" element="proguard.optimize.evaluation.LivenessAnalyzer::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
		</instance>
		<instance>
			<role name="Proxy" element="proguard.optimize.evaluation.VariableOptimizer" />
			<role name="RealSubject" element="proguard.classfile.editor.VariableRemapper" />
			<role name="Request()" element="proguard.optimize.evaluation.VariableOptimizer::visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute):void" />
		</instance>
	</pattern>
	<pattern name="Proxy2">
		<instance>
			<role name="RealSubject" element="proguard.classfile.attribute.visitor.AllAttributeVisitor" />
			<role name="Subject" element="proguard.classfile.attribute.visitor.AttributeVisitor" />
			<role name="subject" element="proguard.classfile.attribute.visitor.AllAttributeVisitor::attributeVisitor:proguard.classfile.attribute.visitor.AttributeVisitor" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.visitor.ReferencedClassVisitor" />
			<role name="Subject" element="proguard.classfile.visitor.ClassVisitor" />
			<role name="subject" element="proguard.classfile.visitor.ReferencedClassVisitor::classVisitor:proguard.classfile.visitor.ClassVisitor" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.util.MemberFinder" />
			<role name="Subject" element="proguard.classfile.visitor.MemberVisitor" />
			<role name="Proxy" element="proguard.optimize.peephole.MethodFinalizer" />
			<role name="subject" element="proguard.optimize.peephole.MethodFinalizer::extraMemberVisitor:proguard.classfile.visitor.MemberVisitor" />
			<role name="Request()" element="proguard.optimize.peephole.MethodFinalizer::visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.editor.CodeAttributeEditor" />
			<role name="Subject" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Proxy" element="proguard.optimize.peephole.GotoCommonCodeReplacer" />
			<role name="subject" element="proguard.optimize.peephole.GotoCommonCodeReplacer::extraInstructionVisitor:proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Request()" element="proguard.optimize.peephole.GotoCommonCodeReplacer::visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.optimize.peephole.BranchTargetFinder" />
			<role name="Subject" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Proxy" element="proguard.optimize.peephole.GotoCommonCodeReplacer" />
			<role name="subject" element="proguard.optimize.peephole.GotoCommonCodeReplacer::extraInstructionVisitor:proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Request()" element="proguard.optimize.peephole.GotoCommonCodeReplacer::visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.editor.CodeAttributeComposer" />
			<role name="Subject" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Proxy" element="proguard.optimize.peephole.MethodInliner" />
			<role name="subject" element="proguard.optimize.peephole.MethodInliner::extraInlinedInvocationVisitor:proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Request()" element="proguard.optimize.peephole.MethodInliner::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.editor.CodeAttributeComposer" />
			<role name="Subject" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Proxy" element="proguard.optimize.TailRecursionSimplifier" />
			<role name="subject" element="proguard.optimize.TailRecursionSimplifier::extraTailRecursionVisitor:proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Request()" element="proguard.optimize.TailRecursionSimplifier::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.attribute.visitor.StackSizeComputer" />
			<role name="Subject" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Proxy" element="proguard.optimize.peephole.MethodInliner" />
			<role name="subject" element="proguard.optimize.peephole.MethodInliner::extraInlinedInvocationVisitor:proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Request()" element="proguard.optimize.peephole.MethodInliner::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.optimize.info.AccessMethodMarker" />
			<role name="Subject" element="proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Proxy" element="proguard.optimize.peephole.MethodInliner" />
			<role name="subject" element="proguard.optimize.peephole.MethodInliner::extraInlinedInvocationVisitor:proguard.classfile.instruction.visitor.InstructionVisitor" />
			<role name="Request()" element="proguard.optimize.peephole.MethodInliner::visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="proguard.classfile.constant.visitor.ConstantTagFilter" />
			<role name="Subject" element="proguard.classfile.constant.visitor.ConstantVisitor" />
			<role name="subject" element="proguard.classfile.constant.visitor.ConstantTagFilter::constantVisitor:proguard.classfile.constant.visitor.ConstantVisitor" />
		</instance>
	</pattern>
	<pattern name="Chain of Responsibility">
		<instance>
			<role name="Handler" element="proguard.WordReader" />
			<role name="successor" element="proguard.WordReader::includeWordReader:proguard.WordReader" />
		</instance>
	</pattern>
</system>

