<?xml version="1.0" encoding="UTF-8"?>
<system>
	<pattern name="Factory Method">
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.db.impl.IPSet" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.db.impl.IPSet::find(com.hp.hpl.jena.graph.TripleMatch, com.hp.hpl.jena.db.impl.IDBID):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.enhanced.Implementation" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.enhanced.Implementation::wrap(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.enhanced.EnhGraph):com.hp.hpl.jena.enhanced.EnhNode" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.graph.Graph" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.Graph::getCapabilities():com.hp.hpl.jena.graph.Capabilities" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.Graph::getBulkUpdateHandler():com.hp.hpl.jena.graph.BulkUpdateHandler" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.Graph::getReifier():com.hp.hpl.jena.graph.Reifier" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.Graph::getPrefixMapping():com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.Graph::getTransactionHandler():com.hp.hpl.jena.graph.TransactionHandler" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.Graph::queryHandler():com.hp.hpl.jena.graph.query.QueryHandler" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.graph.impl.TripleStore" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.impl.TripleStore::listObjects():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.impl.TripleStore::find(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.graph.Node$NodeMaker" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.Node$NodeMaker::construct(java.lang.Object):com.hp.hpl.jena.graph.Node" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.graph.query.PatternCompiler" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.PatternCompiler::fixed(com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.graph.query.Element" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.PatternCompiler::bound(com.hp.hpl.jena.graph.Node, int):com.hp.hpl.jena.graph.query.Element" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.PatternCompiler::bind(com.hp.hpl.jena.graph.Node, int):com.hp.hpl.jena.graph.query.Element" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.graph.query.QueryHandler" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.QueryHandler::patternStage(com.hp.hpl.jena.graph.query.Mapping, com.hp.hpl.jena.graph.query.ExpressionSet, com.hp.hpl.jena.graph.Triple[]):com.hp.hpl.jena.graph.query.Stage" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.QueryHandler::prepareBindings(com.hp.hpl.jena.graph.query.Query, com.hp.hpl.jena.graph.Node[]):com.hp.hpl.jena.graph.query.BindingQueryPlan" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.QueryHandler::prepareTree(com.hp.hpl.jena.graph.Graph):com.hp.hpl.jena.graph.query.TreeQueryPlan" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.graph.query.QueryNodeFactory" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.QueryNodeFactory::createAny():com.hp.hpl.jena.graph.query.QueryNode" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.QueryNodeFactory::createFixed(com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.graph.query.QueryNode" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.QueryNodeFactory::createBind(com.hp.hpl.jena.graph.Node, int):com.hp.hpl.jena.graph.query.QueryNode" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.QueryNodeFactory::createJustBound(com.hp.hpl.jena.graph.Node, int):com.hp.hpl.jena.graph.query.QueryNode" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.QueryNodeFactory::createBound(com.hp.hpl.jena.graph.Node, int):com.hp.hpl.jena.graph.query.QueryNode" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.QueryNodeFactory::createTriple(com.hp.hpl.jena.graph.query.QueryNode, com.hp.hpl.jena.graph.query.QueryNode, com.hp.hpl.jena.graph.query.QueryNode):com.hp.hpl.jena.graph.query.QueryTriple" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.graph.query.regexptrees.RegexpTreeGenerator" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.regexptrees.RegexpTreeGenerator::getZeroOrMore(com.hp.hpl.jena.graph.query.regexptrees.RegexpTree):com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.regexptrees.RegexpTreeGenerator::getOneOrMore(com.hp.hpl.jena.graph.query.regexptrees.RegexpTree):com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.regexptrees.RegexpTreeGenerator::getOptional(com.hp.hpl.jena.graph.query.regexptrees.RegexpTree):com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.regexptrees.RegexpTreeGenerator::getBackReference(int):com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.regexptrees.RegexpTreeGenerator::getClass(java.lang.String, boolean):com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.regexptrees.RegexpTreeGenerator::getParen(com.hp.hpl.jena.graph.query.regexptrees.RegexpTree, int):com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.graph.query.Stage" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.query.Stage::deliver(com.hp.hpl.jena.graph.query.Pipe):com.hp.hpl.jena.graph.query.Pipe" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.graph.Triple$Field" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.graph.Triple$Field::filterOn(com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.util.iterator.Filter" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.mem.GraphMemBase" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.mem.GraphMemBase::createTripleStore():com.hp.hpl.jena.graph.impl.TripleStore" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.mem.TripleBunch" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.mem.TripleBunch::iterator(com.hp.hpl.jena.mem.HashCommon$NotifyEmpty):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.ontology.OntModel" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.ontology.OntModel::listAnnotationProperties():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.ontology.OntResource" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.ontology.OntResource::listPropertyValues(com.hp.hpl.jena.rdf.model.Property):com.hp.hpl.jena.rdf.model.NodeIterator" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext::clone(com.hp.hpl.jena.iri.IRI, com.hp.hpl.jena.rdf.arp.impl.Taint, java.lang.String, com.hp.hpl.jena.rdf.arp.impl.Taint):com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.rdf.model.impl.NodeIteratorFactory" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.impl.NodeIteratorFactory::createIterator(java.util.Iterator, java.lang.Object, com.hp.hpl.jena.rdf.model.Container):com.hp.hpl.jena.rdf.model.NodeIterator" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.rdf.model.impl.StatementBase" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.impl.StatementBase::replace(com.hp.hpl.jena.rdf.model.RDFNode):com.hp.hpl.jena.rdf.model.impl.StatementImpl" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.rdf.model.InfModel" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.InfModel::getRawModel():com.hp.hpl.jena.rdf.model.Model" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.InfModel::getDeductionsModel():com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.Model::createResource(com.hp.hpl.jena.rdf.model.AnonId):com.hp.hpl.jena.rdf.model.Resource" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.Model::createTypedLiteral(java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype):com.hp.hpl.jena.rdf.model.Literal" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.Model::createTypedLiteral(java.lang.Object, com.hp.hpl.jena.datatypes.RDFDatatype):com.hp.hpl.jena.rdf.model.Literal" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.Model::createTypedLiteral(java.lang.Object):com.hp.hpl.jena.rdf.model.Literal" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.Model::listNameSpaces():com.hp.hpl.jena.rdf.model.NsIterator" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.Model::listStatements(com.hp.hpl.jena.rdf.model.Selector):com.hp.hpl.jena.rdf.model.StmtIterator" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.Model::createStatement(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.RDFNode):com.hp.hpl.jena.rdf.model.Statement" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.rdf.model.RDFList" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.RDFList::iterator():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.rdf.model.ResourceFactory$Interface" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.ResourceFactory$Interface::createResource():com.hp.hpl.jena.rdf.model.Resource" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.ResourceFactory$Interface::createResource(java.lang.String):com.hp.hpl.jena.rdf.model.Resource" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.ResourceFactory$Interface::createPlainLiteral(java.lang.String):com.hp.hpl.jena.rdf.model.Literal" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.ResourceFactory$Interface::createTypedLiteral(java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype):com.hp.hpl.jena.rdf.model.Literal" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.ResourceFactory$Interface::createTypedLiteral(java.lang.Object):com.hp.hpl.jena.rdf.model.Literal" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.ResourceFactory$Interface::createProperty(java.lang.String):com.hp.hpl.jena.rdf.model.Property" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.ResourceFactory$Interface::createProperty(java.lang.String, java.lang.String):com.hp.hpl.jena.rdf.model.Property" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.rdf.model.ResourceFactory$Interface::createStatement(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.RDFNode):com.hp.hpl.jena.rdf.model.Statement" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.reasoner.Finder" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.reasoner.Finder::find(com.hp.hpl.jena.reasoner.TriplePattern):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.reasoner.Finder::findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.Finder):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.reasoner.InfGraph" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.reasoner.InfGraph::validate():com.hp.hpl.jena.reasoner.ValidityReport" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.reasoner.Reasoner" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.reasoner.Reasoner::bindSchema(com.hp.hpl.jena.graph.Graph):com.hp.hpl.jena.reasoner.Reasoner" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.reasoner.Reasoner::bindSchema(com.hp.hpl.jena.rdf.model.Model):com.hp.hpl.jena.reasoner.Reasoner" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.reasoner.Reasoner::bind(com.hp.hpl.jena.graph.Graph):com.hp.hpl.jena.reasoner.InfGraph" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.reasoner.Reasoner::getGraphCapabilities():com.hp.hpl.jena.graph.Capabilities" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.reasoner.ReasonerFactory" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.reasoner.ReasonerFactory::create(com.hp.hpl.jena.rdf.model.Resource):com.hp.hpl.jena.reasoner.Reasoner" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment::instantiate(com.hp.hpl.jena.reasoner.TriplePattern):com.hp.hpl.jena.graph.Triple" />
		</instance>
		<instance>
			<role name="Creator" element="com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.util.iterator.ExtendedIterator::filterKeep(com.hp.hpl.jena.util.iterator.Filter):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.util.iterator.ExtendedIterator::filterDrop(com.hp.hpl.jena.util.iterator.Filter):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="FactoryMethod()" element="com.hp.hpl.jena.util.iterator.ExtendedIterator::mapWith():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
	</pattern>
	<pattern name="Prototype">
		<instance>
			<role name="Client" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter" />
			<role name="Prototype" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode" />
			<role name="prototype" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter::continuation:com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter::clone(java.util.Map, com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext):com.hp.hpl.jena.reasoner.rulesys.impl.RETENode" />
		</instance>
		<instance>
			<role name="Client" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEQueue" />
			<role name="Prototype" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode" />
			<role name="prototype" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEQueue::continuation:com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEQueue::clone(java.util.Map, com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext):com.hp.hpl.jena.reasoner.rulesys.impl.RETENode" />
		</instance>
	</pattern>
	<pattern name="Singleton">
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.assembler.Assembler" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Assembler::defaultModel:com.hp.hpl.jena.assembler.Assembler" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Assembler::memoryModel:com.hp.hpl.jena.assembler.Assembler" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Assembler::infModel:com.hp.hpl.jena.assembler.Assembler" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Assembler::rdbModel:com.hp.hpl.jena.assembler.Assembler" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Assembler::ontModel:com.hp.hpl.jena.assembler.Assembler" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Assembler::reasonerFactory:com.hp.hpl.jena.assembler.Assembler" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Assembler::content:com.hp.hpl.jena.assembler.Assembler" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Assembler::connection:com.hp.hpl.jena.assembler.Assembler" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Assembler::prefixMapping:com.hp.hpl.jena.assembler.Assembler" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Assembler::fileModel:com.hp.hpl.jena.assembler.Assembler" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Assembler::unionModel:com.hp.hpl.jena.assembler.Assembler" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Assembler::ontModelSpec:com.hp.hpl.jena.assembler.Assembler" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Assembler::ruleSet:com.hp.hpl.jena.assembler.Assembler" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Assembler::modelSource:com.hp.hpl.jena.assembler.Assembler" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Assembler::locationMapper:com.hp.hpl.jena.assembler.Assembler" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Assembler::fileManager:com.hp.hpl.jena.assembler.Assembler" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Assembler::documentManager:com.hp.hpl.jena.assembler.Assembler" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.assembler.Content" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Content::empty:com.hp.hpl.jena.assembler.Content" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.assembler.ImportManager" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.ImportManager::instance:com.hp.hpl.jena.assembler.ImportManager" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.assembler.Mode" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Mode::CREATE:com.hp.hpl.jena.assembler.Mode" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Mode::DEFAULT:com.hp.hpl.jena.assembler.Mode" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Mode::REUSE:com.hp.hpl.jena.assembler.Mode" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.Mode::ANY:com.hp.hpl.jena.assembler.Mode" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.assembler.RuleSet" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.assembler.RuleSet::empty:com.hp.hpl.jena.assembler.RuleSet" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.datatypes.TypeMapper" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.TypeMapper::theTypeMap:com.hp.hpl.jena.datatypes.TypeMapper" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDfloat:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDdouble:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDint:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDlong:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDshort:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDbyte:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDunsignedByte:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDunsignedShort:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDunsignedInt:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDunsignedLong:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDdecimal:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDinteger:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDnonPositiveInteger:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDnonNegativeInteger:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDpositiveInteger:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDnegativeInteger:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDboolean:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDstring:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDnormalizedString:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDanyURI:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDtoken:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDName:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDQName:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDlanguage:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDNMTOKEN:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDENTITY:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDID:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDNCName:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDIDREF:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDNOTATION:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDhexBinary:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDbase64Binary:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDdate:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDtime:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDdateTime:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDduration:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDgDay:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDgMonth:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDgYear:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDgYearMonth:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.datatypes.xsd.XSDDatatype::XSDgMonthDay:com.hp.hpl.jena.datatypes.xsd.XSDDatatype" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.graph.Graph" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.Graph::emptyGraph:com.hp.hpl.jena.graph.Graph" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.graph.GraphEvents" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.GraphEvents::removeAll:com.hp.hpl.jena.graph.GraphEvents" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.GraphEvents::startRead:com.hp.hpl.jena.graph.GraphEvents" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.GraphEvents::finishRead:com.hp.hpl.jena.graph.GraphEvents" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.graph.impl.FileGraph$NotifyOnClose" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.impl.FileGraph$NotifyOnClose::ignore:com.hp.hpl.jena.graph.impl.FileGraph$NotifyOnClose" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.graph.Node" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.Node::ANY:com.hp.hpl.jena.graph.Node" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.Node::NULL:com.hp.hpl.jena.graph.Node" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.graph.query.Applyer" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.query.Applyer::empty:com.hp.hpl.jena.graph.query.Applyer" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.graph.query.Element" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.query.Element::ANY:com.hp.hpl.jena.graph.query.Element" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.graph.query.Expression" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.query.Expression::TRUE:com.hp.hpl.jena.graph.query.Expression" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.query.Expression::FALSE:com.hp.hpl.jena.graph.query.Expression" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.graph.query.Matcher" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.query.Matcher::always:com.hp.hpl.jena.graph.query.Matcher" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.query.regexptrees.RegexpTree::EOL:com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.query.regexptrees.RegexpTree::SOL:com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.query.regexptrees.RegexpTree::ANY:com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.query.regexptrees.RegexpTree::NON:com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.graph.query.TripleSorter" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.query.TripleSorter::dontSort:com.hp.hpl.jena.graph.query.TripleSorter" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.graph.Triple$Field" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.Triple$Field::fieldSubject:com.hp.hpl.jena.graph.Triple$Field" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.Triple$Field::fieldObject:com.hp.hpl.jena.graph.Triple$Field" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.Triple$Field::fieldPredicate:com.hp.hpl.jena.graph.Triple$Field" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.graph.Triple" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.Triple::ANY:com.hp.hpl.jena.graph.Triple" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.graph.TripleBoundary" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.TripleBoundary::stopNowhere:com.hp.hpl.jena.graph.TripleBoundary" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.graph.TripleBoundary::stopAtAnonObject:com.hp.hpl.jena.graph.TripleBoundary" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.mem.HashCommon$NotifyEmpty" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.mem.HashCommon$NotifyEmpty::ignore:com.hp.hpl.jena.mem.HashCommon$NotifyEmpty" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.ontology.OntDocumentManager" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntDocumentManager::s_instance:com.hp.hpl.jena.ontology.OntDocumentManager" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::OWL_MEM:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::OWL_MEM_RDFS_INF:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::OWL_MEM_TRANS_INF:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::OWL_MEM_RULE_INF:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::OWL_MEM_MICRO_RULE_INF:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::OWL_MEM_MINI_RULE_INF:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::OWL_DL_MEM:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::OWL_DL_MEM_RDFS_INF:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::OWL_DL_MEM_TRANS_INF:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::OWL_DL_MEM_RULE_INF:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::OWL_LITE_MEM:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::OWL_LITE_MEM_TRANS_INF:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::OWL_LITE_MEM_RDFS_INF:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::OWL_LITE_MEM_RULES_INF:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::DAML_MEM:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::DAML_MEM_TRANS_INF:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::DAML_MEM_RDFS_INF:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::DAML_MEM_RULE_INF:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::RDFS_MEM:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::RDFS_MEM_TRANS_INF:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.OntModelSpec::RDFS_MEM_RDFS_INF:com.hp.hpl.jena.ontology.OntModelSpec" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.ontology.ProfileRegistry" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.ontology.ProfileRegistry::s_instance:com.hp.hpl.jena.ontology.ProfileRegistry" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.reasoner.ReasonerRegistry" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.reasoner.ReasonerRegistry::theRegistry:com.hp.hpl.jena.reasoner.ReasonerRegistry" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry::theRegistry:com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasonerFactory" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasonerFactory::theInstance:com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasonerFactory" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.reasoner.rulesys.impl.Generator$LFlag" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.reasoner.rulesys.impl.Generator$LFlag::LIVE:com.hp.hpl.jena.reasoner.rulesys.impl.Generator$LFlag" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.reasoner.rulesys.impl.Generator$LFlag::DEAD:com.hp.hpl.jena.reasoner.rulesys.impl.Generator$LFlag" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.reasoner.rulesys.impl.Generator$LFlag::UNKNOWN:com.hp.hpl.jena.reasoner.rulesys.impl.Generator$LFlag" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode::returnCodeBlock:com.hp.hpl.jena.reasoner.rulesys.impl.RuleClauseCode" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.reasoner.rulesys.impl.StateFlag" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.reasoner.rulesys.impl.StateFlag::FAIL:com.hp.hpl.jena.reasoner.rulesys.impl.StateFlag" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.reasoner.rulesys.impl.StateFlag::SUSPEND:com.hp.hpl.jena.reasoner.rulesys.impl.StateFlag" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.reasoner.rulesys.impl.StateFlag::ACTIVE:com.hp.hpl.jena.reasoner.rulesys.impl.StateFlag" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.reasoner.rulesys.impl.StateFlag::SATISFIED:com.hp.hpl.jena.reasoner.rulesys.impl.StateFlag" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable::WILD:com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.shared.PrefixMapping::Standard:com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.shared.PrefixMapping::Extended:com.hp.hpl.jena.shared.PrefixMapping" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.shared.ReificationStyle" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.shared.ReificationStyle::Standard:com.hp.hpl.jena.shared.ReificationStyle" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.shared.ReificationStyle::Convenient:com.hp.hpl.jena.shared.ReificationStyle" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.shared.ReificationStyle::Minimal:com.hp.hpl.jena.shared.ReificationStyle" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.shared.uuid.UUID_nil" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.shared.uuid.UUID_nil::nil:com.hp.hpl.jena.shared.uuid.UUID_nil" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.util.FileManager" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.util.FileManager::instance:com.hp.hpl.jena.util.FileManager" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.util.iterator.Filter" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.util.iterator.Filter::any:com.hp.hpl.jena.util.iterator.Filter" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.util.LocationMapper" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.util.LocationMapper::theMapper:com.hp.hpl.jena.util.LocationMapper" />
		</instance>
		<instance>
			<role name="Singleton" element="com.hp.hpl.jena.vocabulary.DAML_OIL" />
			<role name="uniqueInstance" element="com.hp.hpl.jena.vocabulary.DAML_OIL::s_instance:com.hp.hpl.jena.vocabulary.DAML_OIL" />
		</instance>
	</pattern>
	<pattern name="(Object)Adapter">
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.impl.ModelReifier" />
			<role name="Adapter" element="com.hp.hpl.jena.rdf.model.impl.ModelCom" />
			<role name="adaptee" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::modelReifier:com.hp.hpl.jena.rdf.model.impl.ModelReifier" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::getReificationStyle():com.hp.hpl.jena.shared.ReificationStyle" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::listReifiedStatements():com.hp.hpl.jena.rdf.model.RSIterator" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::listReifiedStatements(com.hp.hpl.jena.rdf.model.Statement):com.hp.hpl.jena.rdf.model.RSIterator" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::isReified(com.hp.hpl.jena.rdf.model.Statement):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::getAnyReifiedStatement(com.hp.hpl.jena.rdf.model.Statement):com.hp.hpl.jena.rdf.model.Resource" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::removeAllReifications(com.hp.hpl.jena.rdf.model.Statement):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::removeReification(com.hp.hpl.jena.rdf.model.ReifiedStatement):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::createReifiedStatement(com.hp.hpl.jena.rdf.model.Statement):com.hp.hpl.jena.rdf.model.ReifiedStatement" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::createReifiedStatement(java.lang.String, com.hp.hpl.jena.rdf.model.Statement):com.hp.hpl.jena.rdf.model.ReifiedStatement" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="Adapter" element="com.hp.hpl.jena.ontology.impl.OntModelImpl" />
			<role name="adaptee" element="com.hp.hpl.jena.ontology.impl.OntModelImpl::m_spec:com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="Request()" element="com.hp.hpl.jena.ontology.impl.OntModelImpl::getDocumentManager():com.hp.hpl.jena.ontology.OntDocumentManager" />
			<role name="Request()" element="com.hp.hpl.jena.ontology.impl.OntModelImpl::getProfile():com.hp.hpl.jena.ontology.Profile" />
			<role name="Request()" element="com.hp.hpl.jena.ontology.impl.OntModelImpl::getImportModelMaker():com.hp.hpl.jena.rdf.model.ModelMaker" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph" />
			<role name="Adaptee" element="com.hp.hpl.jena.util.OneToManyMap" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph::derivations:com.hp.hpl.jena.util.OneToManyMap" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph::logDerivation(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.reasoner.Derivation):void" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph" />
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph::tempNodecache:com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph::getTemp(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.graph.Node" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph" />
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph::engine:com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph::findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.Finder):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph" />
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph::tempNodecache:com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph::getTemp(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.graph.Node" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.mem.MixedGraphMem" />
			<role name="Adaptee" element="com.hp.hpl.jena.mem.MixedGraphMemStore" />
			<role name="adaptee" element="com.hp.hpl.jena.mem.MixedGraphMem::mixedStore:com.hp.hpl.jena.mem.MixedGraphMemStore" />
			<role name="Request()" element="com.hp.hpl.jena.mem.MixedGraphMem::isEmpty():boolean" />
			<role name="Request()" element="com.hp.hpl.jena.mem.MixedGraphMem::clear():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.Graph" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.impl.WrappedGraph" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.impl.WrappedGraph::base:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::performAdd(com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::performDelete(com.hp.hpl.jena.graph.Triple):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.RDFNode" />
			<role name="Adapter" element="com.hp.hpl.jena.rdf.model.impl.StatementImpl" />
			<role name="adaptee" element="com.hp.hpl.jena.rdf.model.impl.StatementImpl::object:com.hp.hpl.jena.rdf.model.RDFNode" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.StatementImpl::getBag():com.hp.hpl.jena.rdf.model.Bag" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.StatementImpl::getAlt():com.hp.hpl.jena.rdf.model.Alt" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.StatementImpl::getSeq():com.hp.hpl.jena.rdf.model.Seq" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.db.impl.SQLCache" />
			<role name="Adapter" element="com.hp.hpl.jena.db.impl.DriverRDB" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.DriverRDB::m_sql:com.hp.hpl.jena.db.impl.SQLCache" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DriverRDB::tryLockDB():boolean" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DriverRDB::unlockDB():void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DriverRDB::createTable(int, boolean):java.lang.String" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DriverRDB::deleteTable(java.lang.String):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DriverRDB::transactionsSupported():boolean" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DriverRDB::getInsertID(java.lang.String):int" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.util.OneToManyMap" />
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph::derivations:com.hp.hpl.jena.util.OneToManyMap" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph::logDerivation(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.reasoner.Derivation):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.db.GraphRDB" />
			<role name="Adapter" element="com.hp.hpl.jena.db.ModelRDB" />
			<role name="adaptee" element="com.hp.hpl.jena.db.ModelRDB::m_graphRDB:com.hp.hpl.jena.db.GraphRDB" />
			<role name="Request()" element="com.hp.hpl.jena.db.ModelRDB::close():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.db.impl.DBPropDatabase" />
			<role name="Adapter" element="com.hp.hpl.jena.db.impl.DriverRDB" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.DriverRDB::m_dbProps:com.hp.hpl.jena.db.impl.DBPropDatabase" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DriverRDB::getSystemSpecializedGraph(boolean):com.hp.hpl.jena.db.impl.SpecializedGraph" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DriverRDB::removeSpecializedGraphs(com.hp.hpl.jena.db.impl.DBPropGraph, java.util.List):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI" />
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine::infGraph:com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine::fastInit(com.hp.hpl.jena.reasoner.Finder):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI" />
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph::engine:com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph::shouldTrace():boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.compose.Polyadic" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.compose.PolyadicPrefixMappingImpl" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.compose.PolyadicPrefixMappingImpl::poly:com.hp.hpl.jena.graph.compose.Polyadic" />
			<role name="Request()" element="com.hp.hpl.jena.graph.compose.PolyadicPrefixMappingImpl::getNsPrefixURI(java.lang.String):java.lang.String" />
			<role name="Request()" element="com.hp.hpl.jena.graph.compose.PolyadicPrefixMappingImpl::getNsPrefixMap():java.util.Map" />
			<role name="Request()" element="com.hp.hpl.jena.graph.compose.PolyadicPrefixMappingImpl::getNsURIPrefix(java.lang.String):java.lang.String" />
			<role name="Request()" element="com.hp.hpl.jena.graph.compose.PolyadicPrefixMappingImpl::expandPrefix(java.lang.String):java.lang.String" />
			<role name="Request()" element="com.hp.hpl.jena.graph.compose.PolyadicPrefixMappingImpl::shortForm(java.lang.String):java.lang.String" />
			<role name="Request()" element="com.hp.hpl.jena.graph.compose.PolyadicPrefixMappingImpl::qnameFor(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser" />
			<role name="Adapter" element="com.hp.hpl.jena.rdf.arp.ARP" />
			<role name="adaptee" element="com.hp.hpl.jena.rdf.arp.ARP::arpf:com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.ARP::getHandlers():com.hp.hpl.jena.rdf.arp.ARPHandlers" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.ARP::setHandlersWith(com.hp.hpl.jena.rdf.arp.ARPHandlers):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.ARP::getOptions():com.hp.hpl.jena.rdf.arp.ARPOptions" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.ARP::setOptionsWith(com.hp.hpl.jena.rdf.arp.ARPOptions):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.datatypes.RDFDatatype" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.impl.LiteralLabelImpl" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.impl.LiteralLabelImpl::dtype:com.hp.hpl.jena.datatypes.RDFDatatype" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.LiteralLabelImpl::toString(boolean):java.lang.String" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.LiteralLabelImpl::getLexicalForm():java.lang.String" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.LiteralLabelImpl::getDatatypeURI():java.lang.String" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.LiteralLabelImpl::hashCode():int" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.GraphEventManager" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::manager:com.hp.hpl.jena.graph.GraphEventManager" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::add(com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::add(java.util.List):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::add(java.util.Iterator):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::add(com.hp.hpl.jena.graph.Graph, boolean):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::add(com.hp.hpl.jena.graph.Graph):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::delete(com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::delete(java.util.List):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::delete(java.util.Iterator):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::delete(com.hp.hpl.jena.graph.Graph):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::delete(com.hp.hpl.jena.graph.Graph, boolean):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::removeAll():void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::remove(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.GraphEventManager" />
			<role name="Adapter" element="com.hp.hpl.jena.db.impl.DBBulkUpdateHandler" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.DBBulkUpdateHandler::manager:com.hp.hpl.jena.graph.GraphEventManager" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBBulkUpdateHandler::add(com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBBulkUpdateHandler::add(java.util.Iterator):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBBulkUpdateHandler::add(com.hp.hpl.jena.graph.Graph, boolean):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBBulkUpdateHandler::delete(com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBBulkUpdateHandler::delete(java.util.Iterator):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBBulkUpdateHandler::delete(com.hp.hpl.jena.graph.Graph, boolean):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBBulkUpdateHandler::removeAll():void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBBulkUpdateHandler::remove(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.GraphEventManager" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler::manager:com.hp.hpl.jena.graph.GraphEventManager" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler::add(com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler::add(com.hp.hpl.jena.graph.Graph, boolean):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler::delete(com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler::delete(com.hp.hpl.jena.graph.Graph, boolean):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler::remove(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.db.impl.ReificationCacheMap" />
			<role name="Adapter" element="com.hp.hpl.jena.db.impl.SpecializedGraphReifier_RDB" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.SpecializedGraphReifier_RDB::m_reifCache:com.hp.hpl.jena.db.impl.ReificationCacheMap" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.SpecializedGraphReifier_RDB::add(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.db.impl.SpecializedGraph$CompletionFlag):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.SpecializedGraphReifier_RDB::delete(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.db.impl.SpecializedGraph$CompletionFlag):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.Node" />
			<role name="Adapter" element="com.hp.hpl.jena.enhanced.EnhNode" />
			<role name="adaptee" element="com.hp.hpl.jena.enhanced.EnhNode::node:com.hp.hpl.jena.graph.Node" />
			<role name="Request()" element="com.hp.hpl.jena.enhanced.EnhNode::equals(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine" />
			<role name="Adaptee" element="com.hp.hpl.jena.util.OneToManyMap" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine::predicatePatterns:com.hp.hpl.jena.util.OneToManyMap" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine::clauseIndex:com.hp.hpl.jena.util.OneToManyMap" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine::fastInit(com.hp.hpl.jena.reasoner.Finder):void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine::setRuleStore(java.lang.Object):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.arp.JenaHandler" />
			<role name="Adapter" element="com.hp.hpl.jena.rdf.arp.JenaReader" />
			<role name="adaptee" element="com.hp.hpl.jena.rdf.arp.JenaReader::handler:com.hp.hpl.jena.rdf.arp.JenaHandler" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.JenaReader::setErrorHandler(com.hp.hpl.jena.rdf.model.RDFErrorHandler):com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter" />
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPTopGoalIterator" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPTopGoalIterator::interpreter:com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPTopGoalIterator::close():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.db.GraphRDB" />
			<role name="Adapter" element="com.hp.hpl.jena.db.impl.DBBulkUpdateHandler" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.DBBulkUpdateHandler::graph:com.hp.hpl.jena.db.GraphRDB" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBBulkUpdateHandler::removeAll():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.impl.GraphWithPerform" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler::graph:com.hp.hpl.jena.graph.impl.GraphWithPerform" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler::add(com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler::delete(com.hp.hpl.jena.graph.Triple[]):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.db.impl.PSet_ReifStore_RDB" />
			<role name="Adapter" element="com.hp.hpl.jena.db.impl.SpecializedGraphReifier_RDB" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.SpecializedGraphReifier_RDB::m_reif:com.hp.hpl.jena.db.impl.PSet_ReifStore_RDB" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.SpecializedGraphReifier_RDB::add(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.db.impl.SpecializedGraph$CompletionFlag):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.SpecializedGraphReifier_RDB::delete(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.db.impl.SpecializedGraph$CompletionFlag):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.SpecializedGraphReifier_RDB::findReifiedNodes(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.db.impl.SpecializedGraph$CompletionFlag):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.SpecializedGraphReifier_RDB::findReifiedTriple(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.db.impl.SpecializedGraph$CompletionFlag):com.hp.hpl.jena.graph.Triple" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="Adapter" element="com.hp.hpl.jena.assembler.assemblers.AssemblerGroup$ExpandingAssemblerGroup" />
			<role name="adaptee" element="com.hp.hpl.jena.assembler.assemblers.AssemblerGroup$ExpandingAssemblerGroup::implementTypes:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.assembler.assemblers.AssemblerGroup$ExpandingAssemblerGroup::implementWith(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.assembler.Assembler):com.hp.hpl.jena.assembler.assemblers.AssemblerGroup" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.Graph" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.query.SimpleQueryHandler" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.query.SimpleQueryHandler::graph:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.SimpleQueryHandler::containsNode(com.hp.hpl.jena.graph.Node):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.db.impl.SQLCache" />
			<role name="Adapter" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB::m_sql:com.hp.hpl.jena.db.impl.SQLCache" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB::cleanDB():void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB::rowCount(int):int" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB::storeTripleList(java.util.List, com.hp.hpl.jena.db.impl.IDBID):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB::deleteTripleList(java.util.List, com.hp.hpl.jena.db.impl.IDBID):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB::find(com.hp.hpl.jena.graph.TripleMatch, com.hp.hpl.jena.db.impl.IDBID):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB::removeStatementsFromDB(com.hp.hpl.jena.db.impl.IDBID):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.db.impl.IPSet" />
			<role name="Adapter" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator::m_pset:com.hp.hpl.jena.db.impl.IPSet" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator::extractRow():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.db.impl.IPSet" />
			<role name="Adapter" element="com.hp.hpl.jena.db.impl.ResultSetTripleIterator" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.ResultSetTripleIterator::m_pset:com.hp.hpl.jena.db.impl.IPSet" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.ResultSetTripleIterator::extractRow():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.shared.ReificationStyle" />
			<role name="Adapter" element="com.hp.hpl.jena.db.impl.DBReifier" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.DBReifier::m_style:com.hp.hpl.jena.shared.ReificationStyle" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::findEither(com.hp.hpl.jena.graph.TripleMatch, boolean):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::size():int" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.shared.ReificationStyle" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.impl.ReificationWrapper" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.impl.ReificationWrapper::style:com.hp.hpl.jena.shared.ReificationStyle" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.ReificationWrapper::findEither(com.hp.hpl.jena.graph.TripleMatch, boolean):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.ReificationWrapper::size():int" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph" />
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.Finder" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph::dataFind:com.hp.hpl.jena.reasoner.Finder" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph::findDataMatches(com.hp.hpl.jena.reasoner.TriplePattern):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph" />
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.FGraph" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph::fschema:com.hp.hpl.jena.reasoner.FGraph" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph::getSchemaGraph():com.hp.hpl.jena.graph.Graph" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph" />
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.Finder" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph::dataFind:com.hp.hpl.jena.reasoner.Finder" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph::findDataMatches(com.hp.hpl.jena.reasoner.TriplePattern):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph" />
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.Finder" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph::tbox:com.hp.hpl.jena.reasoner.Finder" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph::findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.Finder):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.mem.NodeToTriplesMapBase" />
			<role name="Adapter" element="com.hp.hpl.jena.mem.GraphTripleStoreBase" />
			<role name="adaptee" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::subjects:com.hp.hpl.jena.mem.NodeToTriplesMapBase" />
			<role name="adaptee" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::predicates:com.hp.hpl.jena.mem.NodeToTriplesMapBase" />
			<role name="adaptee" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::objects:com.hp.hpl.jena.mem.NodeToTriplesMapBase" />
			<role name="Request()" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::add(com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::delete(com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::clear():void" />
			<role name="Request()" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::size():int" />
			<role name="Request()" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::isEmpty():boolean" />
			<role name="Request()" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::listSubjects():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::listPredicates():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::listObjects():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::contains(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::find(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.ReasonerFactory" />
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleReasoner" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleReasoner::factory:com.hp.hpl.jena.reasoner.ReasonerFactory" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleReasoner::getReasonerCapabilities():com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleReasoner::supportsProperty(com.hp.hpl.jena.rdf.model.Property):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.ReasonerFactory" />
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleReasoner" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleReasoner::factory:com.hp.hpl.jena.reasoner.ReasonerFactory" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleReasoner::getReasonerCapabilities():com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleReasoner::supportsProperty(com.hp.hpl.jena.rdf.model.Property):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine" />
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext::engine:com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext::remove(com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext::add(com.hp.hpl.jena.graph.Triple):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.Graph" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.impl.ReificationWrapper" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.impl.ReificationWrapper::base:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.ReificationWrapper::allNodes():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.ReificationWrapper::find(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.ReificationWrapper::handledAdd(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.ReificationWrapper::remove(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.ReificationWrapper::hasTriple(com.hp.hpl.jena.graph.Triple):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.impl.ReifierTripleMap" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.impl.SimpleReifier" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.impl.SimpleReifier::tripleMap:com.hp.hpl.jena.graph.impl.ReifierTripleMap" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::allNodes():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::allNodes(com.hp.hpl.jena.graph.Triple):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::reifyAs(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple):com.hp.hpl.jena.graph.Node" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::remove(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::remove(com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::hasTriple(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::find(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::size():int" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.db.IDBConnection" />
			<role name="Adapter" element="com.hp.hpl.jena.db.impl.DriverRDB" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.DriverRDB::m_dbcon:com.hp.hpl.jena.db.IDBConnection" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DriverRDB::DBisLocked():boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.db.impl.IRDBDriver" />
			<role name="Adapter" element="com.hp.hpl.jena.db.DBConnection" />
			<role name="adaptee" element="com.hp.hpl.jena.db.DBConnection::m_driver:com.hp.hpl.jena.db.impl.IRDBDriver" />
			<role name="Request()" element="com.hp.hpl.jena.db.DBConnection::close():void" />
			<role name="Request()" element="com.hp.hpl.jena.db.DBConnection::cleanDB():void" />
			<role name="Request()" element="com.hp.hpl.jena.db.DBConnection::isFormatOK():boolean" />
			<role name="Request()" element="com.hp.hpl.jena.db.DBConnection::setDatabaseProperties(com.hp.hpl.jena.rdf.model.Model):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.DBConnection::getDatabaseProperties():com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.db.DBConnection::getDefaultModelProperties():com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.db.DBConnection::getAllModelNames():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.db.DBConnection::containsModel(java.lang.String):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.db.DBConnection::getDriver():com.hp.hpl.jena.db.impl.IRDBDriver" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.ConsumerChoicePointFrame" />
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPTopGoalIterator" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPTopGoalIterator::nextToRun:com.hp.hpl.jena.reasoner.rulesys.impl.ConsumerChoicePointFrame" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPTopGoalIterator::isReady():boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.db.impl.IRDBDriver" />
			<role name="Adapter" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB::m_driver:com.hp.hpl.jena.db.impl.IRDBDriver" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB::extractTripleFromRowData(java.lang.String, java.lang.String, java.lang.String):com.hp.hpl.jena.graph.Triple" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB::find(com.hp.hpl.jena.graph.TripleMatch, com.hp.hpl.jena.db.impl.IDBID):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.ModelChangedListener" />
			<role name="Adapter" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter" />
			<role name="adaptee" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::L:com.hp.hpl.jena.rdf.model.ModelChangedListener" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyAddArray(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyDeleteArray(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyAddTriple(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyAddList(com.hp.hpl.jena.graph.Graph, java.util.List):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyAddIterator(com.hp.hpl.jena.graph.Graph, java.util.Iterator):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyAddGraph(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyDeleteIterator(com.hp.hpl.jena.graph.Graph, java.util.Iterator):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyDeleteTriple(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyDeleteList(com.hp.hpl.jena.graph.Graph, java.util.List):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyDeleteGraph(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyEvent(com.hp.hpl.jena.graph.Graph, java.lang.Object):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.impl.ModelCom" />
			<role name="Adapter" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter" />
			<role name="adaptee" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::m:com.hp.hpl.jena.rdf.model.impl.ModelCom" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyAddArray(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyDeleteArray(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyAddTriple(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyAddList(com.hp.hpl.jena.graph.Graph, java.util.List):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyAddIterator(com.hp.hpl.jena.graph.Graph, java.util.Iterator):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyAddGraph(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyDeleteIterator(com.hp.hpl.jena.graph.Graph, java.util.Iterator):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyDeleteTriple(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyDeleteList(com.hp.hpl.jena.graph.Graph, java.util.List):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyDeleteGraph(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.GraphMaker" />
			<role name="Adapter" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl" />
			<role name="adaptee" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl::maker:com.hp.hpl.jena.graph.GraphMaker" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl::close():void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl::openModel(java.lang.String, boolean):com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl::createModel(java.lang.String, boolean):com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl::removeModel(java.lang.String):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl::hasModel(java.lang.String):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl::listModels():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.impl.FileGraph" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.impl.FileGraphTransactionHandler" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.impl.FileGraphTransactionHandler::fileGraph:com.hp.hpl.jena.graph.impl.FileGraph" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.FileGraphTransactionHandler::begin():void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.FileGraphTransactionHandler::abort():void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.FileGraphTransactionHandler::commit():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.BaseInfGraph" />
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.BaseInfGraph$InfTransactionHandler" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.BaseInfGraph$InfTransactionHandler::base:com.hp.hpl.jena.reasoner.BaseInfGraph" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.BaseInfGraph$InfTransactionHandler::abort():void" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.DAMLMicroReasonerFactory" />
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.DAMLMicroReasonerFactory::capabilities:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.DAMLMicroReasonerFactory::getCapabilities():com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.OWLFBRuleReasonerFactory" />
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.OWLFBRuleReasonerFactory::capabilities:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.OWLFBRuleReasonerFactory::getCapabilities():com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.OWLMicroReasonerFactory" />
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.OWLMicroReasonerFactory::capabilities:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.OWLMicroReasonerFactory::getCapabilities():com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.OWLMiniReasonerFactory" />
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.OWLMiniReasonerFactory::capabilities:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.OWLMiniReasonerFactory::getCapabilities():com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.RDFSFBRuleReasonerFactory" />
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.RDFSFBRuleReasonerFactory::capabilities:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.RDFSFBRuleReasonerFactory::getCapabilities():com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasonerFactory" />
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasonerFactory::capabilities:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasonerFactory::getCapabilities():com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.impl.WrappedReasonerFactory" />
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.WrappedReasonerFactory::schemaUnion:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.WrappedReasonerFactory::create(com.hp.hpl.jena.rdf.model.Resource):com.hp.hpl.jena.reasoner.Reasoner" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveReasonerFactory" />
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveReasonerFactory::capabilities:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveReasonerFactory::getCapabilities():com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasonerFactory" />
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasonerFactory::capabilities:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasonerFactory::getCapabilities():com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.rulesys.Rule" />
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext::rule:com.hp.hpl.jena.reasoner.rulesys.Rule" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext::add(com.hp.hpl.jena.graph.Triple):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.mem.MatchOrBind" />
			<role name="Adapter" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$1" />
			<role name="adaptee" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$1::x:com.hp.hpl.jena.mem.MatchOrBind" />
			<role name="Request()" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$1::applyToTriples(com.hp.hpl.jena.graph.query.Domain, com.hp.hpl.jena.graph.query.Matcher, com.hp.hpl.jena.graph.query.StageElement):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.mem.MatchOrBind" />
			<role name="Adapter" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$2" />
			<role name="adaptee" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$2::x:com.hp.hpl.jena.mem.MatchOrBind" />
			<role name="Request()" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$2::applyToTriples(com.hp.hpl.jena.graph.query.Domain, com.hp.hpl.jena.graph.query.Matcher, com.hp.hpl.jena.graph.query.StageElement):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.mem.MatchOrBind" />
			<role name="Adapter" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$3" />
			<role name="adaptee" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$3::x:com.hp.hpl.jena.mem.MatchOrBind" />
			<role name="Request()" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$3::applyToTriples(com.hp.hpl.jena.graph.query.Domain, com.hp.hpl.jena.graph.query.Matcher, com.hp.hpl.jena.graph.query.StageElement):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.mem.MatchOrBind" />
			<role name="Adapter" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$4" />
			<role name="adaptee" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$4::x:com.hp.hpl.jena.mem.MatchOrBind" />
			<role name="Request()" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$4::applyToTriples(com.hp.hpl.jena.graph.query.Domain, com.hp.hpl.jena.graph.query.Matcher, com.hp.hpl.jena.graph.query.StageElement):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.db.impl.LRUCache" />
			<role name="Adapter" element="com.hp.hpl.jena.db.impl.DriverRDB" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.DriverRDB::prefixCache:com.hp.hpl.jena.db.impl.LRUCache" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DriverRDB::getCompressCacheSize():int" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DriverRDB::setCompressCacheSize(int):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.impl.SimpleReifierFragmentsMap" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.impl.SimpleReifierFragmentHandler" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.impl.SimpleReifierFragmentHandler::map:com.hp.hpl.jena.graph.impl.SimpleReifierFragmentsMap" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifierFragmentHandler::clashedWith(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifierFragmentHandler::reifyIfCompleteQuad(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.graph.Triple" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifierFragmentHandler::removeFragment(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.graph.Triple):com.hp.hpl.jena.graph.Triple" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.query.Query" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.query.SimpleQueryPlan" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.query.SimpleQueryPlan::query:com.hp.hpl.jena.graph.query.Query" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.SimpleQueryPlan::executeBindings():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
			<role name="Adapter" element="com.hp.hpl.jena.n3.JenaReaderBase" />
			<role name="adaptee" element="com.hp.hpl.jena.n3.JenaReaderBase::errorHandler:com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
			<role name="Request()" element="com.hp.hpl.jena.n3.JenaReaderBase::read(com.hp.hpl.jena.rdf.model.Model, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
			<role name="Adapter" element="com.hp.hpl.jena.rdf.arp.JenaReader" />
			<role name="adaptee" element="com.hp.hpl.jena.rdf.arp.JenaReader::errorHandler:com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.JenaReader::setProperty(java.lang.String, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
			<role name="Adapter" element="com.hp.hpl.jena.rdf.model.impl.NTripleReader" />
			<role name="adaptee" element="com.hp.hpl.jena.rdf.model.impl.NTripleReader::errorHandler:com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.NTripleReader::setProperty(java.lang.String, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI" />
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.impl.BBRuleContext" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.BBRuleContext::graph:com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.BBRuleContext::find(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.util.iterator.ClosableIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.BBRuleContext::remove(com.hp.hpl.jena.graph.Triple):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI" />
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext::graph:com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext::add(com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext::find(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.util.iterator.ClosableIterator" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI" />
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext::graph:com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext::find(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.util.iterator.ClosableIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext::remove(com.hp.hpl.jena.graph.Triple):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext" />
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETETerminal" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETETerminal::context:com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETETerminal::fire(com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector, boolean):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.db.impl.SpecializedGraphReifier" />
			<role name="Adapter" element="com.hp.hpl.jena.db.impl.DBReifier" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.DBReifier::m_reifier:com.hp.hpl.jena.db.impl.SpecializedGraphReifier" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::reifyAs(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple):com.hp.hpl.jena.graph.Node" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::hasTriple(com.hp.hpl.jena.graph.Node):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::hasTriple(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::allNodes():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::allNodes(com.hp.hpl.jena.graph.Triple):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::remove(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::remove(com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::handledAdd(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::handledRemove(com.hp.hpl.jena.graph.Triple):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.impl.ReifierFragmentsMap" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.impl.SimpleReifier" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.impl.SimpleReifier::fragmentsMap:com.hp.hpl.jena.graph.impl.ReifierFragmentsMap" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::handledAdd(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::handledRemove(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::find(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::size():int" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.xmloutput.impl.SimpleLogger" />
			<role name="Adapter" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter" />
			<role name="adaptee" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter::logger:com.hp.hpl.jena.xmloutput.impl.SimpleLogger" />
			<role name="Request()" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter::setProperty(java.lang.String, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.mem.faster.FasterTripleStore" />
			<role name="Adapter" element="com.hp.hpl.jena.mem.faster.GraphMemFaster$GraphMemFasterStatisticsHandler" />
			<role name="adaptee" element="com.hp.hpl.jena.mem.faster.GraphMemFaster$GraphMemFasterStatisticsHandler::store:com.hp.hpl.jena.mem.faster.FasterTripleStore" />
			<role name="Request()" element="com.hp.hpl.jena.mem.faster.GraphMemFaster$GraphMemFasterStatisticsHandler::getStatistic(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):long" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.graph.query.StageElement$FindTriples" />
			<role name="Adaptee" element="com.hp.hpl.jena.graph.query.Applyer" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.query.StageElement$FindTriples::finder:com.hp.hpl.jena.graph.query.Applyer" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.StageElement$FindTriples::run(com.hp.hpl.jena.graph.query.Domain):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter" />
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPBindingEnvironment" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPBindingEnvironment::interpreter:com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPBindingEnvironment::bind(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.RDFReaderF" />
			<role name="Adapter" element="com.hp.hpl.jena.rdf.model.impl.ModelCom" />
			<role name="adaptee" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::readerFactory:com.hp.hpl.jena.rdf.model.RDFReaderF" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::read(java.lang.String):com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::read(java.io.Reader, java.lang.String):com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::read(java.io.InputStream, java.lang.String):com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::read(java.lang.String, java.lang.String):com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::read(java.io.Reader, java.lang.String, java.lang.String):com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::read(java.io.InputStream, java.lang.String, java.lang.String):com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.Node" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource::node:com.hp.hpl.jena.graph.Node" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource::mightBeEqual(com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.rulesys.Rule" />
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.RuleDerivation" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.RuleDerivation::rule:com.hp.hpl.jena.reasoner.rulesys.Rule" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.RuleDerivation::toString():java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.TripleBoundary" />
			<role name="Adapter" element="com.hp.hpl.jena.rdf.model.StatementTripleBoundary" />
			<role name="adaptee" element="com.hp.hpl.jena.rdf.model.StatementTripleBoundary::tb:com.hp.hpl.jena.graph.TripleBoundary" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.StatementTripleBoundary::stopAt(com.hp.hpl.jena.rdf.model.Statement):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.Statement" />
			<role name="Adapter" element="com.hp.hpl.jena.rdf.model.impl.ContNodeIteratorImpl" />
			<role name="adaptee" element="com.hp.hpl.jena.rdf.model.impl.ContNodeIteratorImpl::recent:com.hp.hpl.jena.rdf.model.Statement" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ContNodeIteratorImpl::next():com.hp.hpl.jena.rdf.model.RDFNode" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ContNodeIteratorImpl::remove():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.Statement" />
			<role name="Adapter" element="com.hp.hpl.jena.rdf.model.impl.SeqNodeIteratorImpl" />
			<role name="adaptee" element="com.hp.hpl.jena.rdf.model.impl.SeqNodeIteratorImpl::stmt:com.hp.hpl.jena.rdf.model.Statement" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.SeqNodeIteratorImpl::next():com.hp.hpl.jena.rdf.model.RDFNode" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.SeqNodeIteratorImpl::remove():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.Graph" />
			<role name="Adapter" element="com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter" />
			<role name="adaptee" element="com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter::graph:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter::triple(int, int, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter::prefix(int, int, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.Graph" />
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.FGraph" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.FGraph::graph:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.FGraph::find(com.hp.hpl.jena.reasoner.TriplePattern):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.FGraph::findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.Finder):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.FGraph::contains(com.hp.hpl.jena.reasoner.TriplePattern):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.Node" />
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache::directPredicate:com.hp.hpl.jena.graph.Node" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache::closedPredicate:com.hp.hpl.jena.graph.Node" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache::findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.Finder):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache::find(com.hp.hpl.jena.reasoner.TriplePattern):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.Node" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.query.Fixed" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.query.Fixed::value:com.hp.hpl.jena.graph.Node" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.Fixed::match(com.hp.hpl.jena.graph.query.Domain, com.hp.hpl.jena.graph.Node):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.query.QueryNode" />
			<role name="Adapter" element="com.hp.hpl.jena.mem.MatchOrBind$1" />
			<role name="adaptee" element="com.hp.hpl.jena.mem.MatchOrBind$1::S:com.hp.hpl.jena.graph.query.QueryNode" />
			<role name="adaptee" element="com.hp.hpl.jena.mem.MatchOrBind$1::P:com.hp.hpl.jena.graph.query.QueryNode" />
			<role name="Request()" element="com.hp.hpl.jena.mem.MatchOrBind$1::matches(com.hp.hpl.jena.graph.Triple):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.query.QueryNode" />
			<role name="Adapter" element="com.hp.hpl.jena.mem.MatchOrBind$2" />
			<role name="adaptee" element="com.hp.hpl.jena.mem.MatchOrBind$2::P:com.hp.hpl.jena.graph.query.QueryNode" />
			<role name="adaptee" element="com.hp.hpl.jena.mem.MatchOrBind$2::O:com.hp.hpl.jena.graph.query.QueryNode" />
			<role name="Request()" element="com.hp.hpl.jena.mem.MatchOrBind$2::matches(com.hp.hpl.jena.graph.Triple):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="Adapter" element="com.hp.hpl.jena.rdf.arp.JenaHandler" />
			<role name="adaptee" element="com.hp.hpl.jena.rdf.arp.JenaHandler::prefixMapping:com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.JenaHandler::startPrefixMapping(java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.Container" />
			<role name="Adapter" element="com.hp.hpl.jena.rdf.model.impl.ContNodeIteratorImpl" />
			<role name="adaptee" element="com.hp.hpl.jena.rdf.model.impl.ContNodeIteratorImpl::cont:com.hp.hpl.jena.rdf.model.Container" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ContNodeIteratorImpl::remove():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
			<role name="Adapter" element="com.hp.hpl.jena.rdf.model.impl.NTripleWriter" />
			<role name="adaptee" element="com.hp.hpl.jena.rdf.model.impl.NTripleWriter::errorHandler:com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.NTripleWriter::write(com.hp.hpl.jena.rdf.model.Model, java.io.OutputStream, java.lang.String):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.NTripleWriter::write(com.hp.hpl.jena.rdf.model.Model, java.io.Writer, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.Resource" />
			<role name="Adapter" element="com.hp.hpl.jena.ontology.impl.OntModelImpl$RdfTypeTestFn" />
			<role name="adaptee" element="com.hp.hpl.jena.ontology.impl.OntModelImpl$RdfTypeTestFn::m_type:com.hp.hpl.jena.rdf.model.Resource" />
			<role name="Request()" element="com.hp.hpl.jena.ontology.impl.OntModelImpl$RdfTypeTestFn::reduce(com.hp.hpl.jena.rdf.model.RDFNode, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.Triple" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.impl.GraphAddList" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.impl.GraphAddList::match:com.hp.hpl.jena.graph.Triple" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.GraphAddList::add(com.hp.hpl.jena.graph.Triple):void" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator" />
			<role name="Adaptee" element="com.hp.hpl.jena.graph.Node" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator::m_stmtURI:com.hp.hpl.jena.graph.Node" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator::m_matchObj:com.hp.hpl.jena.graph.Node" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator::m_subjNode:com.hp.hpl.jena.graph.Node" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator::m_predNode:com.hp.hpl.jena.graph.Node" />
			<role name="adaptee" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator::m_objNode:com.hp.hpl.jena.graph.Node" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator::extractRow():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.Reifier" />
			<role name="Adapter" element="com.hp.hpl.jena.mem.faster.GraphMemFaster$GraphMemFasterStatisticsHandler" />
			<role name="adaptee" element="com.hp.hpl.jena.mem.faster.GraphMemFaster$GraphMemFasterStatisticsHandler::reifier:com.hp.hpl.jena.graph.Reifier" />
			<role name="Request()" element="com.hp.hpl.jena.mem.faster.GraphMemFaster$GraphMemFasterStatisticsHandler::getStatistic(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):long" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier" />
			<role name="Adaptee" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier$GetReifier" />
			<role name="adaptee" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::deductions:com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier$GetReifier" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::allNodes():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::allNodes(com.hp.hpl.jena.graph.Triple):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::find(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::findEither(com.hp.hpl.jena.graph.TripleMatch, boolean):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::findExposed(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::hasTriple(com.hp.hpl.jena.graph.Node):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::hasTriple(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::size():int" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.query.IndexValues" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.query.Expression$Valof" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.query.Expression$Valof::dom:com.hp.hpl.jena.graph.query.IndexValues" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.Expression$Valof::get(java.lang.String):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adapter" element="com.hp.hpl.jena.graph.query.StageElement$RunValuatorSet" />
			<role name="Adaptee" element="com.hp.hpl.jena.graph.query.ValuatorSet" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.query.StageElement$RunValuatorSet::s:com.hp.hpl.jena.graph.query.ValuatorSet" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.StageElement$RunValuatorSet::run(com.hp.hpl.jena.graph.query.Domain):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.query.Pipe" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.query.StageElement$PutBindings" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.query.StageElement$PutBindings::sink:com.hp.hpl.jena.graph.query.Pipe" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.StageElement$PutBindings::run(com.hp.hpl.jena.graph.query.Domain):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.graph.query.VariableIndexes" />
			<role name="Adapter" element="com.hp.hpl.jena.graph.query.Expression$Valof" />
			<role name="adaptee" element="com.hp.hpl.jena.graph.query.Expression$Valof::map:com.hp.hpl.jena.graph.query.VariableIndexes" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.Expression$Valof::get(java.lang.String):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.Property" />
			<role name="Adapter" element="com.hp.hpl.jena.rdf.model.SimpleSelector" />
			<role name="adaptee" element="com.hp.hpl.jena.rdf.model.SimpleSelector::predicate:com.hp.hpl.jena.rdf.model.Property" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.SimpleSelector::test(com.hp.hpl.jena.rdf.model.Statement):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.hp.hpl.jena.rdf.model.Resource" />
			<role name="Adapter" element="com.hp.hpl.jena.rdf.model.SimpleSelector" />
			<role name="adaptee" element="com.hp.hpl.jena.rdf.model.SimpleSelector::subject:com.hp.hpl.jena.rdf.model.Resource" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.SimpleSelector::test(com.hp.hpl.jena.rdf.model.Statement):boolean" />
		</instance>
	</pattern>
	<pattern name="Command" />
	<pattern name="Composite">
		<instance>
			<role name="Component" element="com.hp.hpl.jena.graph.GraphListener" />
			<role name="Composite" element="com.hp.hpl.jena.graph.impl.SimpleEventManager" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.SimpleEventManager::notifyAddTriple(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.SimpleEventManager::notifyAddArray(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.SimpleEventManager::notifyAddList(com.hp.hpl.jena.graph.Graph, java.util.List):void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.SimpleEventManager::notifyAddGraph(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph):void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.SimpleEventManager::notifyDeleteTriple(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.SimpleEventManager::notifyDeleteArray(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.SimpleEventManager::notifyDeleteList(com.hp.hpl.jena.graph.Graph, java.util.List):void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.SimpleEventManager::notifyDeleteGraph(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph):void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.SimpleEventManager::notifyEvent(com.hp.hpl.jena.graph.Graph, java.lang.Object):void" />
		</instance>
	</pattern>
	<pattern name="Decorator">
		<instance>
			<role name="Component" element="com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
			<role name="Decorator" element="com.hp.hpl.jena.graph.query.regexptrees.Paren" />
			<role name="component" element="com.hp.hpl.jena.graph.query.regexptrees.Paren::operand:com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.query.regexptrees.Paren::equals(java.lang.Object):boolean" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.query.regexptrees.Paren::hashCode():int" />
		</instance>
		<instance>
			<role name="Component" element="com.hp.hpl.jena.graph.query.StageElement" />
			<role name="Decorator" element="com.hp.hpl.jena.graph.query.StageElement$RunValuatorSet" />
			<role name="component" element="com.hp.hpl.jena.graph.query.StageElement$RunValuatorSet::next:com.hp.hpl.jena.graph.query.StageElement" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.query.StageElement$RunValuatorSet::run(com.hp.hpl.jena.graph.query.Domain):void" />
		</instance>
		<instance>
			<role name="Component" element="com.hp.hpl.jena.graph.Graph" />
			<role name="Decorator" element="com.hp.hpl.jena.graph.compose.Delta" />
			<role name="component" element="com.hp.hpl.jena.graph.compose.Delta::base:com.hp.hpl.jena.graph.Graph" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.compose.Delta::close():void" />
		</instance>
		<instance>
			<role name="Component" element="com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Decorator" element="com.hp.hpl.jena.util.iterator.LazyIterator" />
			<role name="component" element="com.hp.hpl.jena.util.iterator.LazyIterator::it:com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Operation()" element="com.hp.hpl.jena.util.iterator.LazyIterator::filterKeep(com.hp.hpl.jena.util.iterator.Filter):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Operation()" element="com.hp.hpl.jena.util.iterator.LazyIterator::filterDrop(com.hp.hpl.jena.util.iterator.Filter):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Component" element="com.hp.hpl.jena.graph.query.Expression" />
			<role name="Decorator" element="com.hp.hpl.jena.graph.query.Dyadic" />
			<role name="component" element="com.hp.hpl.jena.graph.query.Dyadic::L:com.hp.hpl.jena.graph.query.Expression" />
			<role name="component" element="com.hp.hpl.jena.graph.query.Dyadic::R:com.hp.hpl.jena.graph.query.Expression" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.query.Dyadic::prepare(com.hp.hpl.jena.graph.query.VariableIndexes):com.hp.hpl.jena.graph.query.Valuator" />
		</instance>
		<instance>
			<role name="Component" element="com.hp.hpl.jena.graph.BulkUpdateHandler" />
			<role name="Decorator" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler" />
			<role name="component" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::base:com.hp.hpl.jena.graph.BulkUpdateHandler" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::add(com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::add(java.util.List):void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::add(com.hp.hpl.jena.graph.Graph, boolean):void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::add(com.hp.hpl.jena.graph.Graph):void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::delete(com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::delete(java.util.List):void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::delete(com.hp.hpl.jena.graph.Graph):void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::delete(com.hp.hpl.jena.graph.Graph, boolean):void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::removeAll():void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::remove(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):void" />
		</instance>
		<instance>
			<role name="Component" element="com.hp.hpl.jena.rdf.arp.StatementHandler" />
			<role name="Decorator" element="com.hp.hpl.jena.rdf.arp.NTriple$TwoSH" />
			<role name="component" element="com.hp.hpl.jena.rdf.arp.NTriple$TwoSH::a:com.hp.hpl.jena.rdf.arp.StatementHandler" />
			<role name="component" element="com.hp.hpl.jena.rdf.arp.NTriple$TwoSH::b:com.hp.hpl.jena.rdf.arp.StatementHandler" />
			<role name="Operation()" element="com.hp.hpl.jena.rdf.arp.NTriple$TwoSH::statement(com.hp.hpl.jena.rdf.arp.AResource, com.hp.hpl.jena.rdf.arp.AResource, com.hp.hpl.jena.rdf.arp.AResource):void" />
			<role name="Operation()" element="com.hp.hpl.jena.rdf.arp.NTriple$TwoSH::statement(com.hp.hpl.jena.rdf.arp.AResource, com.hp.hpl.jena.rdf.arp.AResource, com.hp.hpl.jena.rdf.arp.ALiteral):void" />
		</instance>
		<instance>
			<role name="Component" element="com.hp.hpl.jena.reasoner.ReasonerFactory" />
			<role name="Decorator" element="com.hp.hpl.jena.reasoner.rulesys.impl.WrappedReasonerFactory" />
			<role name="component" element="com.hp.hpl.jena.reasoner.rulesys.impl.WrappedReasonerFactory::factory:com.hp.hpl.jena.reasoner.ReasonerFactory" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.impl.WrappedReasonerFactory::create(com.hp.hpl.jena.rdf.model.Resource):com.hp.hpl.jena.reasoner.Reasoner" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.impl.WrappedReasonerFactory::getCapabilities():com.hp.hpl.jena.rdf.model.Model" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.impl.WrappedReasonerFactory::getURI():java.lang.String" />
		</instance>
		<instance>
			<role name="Component" element="com.hp.hpl.jena.graph.Reifier" />
			<role name="Decorator" element="com.hp.hpl.jena.graph.impl.WrappedReifier" />
			<role name="component" element="com.hp.hpl.jena.graph.impl.WrappedReifier::base:com.hp.hpl.jena.graph.Reifier" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedReifier::getStyle():com.hp.hpl.jena.shared.ReificationStyle" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedReifier::find(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedReifier::findExposed(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedReifier::findEither(com.hp.hpl.jena.graph.TripleMatch, boolean):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedReifier::size():int" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedReifier::reifyAs(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple):com.hp.hpl.jena.graph.Node" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedReifier::hasTriple(com.hp.hpl.jena.graph.Node):boolean" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedReifier::hasTriple(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedReifier::allNodes():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedReifier::allNodes(com.hp.hpl.jena.graph.Triple):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedReifier::remove(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedReifier::remove(com.hp.hpl.jena.graph.Triple):void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedReifier::handledAdd(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedReifier::handledRemove(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.WrappedReifier::close():void" />
		</instance>
		<instance>
			<role name="Component" element="com.hp.hpl.jena.graph.Reifier" />
			<role name="Decorator" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier" />
			<role name="component" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::base:com.hp.hpl.jena.graph.Reifier" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::allNodes():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::allNodes(com.hp.hpl.jena.graph.Triple):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::close():void" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::find(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::findEither(com.hp.hpl.jena.graph.TripleMatch, boolean):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::findExposed(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::getStyle():com.hp.hpl.jena.shared.ReificationStyle" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::handledAdd(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::handledRemove(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::hasTriple(com.hp.hpl.jena.graph.Node):boolean" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::hasTriple(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::reifyAs(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple):com.hp.hpl.jena.graph.Node" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::remove(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::remove(com.hp.hpl.jena.graph.Triple):void" />
		</instance>
		<instance>
			<role name="Component" element="com.hp.hpl.jena.reasoner.Finder" />
			<role name="Decorator" element="com.hp.hpl.jena.reasoner.FinderUtil$Cascade" />
			<role name="component" element="com.hp.hpl.jena.reasoner.FinderUtil$Cascade::second:com.hp.hpl.jena.reasoner.Finder" />
			<role name="component" element="com.hp.hpl.jena.reasoner.FinderUtil$Cascade::first:com.hp.hpl.jena.reasoner.Finder" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.FinderUtil$Cascade::find(com.hp.hpl.jena.reasoner.TriplePattern):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Component" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode" />
			<role name="Decorator" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEQueue" />
			<role name="component" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEQueue::continuation:com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode" />
			<role name="Operation()" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEQueue::fire(com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector, boolean):void" />
		</instance>
	</pattern>
	<pattern name="Observer">
		<instance>
			<role name="Observer" element="com.hp.hpl.jena.graph.Graph" />
			<role name="Subject" element="com.hp.hpl.jena.graph.compose.Polyadic" />
			<role name="Notify()" element="com.hp.hpl.jena.graph.compose.Polyadic::close():void" />
		</instance>
		<instance>
			<role name="Observer" element="com.hp.hpl.jena.util.Locator" />
			<role name="Subject" element="com.hp.hpl.jena.util.FileManager" />
			<role name="Notify()" element="com.hp.hpl.jena.util.FileManager::openNoMapOrNull(java.lang.String):com.hp.hpl.jena.util.TypedStream" />
		</instance>
	</pattern>
	<pattern name="State">
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.arp.impl.XMLHandler" />
			<role name="State" element="com.hp.hpl.jena.rdf.arp.states.FrameI" />
			<role name="state" element="com.hp.hpl.jena.rdf.arp.impl.XMLHandler::frame:com.hp.hpl.jena.rdf.arp.states.FrameI" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.impl.XMLHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.impl.XMLHandler::endElement(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.impl.XMLHandler::characters(char[], int, int):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.impl.XMLHandler::comment(char[], int, int):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.impl.XMLHandler::processingInstruction(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.impl.XMLHandler::afterParse():void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="Context" element="jena.rdfcat" />
			<role name="state" element="jena.rdfcat::m_model:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="jena.rdfcat::go(java.lang.String[]):void" />
			<role name="Request()" element="jena.rdfcat::readInput(java.lang.String):void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="Context" element="com.hp.hpl.jena.reasoner.ReasonerRegistry" />
			<role name="state" element="com.hp.hpl.jena.reasoner.ReasonerRegistry::allDescriptions:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.ReasonerRegistry::register(com.hp.hpl.jena.reasoner.ReasonerFactory):void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.ReasonerRegistry::register(java.lang.String, com.hp.hpl.jena.reasoner.ReasonerFactory):void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.ReasonerRegistry::getDescription(java.lang.String):com.hp.hpl.jena.rdf.model.Resource" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="Context" element="com.hp.hpl.jena.vocabulary.DCTerms" />
			<role name="state" element="com.hp.hpl.jena.vocabulary.DCTerms::m_model:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.vocabulary.DCTerms::&lt;clinit&gt;():void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="Context" element="com.hp.hpl.jena.vocabulary.DCTypes" />
			<role name="state" element="com.hp.hpl.jena.vocabulary.DCTypes::m_model:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.vocabulary.DCTypes::&lt;clinit&gt;():void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="Context" element="com.hp.hpl.jena.vocabulary.OWL" />
			<role name="state" element="com.hp.hpl.jena.vocabulary.OWL::m_model:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.vocabulary.OWL::&lt;clinit&gt;():void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="Context" element="com.hp.hpl.jena.vocabulary.OWLResults" />
			<role name="state" element="com.hp.hpl.jena.vocabulary.OWLResults::m_model:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.vocabulary.OWLResults::&lt;clinit&gt;():void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="Context" element="com.hp.hpl.jena.vocabulary.OWLTest" />
			<role name="state" element="com.hp.hpl.jena.vocabulary.OWLTest::m_model:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.vocabulary.OWLTest::&lt;clinit&gt;():void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="Context" element="com.hp.hpl.jena.vocabulary.OntDocManagerVocab" />
			<role name="state" element="com.hp.hpl.jena.vocabulary.OntDocManagerVocab::m_model:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.vocabulary.OntDocManagerVocab::&lt;clinit&gt;():void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="Context" element="com.hp.hpl.jena.vocabulary.RDFTest" />
			<role name="state" element="com.hp.hpl.jena.vocabulary.RDFTest::m_model:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.vocabulary.RDFTest::&lt;clinit&gt;():void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="Context" element="com.hp.hpl.jena.vocabulary.TestManifest" />
			<role name="state" element="com.hp.hpl.jena.vocabulary.TestManifest::m_model:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.vocabulary.TestManifest::&lt;clinit&gt;():void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="Context" element="com.hp.hpl.jena.vocabulary.TestManifestX" />
			<role name="state" element="com.hp.hpl.jena.vocabulary.TestManifestX::m_model:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.vocabulary.TestManifestX::&lt;clinit&gt;():void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="Context" element="com.hp.hpl.jena.vocabulary.VCARD" />
			<role name="state" element="com.hp.hpl.jena.vocabulary.VCARD::m:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.vocabulary.VCARD::&lt;clinit&gt;():void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="Context" element="com.hp.hpl.jena.xmloutput.impl.Unparser" />
			<role name="state" element="com.hp.hpl.jena.xmloutput.impl.Unparser::model:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.xmloutput.impl.Unparser::addTypeNameSpaces():void" />
			<role name="Request()" element="com.hp.hpl.jena.xmloutput.impl.Unparser::wantReification(com.hp.hpl.jena.rdf.model.Statement, com.hp.hpl.jena.rdf.model.Resource):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.xmloutput.impl.Unparser::findInfiniteCycles():void" />
			<role name="Request()" element="com.hp.hpl.jena.xmloutput.impl.Unparser::pleasingTypeIterator():java.util.Iterator" />
			<role name="Request()" element="com.hp.hpl.jena.xmloutput.impl.Unparser::listSubjects():java.util.Iterator" />
			<role name="Request()" element="com.hp.hpl.jena.xmloutput.impl.Unparser::modelListSubjects():com.hp.hpl.jena.rdf.model.ResIterator" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.impl.WrappedGraph" />
			<role name="State" element="com.hp.hpl.jena.graph.Graph" />
			<role name="state" element="com.hp.hpl.jena.graph.impl.WrappedGraph::base:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::dependsOn(com.hp.hpl.jena.graph.Graph):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::queryHandler():com.hp.hpl.jena.graph.query.QueryHandler" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::getTransactionHandler():com.hp.hpl.jena.graph.TransactionHandler" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::getBulkUpdateHandler():com.hp.hpl.jena.graph.BulkUpdateHandler" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::getStatisticsHandler():com.hp.hpl.jena.graph.GraphStatisticsHandler" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::getCapabilities():com.hp.hpl.jena.graph.Capabilities" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::getPrefixMapping():com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::delete(com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::find(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::find(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::isIsomorphicWith(com.hp.hpl.jena.graph.Graph):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::contains(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::contains(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::close():void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::isClosed():boolean" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::isEmpty():boolean" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::size():int" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedGraph::performDelete(com.hp.hpl.jena.graph.Triple):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph" />
			<role name="State" element="com.hp.hpl.jena.graph.Graph" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph::safeDeductions:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph::createDeductionsGraph():com.hp.hpl.jena.graph.Graph" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="Context" element="com.hp.hpl.jena.ontology.OntDocumentManager" />
			<role name="state" element="com.hp.hpl.jena.ontology.OntDocumentManager::m_prefixMap:com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="Request()" element="com.hp.hpl.jena.ontology.OntDocumentManager::setDefaultPrefixMappings():void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.Rule$Parser" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.Rule$Parser::prefixMapping:com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.Rule$Parser::registerPrefix(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.Rule$Parser::registerPrefixMap(java.util.Map):void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.Rule$Parser::getPrefixMap():java.util.Map" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.Rule$Parser::parseNode(java.lang.String):com.hp.hpl.jena.graph.Node" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="Context" element="com.hp.hpl.jena.util.PrintUtil" />
			<role name="state" element="com.hp.hpl.jena.util.PrintUtil::prefixMapping:com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="Request()" element="com.hp.hpl.jena.util.PrintUtil::registerPrefix(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="com.hp.hpl.jena.util.PrintUtil::registerPrefixMap(java.util.Map):void" />
			<role name="Request()" element="com.hp.hpl.jena.util.PrintUtil::removePrefix(java.lang.String):void" />
			<role name="Request()" element="com.hp.hpl.jena.util.PrintUtil::removePrefixMap(java.util.Map):void" />
			<role name="Request()" element="com.hp.hpl.jena.util.PrintUtil::expandQname(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.model.impl.StatementImpl" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Resource" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.impl.StatementImpl::subject:com.hp.hpl.jena.rdf.model.Resource" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.StatementImpl::sameAs(com.hp.hpl.jena.rdf.model.Statement):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.Resource" />
			<role name="Context" element="com.hp.hpl.jena.ontology.OntDocumentManager" />
			<role name="state" element="com.hp.hpl.jena.ontology.OntDocumentManager::DOC_MGR_POLICY:com.hp.hpl.jena.rdf.model.Resource" />
			<role name="state" element="com.hp.hpl.jena.ontology.OntDocumentManager::ONTOLOGY_SPEC:com.hp.hpl.jena.rdf.model.Resource" />
			<role name="Request()" element="com.hp.hpl.jena.ontology.OntDocumentManager::processMetadata(com.hp.hpl.jena.rdf.model.Model):void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.Resource" />
			<role name="Context" element="com.hp.hpl.jena.assembler.assemblers.AssemblerGroup$Frame" />
			<role name="state" element="com.hp.hpl.jena.assembler.assemblers.AssemblerGroup$Frame::root:com.hp.hpl.jena.rdf.model.Resource" />
			<role name="state" element="com.hp.hpl.jena.assembler.assemblers.AssemblerGroup$Frame::type:com.hp.hpl.jena.rdf.model.Resource" />
			<role name="Request()" element="com.hp.hpl.jena.assembler.assemblers.AssemblerGroup$Frame::same(com.hp.hpl.jena.assembler.assemblers.AssemblerGroup$Frame):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.graph.Node" />
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache$NodePair" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache$NodePair::first:com.hp.hpl.jena.graph.Node" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache$NodePair::second:com.hp.hpl.jena.graph.Node" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache$NodePair::equals(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Context" element="jena.schemagen" />
			<role name="State" element="jena.schemagen$SchemagenOptions" />
			<role name="state" element="jena.schemagen::m_options:jena.schemagen$SchemagenOptions" />
			<role name="Request()" element="jena.schemagen::go(jena.schemagen$SchemagenOptions):void" />
			<role name="Request()" element="jena.schemagen::addIncludes():void" />
			<role name="Request()" element="jena.schemagen::determineLanguage():void" />
			<role name="Request()" element="jena.schemagen::selectInput():void" />
			<role name="Request()" element="jena.schemagen::selectOutput():void" />
			<role name="Request()" element="jena.schemagen::processHeader():void" />
			<role name="Request()" element="jena.schemagen::processFooter():void" />
			<role name="Request()" element="jena.schemagen::setGlobalReplacements():void" />
			<role name="Request()" element="jena.schemagen::addReplacementPattern(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="jena.schemagen::getClassName():java.lang.String" />
			<role name="Request()" element="jena.schemagen::useOntology():boolean" />
			<role name="Request()" element="jena.schemagen::noComments():boolean" />
			<role name="Request()" element="jena.schemagen::includeSource():boolean" />
			<role name="Request()" element="jena.schemagen::writeClassDeclaration():void" />
			<role name="Request()" element="jena.schemagen::writeInitialDeclarations():void" />
			<role name="Request()" element="jena.schemagen::writeModelDeclaration():void" />
			<role name="Request()" element="jena.schemagen::getOptionNamespace():java.lang.String" />
			<role name="Request()" element="jena.schemagen::writeProperties():void" />
			<role name="Request()" element="jena.schemagen::writeObjectProperties():void" />
			<role name="Request()" element="jena.schemagen::writeDatatypeProperties():void" />
			<role name="Request()" element="jena.schemagen::writeAnnotationProperties():void" />
			<role name="Request()" element="jena.schemagen::writeRDFProperties(boolean):void" />
			<role name="Request()" element="jena.schemagen::writeClasses():void" />
			<role name="Request()" element="jena.schemagen::writeOntClasses():void" />
			<role name="Request()" element="jena.schemagen::writeRDFClasses():void" />
			<role name="Request()" element="jena.schemagen::writeIndividuals():void" />
			<role name="Request()" element="jena.schemagen::writeOntIndividuals():void" />
			<role name="Request()" element="jena.schemagen::writeRDFIndividuals():void" />
			<role name="Request()" element="jena.schemagen::filter(com.hp.hpl.jena.rdf.model.Resource):boolean" />
			<role name="Request()" element="jena.schemagen::getValueName(com.hp.hpl.jena.rdf.model.Resource, java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner" />
			<role name="State" element="com.hp.hpl.jena.reasoner.InfGraph" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner::preload:com.hp.hpl.jena.reasoner.InfGraph" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner::getPreload():com.hp.hpl.jena.reasoner.InfGraph" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.vocabulary.OntEventsVocab" />
			<role name="State" element="com.hp.hpl.jena.ontology.OntModel" />
			<role name="state" element="com.hp.hpl.jena.vocabulary.OntEventsVocab::m_model:com.hp.hpl.jena.ontology.OntModel" />
			<role name="Request()" element="com.hp.hpl.jena.vocabulary.OntEventsVocab::&lt;clinit&gt;():void" />
		</instance>
		<instance>
			<role name="Context" element="jena.schemagen" />
			<role name="State" element="com.hp.hpl.jena.ontology.OntModel" />
			<role name="state" element="jena.schemagen::m_source:com.hp.hpl.jena.ontology.OntModel" />
			<role name="Request()" element="jena.schemagen::determineLanguage():void" />
			<role name="Request()" element="jena.schemagen::writeSource():void" />
			<role name="Request()" element="jena.schemagen::getDefaultPrefixNamespace():java.lang.String" />
			<role name="Request()" element="jena.schemagen::getOntologyElementNamespace():java.lang.String" />
			<role name="Request()" element="jena.schemagen::writeObjectProperties():void" />
			<role name="Request()" element="jena.schemagen::writeDatatypeProperties():void" />
			<role name="Request()" element="jena.schemagen::writeAnnotationProperties():void" />
			<role name="Request()" element="jena.schemagen::writeOntClasses():void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.enhanced.EnhGraph" />
			<role name="State" element="com.hp.hpl.jena.graph.Graph" />
			<role name="state" element="com.hp.hpl.jena.enhanced.EnhGraph::graph:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.enhanced.EnhGraph::isIsomorphicWith(com.hp.hpl.jena.enhanced.EnhGraph):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine" />
			<role name="State" element="com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine::infGraph:com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine::addSet(com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext):void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine::findAndProcessAxioms():void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine::matchClauseList(java.util.List, com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine" />
			<role name="State" element="com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine::infGraph:com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine::addTriple(com.hp.hpl.jena.graph.Triple, boolean):void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine::deleteTriple(com.hp.hpl.jena.graph.Triple, boolean):void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine::inject(com.hp.hpl.jena.graph.Triple, boolean):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph" />
			<role name="State" element="com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph::engine:com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph::setRuleStore(java.lang.Object):void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph::prepare():void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph::preloadDeductions(com.hp.hpl.jena.graph.Graph):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph::performAdd(com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph::setDerivationLogging(boolean):void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph::shouldTrace():boolean" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph::getNRulesFired():long" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.impl.LiteralLabelImpl" />
			<role name="State" element="com.hp.hpl.jena.datatypes.RDFDatatype" />
			<role name="state" element="com.hp.hpl.jena.graph.impl.LiteralLabelImpl::dtype:com.hp.hpl.jena.datatypes.RDFDatatype" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.LiteralLabelImpl::setLiteralLabel_2(java.lang.Object, java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.LiteralLabelImpl::setValue(java.lang.String):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.LiteralLabelImpl::normalize():void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.LiteralLabelImpl::toString(boolean):java.lang.String" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.LiteralLabelImpl::getLexicalForm():java.lang.String" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.LiteralLabelImpl::getDatatypeURI():java.lang.String" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.LiteralLabelImpl::isTypedLiteralSameValueAsOther(com.hp.hpl.jena.graph.impl.LiteralLabel):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.LiteralLabelImpl::hashCode():int" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler" />
			<role name="State" element="com.hp.hpl.jena.graph.GraphEventManager" />
			<role name="state" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::manager:com.hp.hpl.jena.graph.GraphEventManager" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::add(java.util.Iterator):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.WrappedBulkUpdateHandler::delete(java.util.Iterator):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.db.impl.DBBulkUpdateHandler" />
			<role name="State" element="com.hp.hpl.jena.graph.GraphEventManager" />
			<role name="state" element="com.hp.hpl.jena.db.impl.DBBulkUpdateHandler::manager:com.hp.hpl.jena.graph.GraphEventManager" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBBulkUpdateHandler::add(java.util.Iterator):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBBulkUpdateHandler::delete(java.util.Iterator):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler" />
			<role name="State" element="com.hp.hpl.jena.graph.GraphEventManager" />
			<role name="state" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler::manager:com.hp.hpl.jena.graph.GraphEventManager" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler::addIterator(java.util.Iterator, boolean):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler::deleteIterator(java.util.Iterator, boolean):void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.graph.Graph" />
			<role name="Context" element="com.hp.hpl.jena.graph.GraphExtract$Extraction" />
			<role name="state" element="com.hp.hpl.jena.graph.GraphExtract$Extraction::extractFrom:com.hp.hpl.jena.graph.Graph" />
			<role name="state" element="com.hp.hpl.jena.graph.GraphExtract$Extraction::toUpdate:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.graph.GraphExtract$Extraction::extractInto(com.hp.hpl.jena.graph.Node):void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.graph.Graph" />
			<role name="Context" element="com.hp.hpl.jena.graph.impl.GraphMatcher" />
			<role name="state" element="com.hp.hpl.jena.graph.impl.GraphMatcher::m:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.GraphMatcher::match(com.hp.hpl.jena.graph.impl.GraphMatcher):com.hp.hpl.jena.graph.Node[][]" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.GraphMatcher::prepare(com.hp.hpl.jena.graph.Graph):int" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.enhanced.EnhNode" />
			<role name="State" element="com.hp.hpl.jena.graph.Node" />
			<role name="state" element="com.hp.hpl.jena.enhanced.EnhNode::node:com.hp.hpl.jena.graph.Node" />
			<role name="Request()" element="com.hp.hpl.jena.enhanced.EnhNode::equals(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="Context" element="com.hp.hpl.jena.graph.impl.FileGraph" />
			<role name="state" element="com.hp.hpl.jena.graph.impl.FileGraph::model:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.FileGraph::readModelFrom(com.hp.hpl.jena.rdf.model.Model, boolean, java.io.File):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.FileGraph::saveContents(java.io.File):void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.arp.StatementHandler" />
			<role name="Context" element="com.hp.hpl.jena.rdf.arp.impl.XMLHandler" />
			<role name="state" element="com.hp.hpl.jena.rdf.arp.impl.XMLHandler::badStatementHandler:com.hp.hpl.jena.rdf.arp.StatementHandler" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.impl.XMLHandler::triple(com.hp.hpl.jena.rdf.arp.impl.ANode, com.hp.hpl.jena.rdf.arp.impl.ANode, com.hp.hpl.jena.rdf.arp.impl.ANode):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="State" element="com.hp.hpl.jena.reasoner.ReasonerFactory" />
			<role name="state" element="com.hp.hpl.jena.ontology.OntModelSpec::m_rFactory:com.hp.hpl.jena.reasoner.ReasonerFactory" />
			<role name="Request()" element="com.hp.hpl.jena.ontology.OntModelSpec::getReasoner():com.hp.hpl.jena.reasoner.Reasoner" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.graph.impl.GraphWithPerform" />
			<role name="Context" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler" />
			<role name="state" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler::graph:com.hp.hpl.jena.graph.impl.GraphWithPerform" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler::add(com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler::add(java.util.List, boolean):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler::delete(com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler::delete(java.util.List, boolean):void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource" />
			<role name="Context" element="com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement" />
			<role name="state" element="com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement::subj:com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource" />
			<role name="state" element="com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement::pred:com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource" />
			<role name="state" element="com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement::obj:com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement::myHashCode(com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource):int" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement::contextualEquals(com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource, com.hp.hpl.jena.graph.impl.GraphMatcher$AnonStatement, com.hp.hpl.jena.graph.impl.GraphMatcher$AnonResource):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.assembler.assemblers.AssemblerGroup$ExpandingAssemblerGroup" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="state" element="com.hp.hpl.jena.assembler.assemblers.AssemblerGroup$ExpandingAssemblerGroup::implementTypes:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.assembler.assemblers.AssemblerGroup$ExpandingAssemblerGroup::open(com.hp.hpl.jena.assembler.Assembler, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.assembler.Mode):java.lang.Object" />
			<role name="Request()" element="com.hp.hpl.jena.assembler.assemblers.AssemblerGroup$ExpandingAssemblerGroup::implementsTypes():java.util.Set" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter" />
			<role name="State" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreterContext" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter::iContext:com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreterContext" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter::run():com.hp.hpl.jena.reasoner.rulesys.impl.StateFlag" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.TriplePattern" />
			<role name="State" element="com.hp.hpl.jena.graph.Node" />
			<role name="state" element="com.hp.hpl.jena.reasoner.TriplePattern::subject:com.hp.hpl.jena.graph.Node" />
			<role name="state" element="com.hp.hpl.jena.reasoner.TriplePattern::predicate:com.hp.hpl.jena.graph.Node" />
			<role name="state" element="com.hp.hpl.jena.reasoner.TriplePattern::object:com.hp.hpl.jena.graph.Node" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.TriplePattern::compatibleWith(com.hp.hpl.jena.reasoner.TriplePattern):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.TriplePattern::subsumes(com.hp.hpl.jena.reasoner.TriplePattern):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter" />
			<role name="State" element="com.hp.hpl.jena.reasoner.rulesys.RuleContext" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter::context:com.hp.hpl.jena.reasoner.rulesys.RuleContext" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter::run():com.hp.hpl.jena.reasoner.rulesys.impl.StateFlag" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.graph.Graph" />
			<role name="Context" element="com.hp.hpl.jena.graph.query.SimpleQueryHandler" />
			<role name="state" element="com.hp.hpl.jena.graph.query.SimpleQueryHandler::graph:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.SimpleQueryHandler::containsNode(com.hp.hpl.jena.graph.Node):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator" />
			<role name="State" element="com.hp.hpl.jena.db.impl.IPSet" />
			<role name="state" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator::m_pset:com.hp.hpl.jena.db.impl.IPSet" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator::extractRow():void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.db.impl.ResultSetTripleIterator" />
			<role name="State" element="com.hp.hpl.jena.db.impl.IPSet" />
			<role name="state" element="com.hp.hpl.jena.db.impl.ResultSetTripleIterator::m_pset:com.hp.hpl.jena.db.impl.IPSet" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.ResultSetTripleIterator::extractRow():void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.ResultSetTripleIterator::remove():void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.model.impl.ModelReifier" />
			<role name="State" element="com.hp.hpl.jena.graph.Reifier" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.impl.ModelReifier::reifier:com.hp.hpl.jena.graph.Reifier" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelReifier::getReificationStyle():com.hp.hpl.jena.shared.ReificationStyle" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelReifier::isReified(com.hp.hpl.jena.graph.FrontsTriple):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelReifier::removeAllReifications(com.hp.hpl.jena.graph.FrontsTriple):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelReifier::removeReification(com.hp.hpl.jena.rdf.model.ReifiedStatement):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelReifier::findReifiedStatements():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelReifier::findReifiedStatements(com.hp.hpl.jena.graph.Triple):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph" />
			<role name="State" element="com.hp.hpl.jena.reasoner.Finder" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph::dataFind:com.hp.hpl.jena.reasoner.Finder" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph::findDataMatches(com.hp.hpl.jena.reasoner.TriplePattern):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph" />
			<role name="State" element="com.hp.hpl.jena.reasoner.Finder" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph::dataFind:com.hp.hpl.jena.reasoner.Finder" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph::findDataMatches(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph::findDataMatches(com.hp.hpl.jena.reasoner.TriplePattern):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph" />
			<role name="State" element="com.hp.hpl.jena.reasoner.Finder" />
			<role name="state" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph::tbox:com.hp.hpl.jena.reasoner.Finder" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveInfGraph::findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.Finder):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.db.impl.DBPattern" />
			<role name="State" element="com.hp.hpl.jena.graph.query.Element" />
			<role name="state" element="com.hp.hpl.jena.db.impl.DBPattern::S:com.hp.hpl.jena.graph.query.Element" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBPattern::shareFixedSubject(com.hp.hpl.jena.db.impl.DBPattern):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.query.Pattern" />
			<role name="State" element="com.hp.hpl.jena.graph.query.Element" />
			<role name="state" element="com.hp.hpl.jena.graph.query.Pattern::S:com.hp.hpl.jena.graph.query.Element" />
			<role name="state" element="com.hp.hpl.jena.graph.query.Pattern::P:com.hp.hpl.jena.graph.query.Element" />
			<role name="state" element="com.hp.hpl.jena.graph.query.Pattern::O:com.hp.hpl.jena.graph.query.Element" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.Pattern::asTripleMatch(com.hp.hpl.jena.graph.query.Domain):com.hp.hpl.jena.graph.TripleMatch" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.Pattern::match(com.hp.hpl.jena.graph.query.Domain, com.hp.hpl.jena.graph.Triple):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleReasoner" />
			<role name="State" element="com.hp.hpl.jena.reasoner.ReasonerFactory" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleReasoner::factory:com.hp.hpl.jena.reasoner.ReasonerFactory" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleReasoner::getReasonerCapabilities():com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleReasoner::supportsProperty(com.hp.hpl.jena.rdf.model.Property):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleReasoner" />
			<role name="State" element="com.hp.hpl.jena.reasoner.ReasonerFactory" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleReasoner::factory:com.hp.hpl.jena.reasoner.ReasonerFactory" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleReasoner::getReasonerCapabilities():com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleReasoner::supportsProperty(com.hp.hpl.jena.rdf.model.Property):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.reasoner.ReasonerFactory" />
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner::factory:com.hp.hpl.jena.reasoner.ReasonerFactory" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner::getReasonerCapabilities():com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner::supportsProperty(com.hp.hpl.jena.rdf.model.Property):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.graph.Graph" />
			<role name="Context" element="com.hp.hpl.jena.graph.impl.ReificationWrapper" />
			<role name="state" element="com.hp.hpl.jena.graph.impl.ReificationWrapper::base:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.ReificationWrapper::allNodes():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.ReificationWrapper::find(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.ReificationWrapper::checkQuadElementFree(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.ReificationWrapper::remove(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.ReificationWrapper::countQuadlets():int" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.ReificationWrapper::hasTriple(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.ReificationWrapper::getTriple(com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.graph.Triple" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.mem.StoreTripleIterator" />
			<role name="State" element="com.hp.hpl.jena.graph.Graph" />
			<role name="state" element="com.hp.hpl.jena.mem.StoreTripleIterator::toNotify:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.mem.StoreTripleIterator::remove():void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.query.regexptrees.PerlPatternParser" />
			<role name="State" element="com.hp.hpl.jena.graph.query.regexptrees.RegexpTreeGenerator" />
			<role name="state" element="com.hp.hpl.jena.graph.query.regexptrees.PerlPatternParser::generator:com.hp.hpl.jena.graph.query.regexptrees.RegexpTreeGenerator" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.regexptrees.PerlPatternParser::parseAtom():com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.regexptrees.PerlPatternParser::parseClass():com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.regexptrees.PerlPatternParser::parseParens():com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.regexptrees.PerlPatternParser::parseBackslash():com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.regexptrees.PerlPatternParser::backReferenceOrOctalChar(char):com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.regexptrees.PerlPatternParser::parseQuantifier(com.hp.hpl.jena.graph.query.regexptrees.RegexpTree):com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.regexptrees.PerlPatternParser::parseSeq():com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.regexptrees.PerlPatternParser::parseAlts():com.hp.hpl.jena.graph.query.regexptrees.RegexpTree" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.model.impl.NTripleReader" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.impl.NTripleReader::model:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.NTripleReader::readRDF():void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.NTripleReader::readResource():com.hp.hpl.jena.rdf.model.Resource" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.NTripleReader::readLiteral(boolean):com.hp.hpl.jena.rdf.model.Literal" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.NTripleReader::lookupResource(java.lang.String):com.hp.hpl.jena.rdf.model.Resource" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.impl.SimpleReifier" />
			<role name="State" element="com.hp.hpl.jena.graph.impl.ReifierTripleMap" />
			<role name="state" element="com.hp.hpl.jena.graph.impl.SimpleReifier::tripleMap:com.hp.hpl.jena.graph.impl.ReifierTripleMap" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::getTriple(com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.graph.Triple" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::allNodes():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::allNodes(com.hp.hpl.jena.graph.Triple):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::clear():void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::reifyAs(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple):com.hp.hpl.jena.graph.Node" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::reifyNewTriple(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::remove(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::remove(com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::hasTriple(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::addFragment(com.hp.hpl.jena.graph.impl.ReifierFragmentHandler, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::updateFragments(com.hp.hpl.jena.graph.impl.ReifierFragmentHandler, com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::removeFragment(com.hp.hpl.jena.graph.impl.ReifierFragmentHandler, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::find(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::size():int" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.util.iterator.MapFilterIterator" />
			<role name="State" element="com.hp.hpl.jena.util.iterator.ClosableIterator" />
			<role name="state" element="com.hp.hpl.jena.util.iterator.MapFilterIterator::underlying:com.hp.hpl.jena.util.iterator.ClosableIterator" />
			<role name="Request()" element="com.hp.hpl.jena.util.iterator.MapFilterIterator::close():void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.db.DBConnection" />
			<role name="State" element="com.hp.hpl.jena.db.impl.IRDBDriver" />
			<role name="state" element="com.hp.hpl.jena.db.DBConnection::m_driver:com.hp.hpl.jena.db.impl.IRDBDriver" />
			<role name="Request()" element="com.hp.hpl.jena.db.DBConnection::close():void" />
			<role name="Request()" element="com.hp.hpl.jena.db.DBConnection::cleanDB():void" />
			<role name="Request()" element="com.hp.hpl.jena.db.DBConnection::isFormatOK():boolean" />
			<role name="Request()" element="com.hp.hpl.jena.db.DBConnection::setDatabaseProperties(com.hp.hpl.jena.rdf.model.Model):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.DBConnection::getDatabaseProperties():com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.db.DBConnection::getDefaultModelProperties():com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.db.DBConnection::getAllModelNames():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.db.DBConnection::containsModel(java.lang.String):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.db.DBConnection::getDriver():com.hp.hpl.jena.db.impl.IRDBDriver" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.Property" />
			<role name="Context" element="com.hp.hpl.jena.xmloutput.impl.Unparser" />
			<role name="state" element="com.hp.hpl.jena.xmloutput.impl.Unparser::LI:com.hp.hpl.jena.rdf.model.Property" />
			<role name="state" element="com.hp.hpl.jena.xmloutput.impl.Unparser::DESCRIPTION:com.hp.hpl.jena.rdf.model.Property" />
			<role name="Request()" element="com.hp.hpl.jena.xmloutput.impl.Unparser::&lt;clinit&gt;():void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreterContext" />
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.impl.ConsumerChoicePointFrame" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.impl.ConsumerChoicePointFrame::context:com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreterContext" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.ConsumerChoicePointFrame::setReady():void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.ConsumerChoicePointFrame::setFinished():void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB" />
			<role name="State" element="com.hp.hpl.jena.db.impl.IRDBDriver" />
			<role name="state" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB::m_driver:com.hp.hpl.jena.db.impl.IRDBDriver" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB::extractTripleFromRowData(java.lang.String, java.lang.String, java.lang.String):com.hp.hpl.jena.graph.Triple" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB::deleteTripleAR(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.db.impl.IDBID, com.hp.hpl.jena.graph.Node, boolean, java.util.Hashtable):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB::storeTripleAR(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.db.impl.IDBID, com.hp.hpl.jena.graph.Node, boolean, boolean, java.util.Hashtable):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB::find(com.hp.hpl.jena.graph.TripleMatch, com.hp.hpl.jena.db.impl.IDBID):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.ModelChangedListener" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::L:com.hp.hpl.jena.rdf.model.ModelChangedListener" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyAddArray(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyDeleteArray(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple[]):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyAddTriple(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyAddList(com.hp.hpl.jena.graph.Graph, java.util.List):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyAddIterator(com.hp.hpl.jena.graph.Graph, java.util.Iterator):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyAddGraph(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyDeleteIterator(com.hp.hpl.jena.graph.Graph, java.util.Iterator):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyDeleteTriple(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyAddIterator(com.hp.hpl.jena.graph.Graph, java.util.List):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyDeleteList(com.hp.hpl.jena.graph.Graph, java.util.List):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyDeleteGraph(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelListenerAdapter::notifyEvent(com.hp.hpl.jena.graph.Graph, java.lang.Object):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.model.ResourceFactory" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.ResourceFactory$Interface" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.ResourceFactory::instance:com.hp.hpl.jena.rdf.model.ResourceFactory$Interface" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.ResourceFactory::createResource():com.hp.hpl.jena.rdf.model.Resource" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.ResourceFactory::createResource(java.lang.String):com.hp.hpl.jena.rdf.model.Resource" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.ResourceFactory::createPlainLiteral(java.lang.String):com.hp.hpl.jena.rdf.model.Literal" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.ResourceFactory::createTypedLiteral(java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype):com.hp.hpl.jena.rdf.model.Literal" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.ResourceFactory::createTypedLiteral(java.lang.Object):com.hp.hpl.jena.rdf.model.Literal" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.ResourceFactory::createProperty(java.lang.String):com.hp.hpl.jena.rdf.model.Property" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.ResourceFactory::createProperty(java.lang.String, java.lang.String):com.hp.hpl.jena.rdf.model.Property" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.ResourceFactory::createStatement(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.RDFNode):com.hp.hpl.jena.rdf.model.Statement" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl" />
			<role name="State" element="com.hp.hpl.jena.graph.GraphMaker" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl::maker:com.hp.hpl.jena.graph.GraphMaker" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl::close():void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl::openModel():com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl::openModelIfPresent(java.lang.String):com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl::openModel(java.lang.String, boolean):com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl::createModel(java.lang.String, boolean):com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl::createFreshModel():com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl::createDefaultModel():com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl::removeModel(java.lang.String):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl::hasModel(java.lang.String):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelMakerImpl::listModels():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.DAMLMicroReasonerFactory" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.DAMLMicroReasonerFactory::capabilities:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.DAMLMicroReasonerFactory::getCapabilities():com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.OWLFBRuleReasonerFactory" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.OWLFBRuleReasonerFactory::capabilities:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.OWLFBRuleReasonerFactory::getCapabilities():com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.OWLMicroReasonerFactory" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.OWLMicroReasonerFactory::capabilities:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.OWLMicroReasonerFactory::getCapabilities():com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.OWLMiniReasonerFactory" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.OWLMiniReasonerFactory::capabilities:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.OWLMiniReasonerFactory::getCapabilities():com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.RDFSFBRuleReasonerFactory" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.RDFSFBRuleReasonerFactory::capabilities:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.RDFSFBRuleReasonerFactory::getCapabilities():com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasonerFactory" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasonerFactory::capabilities:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasonerFactory::getCapabilities():com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.impl.WrappedReasonerFactory" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.impl.WrappedReasonerFactory::schemaUnion:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.WrappedReasonerFactory::create(com.hp.hpl.jena.rdf.model.Resource):com.hp.hpl.jena.reasoner.Reasoner" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveReasonerFactory" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="state" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveReasonerFactory::capabilities:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveReasonerFactory::getCapabilities():com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasonerFactory" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasonerFactory::capabilities:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasonerFactory::getCapabilities():com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.xmloutput.impl.Unparser" />
			<role name="State" element="com.hp.hpl.jena.xmloutput.impl.Unparser$WType" />
			<role name="state" element="com.hp.hpl.jena.xmloutput.impl.Unparser::wtype:com.hp.hpl.jena.xmloutput.impl.Unparser$WType" />
			<role name="Request()" element="com.hp.hpl.jena.xmloutput.impl.Unparser::wTypedNodeNoProperties(com.hp.hpl.jena.rdf.model.Resource):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$1" />
			<role name="State" element="com.hp.hpl.jena.mem.MatchOrBind" />
			<role name="state" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$1::x:com.hp.hpl.jena.mem.MatchOrBind" />
			<role name="Request()" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$1::applyToTriples(com.hp.hpl.jena.graph.query.Domain, com.hp.hpl.jena.graph.query.Matcher, com.hp.hpl.jena.graph.query.StageElement):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$2" />
			<role name="State" element="com.hp.hpl.jena.mem.MatchOrBind" />
			<role name="state" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$2::x:com.hp.hpl.jena.mem.MatchOrBind" />
			<role name="Request()" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$2::applyToTriples(com.hp.hpl.jena.graph.query.Domain, com.hp.hpl.jena.graph.query.Matcher, com.hp.hpl.jena.graph.query.StageElement):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$3" />
			<role name="State" element="com.hp.hpl.jena.mem.MatchOrBind" />
			<role name="state" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$3::x:com.hp.hpl.jena.mem.MatchOrBind" />
			<role name="Request()" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$3::applyToTriples(com.hp.hpl.jena.graph.query.Domain, com.hp.hpl.jena.graph.query.Matcher, com.hp.hpl.jena.graph.query.StageElement):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$4" />
			<role name="State" element="com.hp.hpl.jena.mem.MatchOrBind" />
			<role name="state" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$4::x:com.hp.hpl.jena.mem.MatchOrBind" />
			<role name="Request()" element="com.hp.hpl.jena.mem.faster.NodeToTriplesMapFaster$4::applyToTriples(com.hp.hpl.jena.graph.query.Domain, com.hp.hpl.jena.graph.query.Matcher, com.hp.hpl.jena.graph.query.StageElement):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.Functor" />
			<role name="State" element="com.hp.hpl.jena.reasoner.rulesys.Builtin" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.Functor::implementor:com.hp.hpl.jena.reasoner.rulesys.Builtin" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.Functor::evalAsBodyClause(com.hp.hpl.jena.reasoner.rulesys.RuleContext):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.Functor::safeEvalAsBodyClause(com.hp.hpl.jena.reasoner.rulesys.RuleContext):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.util.iterator.Filter" />
			<role name="Context" element="com.hp.hpl.jena.util.iterator.FilterIterator" />
			<role name="state" element="com.hp.hpl.jena.util.iterator.FilterIterator::f:com.hp.hpl.jena.util.iterator.Filter" />
			<role name="Request()" element="com.hp.hpl.jena.util.iterator.FilterIterator::accept(T):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.db.impl.IRDBDriver" />
			<role name="Context" element="com.hp.hpl.jena.db.GraphRDB" />
			<role name="state" element="com.hp.hpl.jena.db.GraphRDB::m_driver:com.hp.hpl.jena.db.impl.IRDBDriver" />
			<role name="Request()" element="com.hp.hpl.jena.db.GraphRDB::remove():void" />
			<role name="Request()" element="com.hp.hpl.jena.db.GraphRDB::getConnection():com.hp.hpl.jena.db.IDBConnection" />
			<role name="Request()" element="com.hp.hpl.jena.db.GraphRDB::getDoDuplicateCheck():boolean" />
			<role name="Request()" element="com.hp.hpl.jena.db.GraphRDB::setDoDuplicateCheck(boolean):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.mem.StoreTripleIterator" />
			<role name="State" element="com.hp.hpl.jena.mem.NodeToTriplesMapBase" />
			<role name="state" element="com.hp.hpl.jena.mem.StoreTripleIterator::X:com.hp.hpl.jena.mem.NodeToTriplesMapBase" />
			<role name="state" element="com.hp.hpl.jena.mem.StoreTripleIterator::A:com.hp.hpl.jena.mem.NodeToTriplesMapBase" />
			<role name="state" element="com.hp.hpl.jena.mem.StoreTripleIterator::B:com.hp.hpl.jena.mem.NodeToTriplesMapBase" />
			<role name="Request()" element="com.hp.hpl.jena.mem.StoreTripleIterator::remove():void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.arp.JenaReader" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
			<role name="state" element="com.hp.hpl.jena.rdf.arp.JenaReader::errorHandler:com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.JenaReader::setProperty(java.lang.String, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.model.impl.NTripleReader" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.impl.NTripleReader::errorHandler:com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.NTripleReader::setProperty(java.lang.String, java.lang.Object):java.lang.Object" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.NTripleReader::unwrappedReadRDF():void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.NTripleReader::deprecated(java.lang.String):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.NTripleReader::syntaxError(java.lang.String):void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI" />
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.impl.BBRuleContext" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.impl.BBRuleContext::graph:com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.BBRuleContext::find(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.util.iterator.ClosableIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.BBRuleContext::getTemp(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.graph.Node" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext" />
			<role name="State" element="com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext::graph:com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext::addTriple(com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext::add(com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext::flushPending():void" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext::find(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.util.iterator.ClosableIterator" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext" />
			<role name="State" element="com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext::graph:com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext::find(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.util.iterator.ClosableIterator" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.db.impl.DBReifier" />
			<role name="State" element="com.hp.hpl.jena.db.impl.SpecializedGraphReifier" />
			<role name="state" element="com.hp.hpl.jena.db.impl.DBReifier::m_reifier:com.hp.hpl.jena.db.impl.SpecializedGraphReifier" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::reifyAs(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple):com.hp.hpl.jena.graph.Node" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::hasTriple(com.hp.hpl.jena.graph.Node):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::hasTriple(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::allNodes():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::allNodes(com.hp.hpl.jena.graph.Triple):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::remove(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::remove(com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifier::getTriple(com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.graph.Triple" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.impl.SimpleReifier" />
			<role name="State" element="com.hp.hpl.jena.graph.impl.ReifierFragmentsMap" />
			<role name="state" element="com.hp.hpl.jena.graph.impl.SimpleReifier::fragmentsMap:com.hp.hpl.jena.graph.impl.ReifierFragmentsMap" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::clear():void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::reifyNewTriple(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::handledAdd(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::handledRemove(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::find(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.SimpleReifier::size():int" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.ontology.OntModelSpec" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.ModelMaker" />
			<role name="state" element="com.hp.hpl.jena.ontology.OntModelSpec::maker:com.hp.hpl.jena.rdf.model.ModelMaker" />
			<role name="Request()" element="com.hp.hpl.jena.ontology.OntModelSpec::doCreateModel():com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.ontology.OntModelSpec::implementCreateModelOver(java.lang.String):com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.Triple" />
			<role name="State" element="com.hp.hpl.jena.graph.Node" />
			<role name="state" element="com.hp.hpl.jena.graph.Triple::subj:com.hp.hpl.jena.graph.Node" />
			<role name="state" element="com.hp.hpl.jena.graph.Triple::pred:com.hp.hpl.jena.graph.Node" />
			<role name="state" element="com.hp.hpl.jena.graph.Triple::obj:com.hp.hpl.jena.graph.Node" />
			<role name="Request()" element="com.hp.hpl.jena.graph.Triple::isConcrete():boolean" />
			<role name="Request()" element="com.hp.hpl.jena.graph.Triple::sameAs(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.query.StageElement$FindTriples" />
			<role name="State" element="com.hp.hpl.jena.graph.query.Applyer" />
			<role name="state" element="com.hp.hpl.jena.graph.query.StageElement$FindTriples::finder:com.hp.hpl.jena.graph.query.Applyer" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.StageElement$FindTriples::run(com.hp.hpl.jena.graph.query.Domain):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.arp.impl.XMLHandler" />
			<role name="State" element="com.hp.hpl.jena.rdf.arp.ExtendedHandler" />
			<role name="state" element="com.hp.hpl.jena.rdf.arp.impl.XMLHandler::nullScopeHandler:com.hp.hpl.jena.rdf.arp.ExtendedHandler" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.impl.XMLHandler::endLocalScope(com.hp.hpl.jena.rdf.arp.impl.ANode):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.impl.XMLHandler::endBnodeScope():void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.reasoner.Reasoner" />
			<role name="Context" element="com.hp.hpl.jena.reasoner.ReasonerRegistry" />
			<role name="state" element="com.hp.hpl.jena.reasoner.ReasonerRegistry::theRDFSSimpleReasoner:com.hp.hpl.jena.reasoner.Reasoner" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.ReasonerRegistry::getRDFSSimpleReasoner():com.hp.hpl.jena.reasoner.Reasoner" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.RDFList" />
			<role name="Context" element="com.hp.hpl.jena.rdf.model.impl.RDFListImpl$RDFListIterator" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.impl.RDFListImpl$RDFListIterator::m_head:com.hp.hpl.jena.rdf.model.RDFList" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.impl.RDFListImpl$RDFListIterator::m_seen:com.hp.hpl.jena.rdf.model.RDFList" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.RDFListImpl$RDFListIterator::hasNext():boolean" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.RDFListImpl$RDFListIterator::next():com.hp.hpl.jena.rdf.model.RDFNode" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.model.impl.ModelCom" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.RDFReaderF" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::readerFactory:com.hp.hpl.jena.rdf.model.RDFReaderF" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::getReader():com.hp.hpl.jena.rdf.model.RDFReader" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::getReader(java.lang.String):com.hp.hpl.jena.rdf.model.RDFReader" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::setReaderClassName(java.lang.String, java.lang.String):java.lang.String" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::read(java.lang.String):com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::read(java.io.Reader, java.lang.String):com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::read(java.io.InputStream, java.lang.String):com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::read(java.lang.String, java.lang.String):com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::read(java.io.Reader, java.lang.String, java.lang.String):com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::read(java.io.InputStream, java.lang.String, java.lang.String):com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.model.impl.ModelCom" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.RDFWriterF" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::writerFactory:com.hp.hpl.jena.rdf.model.RDFWriterF" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::getWriter():com.hp.hpl.jena.rdf.model.RDFWriter" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::getWriter(java.lang.String):com.hp.hpl.jena.rdf.model.RDFWriter" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ModelCom::setWriterClassName(java.lang.String, java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.db.impl.GraphRDBMaker" />
			<role name="State" element="com.hp.hpl.jena.db.IDBConnection" />
			<role name="state" element="com.hp.hpl.jena.db.impl.GraphRDBMaker::c:com.hp.hpl.jena.db.IDBConnection" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.GraphRDBMaker::getGraph():com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.GraphRDBMaker::openGraph():com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.GraphRDBMaker::consGraph(java.lang.String, boolean):com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.GraphRDBMaker::hasGraph(java.lang.String):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.GraphRDBMaker::listGraphs():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource" />
			<role name="State" element="com.hp.hpl.jena.graph.Node" />
			<role name="state" element="com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource::node:com.hp.hpl.jena.graph.Node" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.GraphMatcher$FixedResource::mightBeEqual(com.hp.hpl.jena.graph.impl.GraphMatcher$SomeResource):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.db.impl.DBTransactionHandler" />
			<role name="State" element="com.hp.hpl.jena.db.impl.IRDBDriver" />
			<role name="state" element="com.hp.hpl.jena.db.impl.DBTransactionHandler::m_driver:com.hp.hpl.jena.db.impl.IRDBDriver" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBTransactionHandler::transactionsSupported():boolean" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBTransactionHandler::begin():void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBTransactionHandler::abort():void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBTransactionHandler::commit():void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.impl.FileGraph" />
			<role name="State" element="com.hp.hpl.jena.graph.impl.FileGraph$NotifyOnClose" />
			<role name="state" element="com.hp.hpl.jena.graph.impl.FileGraph::notify:com.hp.hpl.jena.graph.impl.FileGraph$NotifyOnClose" />
			<role name="Request()" element="com.hp.hpl.jena.graph.impl.FileGraph::close():void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.n3.turtle.ParserBase" />
			<role name="State" element="com.hp.hpl.jena.n3.turtle.TurtleEventHandler" />
			<role name="state" element="com.hp.hpl.jena.n3.turtle.ParserBase::handler:com.hp.hpl.jena.n3.turtle.TurtleEventHandler" />
			<role name="Request()" element="com.hp.hpl.jena.n3.turtle.ParserBase::emitTriple(int, int, com.hp.hpl.jena.graph.Triple):void" />
			<role name="Request()" element="com.hp.hpl.jena.n3.turtle.ParserBase::startFormula(int, int):void" />
			<role name="Request()" element="com.hp.hpl.jena.n3.turtle.ParserBase::endFormula(int, int):void" />
			<role name="Request()" element="com.hp.hpl.jena.n3.turtle.ParserBase::setPrefix(int, int, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.n3.turtle.ParserBase" />
			<role name="State" element="com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="state" element="com.hp.hpl.jena.n3.turtle.ParserBase::prefixMapping:com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="Request()" element="com.hp.hpl.jena.n3.turtle.ParserBase::setPrefix(int, int, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.arp.impl.ARPSaxErrorHandler" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
			<role name="state" element="com.hp.hpl.jena.rdf.arp.impl.ARPSaxErrorHandler::errorHandler:com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.impl.ARPSaxErrorHandler::error(org.xml.sax.SAXParseException):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.impl.ARPSaxErrorHandler::warning(org.xml.sax.SAXParseException):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.impl.ARPSaxErrorHandler::fatalError(org.xml.sax.SAXParseException):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Resource" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner::configuration:com.hp.hpl.jena.rdf.model.Resource" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner::addDescription(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.rdf.model.Resource):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter" />
			<role name="State" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter::continuation:com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter::fire(com.hp.hpl.jena.graph.Triple, boolean):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.mem.HashCommon$BasicKeyIterator" />
			<role name="State" element="com.hp.hpl.jena.mem.HashCommon$NotifyEmpty" />
			<role name="state" element="com.hp.hpl.jena.mem.HashCommon$BasicKeyIterator::container:com.hp.hpl.jena.mem.HashCommon$NotifyEmpty" />
			<role name="Request()" element="com.hp.hpl.jena.mem.HashCommon$BasicKeyIterator::remove():void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.mem.HashCommon$MovedKeysIterator" />
			<role name="State" element="com.hp.hpl.jena.mem.HashCommon$NotifyEmpty" />
			<role name="state" element="com.hp.hpl.jena.mem.HashCommon$MovedKeysIterator::container:com.hp.hpl.jena.mem.HashCommon$NotifyEmpty" />
			<role name="Request()" element="com.hp.hpl.jena.mem.HashCommon$MovedKeysIterator::remove():void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.assembler.Assembler" />
			<role name="Context" element="com.hp.hpl.jena.assembler.assemblers.AssemblerBase$MapObjectToContent" />
			<role name="state" element="com.hp.hpl.jena.assembler.assemblers.AssemblerBase$MapObjectToContent::a:com.hp.hpl.jena.assembler.Assembler" />
			<role name="Request()" element="com.hp.hpl.jena.assembler.assemblers.AssemblerBase$MapObjectToContent::map1(com.hp.hpl.jena.rdf.model.Statement):com.hp.hpl.jena.assembler.Content" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.db.impl.SQLCache" />
			<role name="State" element="com.hp.hpl.jena.db.IDBConnection" />
			<role name="state" element="com.hp.hpl.jena.db.impl.SQLCache::m_connection:com.hp.hpl.jena.db.IDBConnection" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.SQLCache::getConnection():java.sql.Connection" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.SQLCache::genSQLStmtFindReif(java.lang.String, java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.model.StatementTripleBoundary" />
			<role name="State" element="com.hp.hpl.jena.graph.TripleBoundary" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.StatementTripleBoundary::tb:com.hp.hpl.jena.graph.TripleBoundary" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.StatementTripleBoundary::stopAt(com.hp.hpl.jena.rdf.model.Statement):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.mem.GraphMemBaseQueryHandler" />
			<role name="State" element="com.hp.hpl.jena.graph.impl.TripleStore" />
			<role name="state" element="com.hp.hpl.jena.mem.GraphMemBaseQueryHandler::store:com.hp.hpl.jena.graph.impl.TripleStore" />
			<role name="Request()" element="com.hp.hpl.jena.mem.GraphMemBaseQueryHandler::findPredicates():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.mem.GraphMemBaseQueryHandler::findObjects():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.mem.GraphMemBaseQueryHandler::findSubjects():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.ontology.OntDocumentManager" />
			<role name="State" element="com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook" />
			<role name="state" element="com.hp.hpl.jena.ontology.OntDocumentManager::m_readHook:com.hp.hpl.jena.ontology.OntDocumentManager$ReadHook" />
			<role name="Request()" element="com.hp.hpl.jena.ontology.OntDocumentManager::read(com.hp.hpl.jena.rdf.model.Model, java.lang.String, boolean):boolean" />
		</instance>
		<instance>
			<role name="Context" element="jena.schemagen$SchemagenOptionsImpl" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="state" element="jena.schemagen$SchemagenOptionsImpl::m_config:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="jena.schemagen$SchemagenOptionsImpl::determineConfigRoot():void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.query.SimpleQueryEngine$1" />
			<role name="State" element="com.hp.hpl.jena.graph.query.Pipe" />
			<role name="state" element="com.hp.hpl.jena.graph.query.SimpleQueryEngine$1::complete:com.hp.hpl.jena.graph.query.Pipe" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.SimpleQueryEngine$1::next():com.hp.hpl.jena.graph.query.Domain" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.SimpleQueryEngine$1::hasNext():boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.model.impl.ContNodeIteratorImpl" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Statement" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.impl.ContNodeIteratorImpl::recent:com.hp.hpl.jena.rdf.model.Statement" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ContNodeIteratorImpl::next():com.hp.hpl.jena.rdf.model.RDFNode" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ContNodeIteratorImpl::remove():void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.model.impl.SeqNodeIteratorImpl" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Statement" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.impl.SeqNodeIteratorImpl::stmt:com.hp.hpl.jena.rdf.model.Statement" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.SeqNodeIteratorImpl::next():com.hp.hpl.jena.rdf.model.RDFNode" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.SeqNodeIteratorImpl::remove():void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.model.impl.StmtIteratorImpl" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Statement" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.impl.StmtIteratorImpl::current:com.hp.hpl.jena.rdf.model.Statement" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.StmtIteratorImpl::remove():void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB" />
			<role name="State" element="com.hp.hpl.jena.db.impl.ICache" />
			<role name="state" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB::literalCache:com.hp.hpl.jena.db.impl.ICache" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.PSet_TripleStore_RDB::getLiteralFromCache(com.hp.hpl.jena.db.impl.IDBID):com.hp.hpl.jena.graph.Node_Literal" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.enhanced.EnhGraph" />
			<role name="State" element="com.hp.hpl.jena.util.cache.Cache" />
			<role name="state" element="com.hp.hpl.jena.enhanced.EnhGraph::enhNodes:com.hp.hpl.jena.util.cache.Cache" />
			<role name="Request()" element="com.hp.hpl.jena.enhanced.EnhGraph::getNodeAs(, java.lang.Class):com.hp.hpl.jena.rdf.model.RDFNode" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.arp.JenaHandler" />
			<role name="State" element="com.hp.hpl.jena.graph.BulkUpdateHandler" />
			<role name="state" element="com.hp.hpl.jena.rdf.arp.JenaHandler::bulk:com.hp.hpl.jena.graph.BulkUpdateHandler" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.JenaHandler::bulkUpdate():void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.query.SimpleTreeQueryPlan" />
			<role name="State" element="com.hp.hpl.jena.graph.Graph" />
			<role name="state" element="com.hp.hpl.jena.graph.query.SimpleTreeQueryPlan::pattern:com.hp.hpl.jena.graph.Graph" />
			<role name="state" element="com.hp.hpl.jena.graph.query.SimpleTreeQueryPlan::target:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.SimpleTreeQueryPlan::handleRoot(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, java.util.Set):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter" />
			<role name="State" element="com.hp.hpl.jena.graph.Graph" />
			<role name="state" element="com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter::graph:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.n3.turtle.TurtleRDFGraphInserter::prefix(int, int, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.FGraph" />
			<role name="State" element="com.hp.hpl.jena.graph.Graph" />
			<role name="state" element="com.hp.hpl.jena.reasoner.FGraph::graph:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.FGraph::find(com.hp.hpl.jena.reasoner.TriplePattern):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.FGraph::findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.Finder):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.FGraph::contains(com.hp.hpl.jena.reasoner.TriplePattern):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache" />
			<role name="State" element="com.hp.hpl.jena.graph.Node" />
			<role name="state" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache::directPredicate:com.hp.hpl.jena.graph.Node" />
			<role name="state" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache::closedPredicate:com.hp.hpl.jena.graph.Node" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache::findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.Finder):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache::find(com.hp.hpl.jena.reasoner.TriplePattern):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.mem.MatchOrBind$1" />
			<role name="State" element="com.hp.hpl.jena.graph.query.QueryNode" />
			<role name="state" element="com.hp.hpl.jena.mem.MatchOrBind$1::S:com.hp.hpl.jena.graph.query.QueryNode" />
			<role name="state" element="com.hp.hpl.jena.mem.MatchOrBind$1::P:com.hp.hpl.jena.graph.query.QueryNode" />
			<role name="Request()" element="com.hp.hpl.jena.mem.MatchOrBind$1::matches(com.hp.hpl.jena.graph.Triple):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.mem.MatchOrBind$2" />
			<role name="State" element="com.hp.hpl.jena.graph.query.QueryNode" />
			<role name="state" element="com.hp.hpl.jena.mem.MatchOrBind$2::P:com.hp.hpl.jena.graph.query.QueryNode" />
			<role name="state" element="com.hp.hpl.jena.mem.MatchOrBind$2::O:com.hp.hpl.jena.graph.query.QueryNode" />
			<role name="Request()" element="com.hp.hpl.jena.mem.MatchOrBind$2::matches(com.hp.hpl.jena.graph.Triple):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.arp.JenaHandler" />
			<role name="State" element="com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="state" element="com.hp.hpl.jena.rdf.arp.JenaHandler::prefixMapping:com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.arp.JenaHandler::startPrefixMapping(java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.model.impl.ContNodeIteratorImpl" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Container" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.impl.ContNodeIteratorImpl::cont:com.hp.hpl.jena.rdf.model.Container" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.ContNodeIteratorImpl::remove():void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.vocabulary.DAML_OIL" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="state" element="com.hp.hpl.jena.vocabulary.DAML_OIL::s_model:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.vocabulary.DAML_OIL::&lt;clinit&gt;():void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
			<role name="Context" element="com.hp.hpl.jena.rdf.model.impl.NTripleWriter" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.impl.NTripleWriter::errorHandler:com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.NTripleWriter::write(com.hp.hpl.jena.rdf.model.Model, java.io.OutputStream, java.lang.String):void" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.impl.NTripleWriter::write(com.hp.hpl.jena.rdf.model.Model, java.io.Writer, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.ontology.impl.OntModelImpl$RdfTypeTestFn" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Resource" />
			<role name="state" element="com.hp.hpl.jena.ontology.impl.OntModelImpl$RdfTypeTestFn::m_type:com.hp.hpl.jena.rdf.model.Resource" />
			<role name="Request()" element="com.hp.hpl.jena.ontology.impl.OntModelImpl$RdfTypeTestFn::reduce(com.hp.hpl.jena.rdf.model.RDFNode, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="jena.schemagen$SchemagenOptionsImpl" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Resource" />
			<role name="state" element="jena.schemagen$SchemagenOptionsImpl::m_root:com.hp.hpl.jena.rdf.model.Resource" />
			<role name="Request()" element="jena.schemagen$SchemagenOptionsImpl::getAllValues(jena.schemagen$SchemagenOptions$OPT):java.util.List" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.vocabulary.DC_11" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Model" />
			<role name="state" element="com.hp.hpl.jena.vocabulary.DC_11::m_model:com.hp.hpl.jena.rdf.model.Model" />
			<role name="Request()" element="com.hp.hpl.jena.vocabulary.DC_11::&lt;clinit&gt;():void" />
		</instance>
		<instance>
			<role name="State" element="jena.cmdline.ArgHandler" />
			<role name="Context" element="jena.cmdline.CommandLine" />
			<role name="state" element="jena.cmdline.CommandLine::argHook:jena.cmdline.ArgHandler" />
			<role name="Request()" element="jena.cmdline.CommandLine::process(java.lang.String[]):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner" />
			<role name="State" element="com.hp.hpl.jena.graph.Graph" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner::schemaGraph:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner::bind(com.hp.hpl.jena.graph.Graph):com.hp.hpl.jena.reasoner.InfGraph" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator" />
			<role name="State" element="com.hp.hpl.jena.graph.Node" />
			<role name="state" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator::m_stmtURI:com.hp.hpl.jena.graph.Node" />
			<role name="state" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator::m_matchObj:com.hp.hpl.jena.graph.Node" />
			<role name="state" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator::m_subjNode:com.hp.hpl.jena.graph.Node" />
			<role name="state" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator::m_predNode:com.hp.hpl.jena.graph.Node" />
			<role name="state" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator::m_objNode:com.hp.hpl.jena.graph.Node" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator::extractRow():void" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.ResultSetReifIterator::getRow():com.hp.hpl.jena.graph.Triple" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.mem.faster.GraphMemFaster$GraphMemFasterStatisticsHandler" />
			<role name="State" element="com.hp.hpl.jena.graph.Reifier" />
			<role name="state" element="com.hp.hpl.jena.mem.faster.GraphMemFaster$GraphMemFasterStatisticsHandler::reifier:com.hp.hpl.jena.graph.Reifier" />
			<role name="Request()" element="com.hp.hpl.jena.mem.faster.GraphMemFaster$GraphMemFasterStatisticsHandler::getStatistic(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):long" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier" />
			<role name="State" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier$GetReifier" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::deductions:com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier$GetReifier" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::allNodes():com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::allNodes(com.hp.hpl.jena.graph.Triple):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::find(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::findEither(com.hp.hpl.jena.graph.TripleMatch, boolean):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::findExposed(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::hasTriple(com.hp.hpl.jena.graph.Node):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::hasTriple(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::size():int" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.BasicFBReifier::getTriple(com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.graph.Triple" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.GraphExtract$Extraction" />
			<role name="State" element="com.hp.hpl.jena.graph.TripleBoundary" />
			<role name="state" element="com.hp.hpl.jena.graph.GraphExtract$Extraction::b:com.hp.hpl.jena.graph.TripleBoundary" />
			<role name="Request()" element="com.hp.hpl.jena.graph.GraphExtract$Extraction::extractInto(com.hp.hpl.jena.graph.Node):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.query.QueryTriple$SimpleApplyer" />
			<role name="State" element="com.hp.hpl.jena.graph.Graph" />
			<role name="state" element="com.hp.hpl.jena.graph.query.QueryTriple$SimpleApplyer::g:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.QueryTriple$SimpleApplyer::find(com.hp.hpl.jena.graph.query.Domain):java.util.Iterator" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.query.Expression$Valof" />
			<role name="State" element="com.hp.hpl.jena.graph.query.IndexValues" />
			<role name="state" element="com.hp.hpl.jena.graph.query.Expression$Valof::dom:com.hp.hpl.jena.graph.query.IndexValues" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.Expression$Valof::get(java.lang.String):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.db.impl.DBQueryStage" />
			<role name="State" element="com.hp.hpl.jena.graph.Graph" />
			<role name="state" element="com.hp.hpl.jena.db.impl.DBQueryStage::graph:com.hp.hpl.jena.graph.Graph" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBQueryStage::compile(com.hp.hpl.jena.db.impl.DBQueryStageCompiler, com.hp.hpl.jena.db.impl.SpecializedGraph, java.util.List, java.util.List, com.hp.hpl.jena.graph.query.ExpressionSet):com.hp.hpl.jena.db.impl.DBQuery" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.query.StageElement$PutBindings" />
			<role name="State" element="com.hp.hpl.jena.graph.query.Pipe" />
			<role name="state" element="com.hp.hpl.jena.graph.query.StageElement$PutBindings::sink:com.hp.hpl.jena.graph.query.Pipe" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.StageElement$PutBindings::run(com.hp.hpl.jena.graph.query.Domain):void" />
		</instance>
		<instance>
			<role name="State" element="com.hp.hpl.jena.graph.query.TripleSorter" />
			<role name="Context" element="com.hp.hpl.jena.graph.query.SimpleQueryEngine" />
			<role name="state" element="com.hp.hpl.jena.graph.query.SimpleQueryEngine::sortMethod:com.hp.hpl.jena.graph.query.TripleSorter" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.SimpleQueryEngine::sortTriples(com.hp.hpl.jena.graph.Triple[]):com.hp.hpl.jena.graph.Triple[]" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.graph.query.Expression$Valof" />
			<role name="State" element="com.hp.hpl.jena.graph.query.VariableIndexes" />
			<role name="state" element="com.hp.hpl.jena.graph.query.Expression$Valof::map:com.hp.hpl.jena.graph.query.VariableIndexes" />
			<role name="Request()" element="com.hp.hpl.jena.graph.query.Expression$Valof::get(java.lang.String):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.model.SimpleSelector" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.Resource" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.SimpleSelector::subject:com.hp.hpl.jena.rdf.model.Resource" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.SimpleSelector::test(com.hp.hpl.jena.rdf.model.Statement):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.rdf.model.ModelExtract" />
			<role name="State" element="com.hp.hpl.jena.rdf.model.StatementBoundary" />
			<role name="state" element="com.hp.hpl.jena.rdf.model.ModelExtract::boundary:com.hp.hpl.jena.rdf.model.StatementBoundary" />
			<role name="Request()" element="com.hp.hpl.jena.rdf.model.ModelExtract::extractInto(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Model):com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.RuleDerivation" />
			<role name="State" element="com.hp.hpl.jena.reasoner.InfGraph" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.RuleDerivation::infGraph:com.hp.hpl.jena.reasoner.InfGraph" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.RuleDerivation::printTrace(java.io.PrintWriter, boolean, int, java.util.HashSet):void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPTopGoalIterator" />
			<role name="State" element="com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI" />
			<role name="state" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPTopGoalIterator::infgraph:com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI" />
			<role name="Request()" element="com.hp.hpl.jena.reasoner.rulesys.impl.LPTopGoalIterator::checkCME():void" />
		</instance>
		<instance>
			<role name="Context" element="com.hp.hpl.jena.util.iterator.MapFilterIterator" />
			<role name="State" element="com.hp.hpl.jena.util.iterator.MapFilter" />
			<role name="state" element="com.hp.hpl.jena.util.iterator.MapFilterIterator::f:com.hp.hpl.jena.util.iterator.MapFilter" />
			<role name="Request()" element="com.hp.hpl.jena.util.iterator.MapFilterIterator::hasNext():boolean" />
		</instance>
	</pattern>
	<pattern name="Strategy" />
	<pattern name="Bridge">
		<instance>
			<role name="Abstraction" element="com.hp.hpl.jena.graph.compose.Dyadic" />
			<role name="Implementor" element="com.hp.hpl.jena.graph.Graph" />
			<role name="implementor" element="com.hp.hpl.jena.graph.compose.Dyadic::L:com.hp.hpl.jena.graph.Graph" />
			<role name="implementor" element="com.hp.hpl.jena.graph.compose.Dyadic::R:com.hp.hpl.jena.graph.Graph" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.compose.Dyadic::close():void" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.compose.Dyadic::dependsOn(com.hp.hpl.jena.graph.Graph):boolean" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext" />
			<role name="Implementor" element="com.hp.hpl.jena.rdf.arp.impl.Taint" />
			<role name="implementor" element="com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext::langTaint:com.hp.hpl.jena.rdf.arp.impl.Taint" />
			<role name="Operation()" element="com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext::getLang(com.hp.hpl.jena.rdf.arp.impl.Taint):java.lang.String" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.hp.hpl.jena.graph.impl.GraphBase" />
			<role name="Implementor" element="com.hp.hpl.jena.graph.Reifier" />
			<role name="implementor" element="com.hp.hpl.jena.graph.impl.GraphBase::reifier:com.hp.hpl.jena.graph.Reifier" />
			<role name="Operation()" element="com.hp.hpl.jena.graph.impl.GraphBase::close():void" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.hp.hpl.jena.db.impl.SpecializedGraph_TripleStore" />
			<role name="Implementor" element="com.hp.hpl.jena.db.impl.IPSet" />
			<role name="implementor" element="com.hp.hpl.jena.db.impl.SpecializedGraph_TripleStore::m_pset:com.hp.hpl.jena.db.impl.IPSet" />
			<role name="Operation()" element="com.hp.hpl.jena.db.impl.SpecializedGraph_TripleStore::add(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.db.impl.SpecializedGraph$CompletionFlag):void" />
			<role name="Operation()" element="com.hp.hpl.jena.db.impl.SpecializedGraph_TripleStore::add(java.util.List, com.hp.hpl.jena.db.impl.SpecializedGraph$CompletionFlag):void" />
			<role name="Operation()" element="com.hp.hpl.jena.db.impl.SpecializedGraph_TripleStore::delete(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.db.impl.SpecializedGraph$CompletionFlag):void" />
			<role name="Operation()" element="com.hp.hpl.jena.db.impl.SpecializedGraph_TripleStore::delete(java.util.List, com.hp.hpl.jena.db.impl.SpecializedGraph$CompletionFlag):void" />
			<role name="Operation()" element="com.hp.hpl.jena.db.impl.SpecializedGraph_TripleStore::tripleCount():int" />
			<role name="Operation()" element="com.hp.hpl.jena.db.impl.SpecializedGraph_TripleStore::contains(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.db.impl.SpecializedGraph$CompletionFlag):boolean" />
			<role name="Operation()" element="com.hp.hpl.jena.db.impl.SpecializedGraph_TripleStore::find(com.hp.hpl.jena.graph.TripleMatch, com.hp.hpl.jena.db.impl.SpecializedGraph$CompletionFlag):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="Operation()" element="com.hp.hpl.jena.db.impl.SpecializedGraph_TripleStore::close():void" />
			<role name="Operation()" element="com.hp.hpl.jena.db.impl.SpecializedGraph_TripleStore::clear():void" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.hp.hpl.jena.shared.uuid.JenaUUID" />
			<role name="Implementor" element="com.hp.hpl.jena.shared.uuid.UUIDFactory" />
			<role name="implementor" element="com.hp.hpl.jena.shared.uuid.JenaUUID::factory:com.hp.hpl.jena.shared.uuid.UUIDFactory" />
			<role name="Operation()" element="com.hp.hpl.jena.shared.uuid.JenaUUID::generate():com.hp.hpl.jena.shared.uuid.JenaUUID" />
			<role name="Operation()" element="com.hp.hpl.jena.shared.uuid.JenaUUID::reset():void" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.hp.hpl.jena.mem.GraphTripleStoreBase" />
			<role name="Implementor" element="com.hp.hpl.jena.mem.NodeToTriplesMapBase" />
			<role name="implementor" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::subjects:com.hp.hpl.jena.mem.NodeToTriplesMapBase" />
			<role name="implementor" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::predicates:com.hp.hpl.jena.mem.NodeToTriplesMapBase" />
			<role name="implementor" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::objects:com.hp.hpl.jena.mem.NodeToTriplesMapBase" />
			<role name="Operation()" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::add(com.hp.hpl.jena.graph.Triple):void" />
			<role name="Operation()" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::delete(com.hp.hpl.jena.graph.Triple):void" />
			<role name="Operation()" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::contains(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Operation()" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::containsByEquality(com.hp.hpl.jena.graph.Triple):boolean" />
			<role name="Operation()" element="com.hp.hpl.jena.mem.GraphTripleStoreBase::find(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.hp.hpl.jena.db.impl.DriverRDB" />
			<role name="Implementor" element="com.hp.hpl.jena.db.IDBConnection" />
			<role name="implementor" element="com.hp.hpl.jena.db.impl.DriverRDB::m_dbcon:com.hp.hpl.jena.db.IDBConnection" />
			<role name="Operation()" element="com.hp.hpl.jena.db.impl.DriverRDB::formatAndConstructSystemSpecializedGraph():com.hp.hpl.jena.db.impl.SpecializedGraph" />
			<role name="Operation()" element="com.hp.hpl.jena.db.impl.DriverRDB::DBisLocked():boolean" />
			<role name="Operation()" element="com.hp.hpl.jena.db.impl.DriverRDB::getAllTables():java.util.List" />
			<role name="Operation()" element="com.hp.hpl.jena.db.impl.DriverRDB::getTableCount(int):int" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.hp.hpl.jena.db.impl.DBProp" />
			<role name="Implementor" element="com.hp.hpl.jena.db.impl.SpecializedGraph" />
			<role name="implementor" element="com.hp.hpl.jena.db.impl.DBProp::graph:com.hp.hpl.jena.db.impl.SpecializedGraph" />
			<role name="Operation()" element="com.hp.hpl.jena.db.impl.DBProp::putPropNode(com.hp.hpl.jena.graph.Node_URI, com.hp.hpl.jena.graph.Node):void" />
			<role name="Operation()" element="com.hp.hpl.jena.db.impl.DBProp::getPropNode(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.graph.Node" />
			<role name="Operation()" element="com.hp.hpl.jena.db.impl.DBProp::remove():void" />
			<role name="Operation()" element="com.hp.hpl.jena.db.impl.DBProp::showGraph():void" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.hp.hpl.jena.mem.NodeToTriplesMapBase" />
			<role name="Implementor" element="com.hp.hpl.jena.mem.BunchMap" />
			<role name="implementor" element="com.hp.hpl.jena.mem.NodeToTriplesMapBase::bunchMap:com.hp.hpl.jena.mem.BunchMap" />
			<role name="Operation()" element="com.hp.hpl.jena.mem.NodeToTriplesMapBase::domain():java.util.Iterator" />
			<role name="Operation()" element="com.hp.hpl.jena.mem.NodeToTriplesMapBase::clear():void" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.hp.hpl.jena.n3.JenaReaderBase" />
			<role name="Implementor" element="com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
			<role name="implementor" element="com.hp.hpl.jena.n3.JenaReaderBase::errorHandler:com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
			<role name="Operation()" element="com.hp.hpl.jena.n3.JenaReaderBase::read(com.hp.hpl.jena.rdf.model.Model, java.lang.String):void" />
			<role name="Operation()" element="com.hp.hpl.jena.n3.JenaReaderBase::readImpl(com.hp.hpl.jena.rdf.model.Model, java.io.Reader, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter" />
			<role name="Implementor" element="com.hp.hpl.jena.xmloutput.impl.SimpleLogger" />
			<role name="implementor" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter::logger:com.hp.hpl.jena.xmloutput.impl.SimpleLogger" />
			<role name="Operation()" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter::tag(java.lang.String, java.lang.String, int, boolean):java.lang.String" />
			<role name="Operation()" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter::writeXMLDeclaration(java.io.Writer, java.io.PrintWriter):void" />
			<role name="Operation()" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter::setProperty(java.lang.String, java.lang.Object):java.lang.Object" />
			<role name="Operation()" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter::setAttributeQuoteChar(java.lang.Object):java.lang.String" />
			<role name="Operation()" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter::setWidth(java.lang.Object):java.lang.Integer" />
			<role name="Operation()" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter::setTab(java.lang.Object):java.lang.Integer" />
			<role name="Operation()" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter::setTypes(com.hp.hpl.jena.rdf.model.Resource[]):com.hp.hpl.jena.rdf.model.Resource[]" />
			<role name="Operation()" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter::checkLegalPrefix(java.lang.String):boolean" />
			<role name="Operation()" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter::str2flags(java.lang.String):int" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.hp.hpl.jena.mem.NodeToTriplesMapBase" />
			<role name="Implementor" element="com.hp.hpl.jena.graph.Triple$Field" />
			<role name="implementor" element="com.hp.hpl.jena.mem.NodeToTriplesMapBase::indexField:com.hp.hpl.jena.graph.Triple$Field" />
			<role name="Operation()" element="com.hp.hpl.jena.mem.NodeToTriplesMapBase::getIndexField(com.hp.hpl.jena.graph.Triple):java.lang.Object" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.hp.hpl.jena.rdf.arp.states.Collection" />
			<role name="Implementor" element="com.hp.hpl.jena.rdf.arp.states.WantsObjectI" />
			<role name="implementor" element="com.hp.hpl.jena.rdf.arp.states.Collection::nextSlot:com.hp.hpl.jena.rdf.arp.states.WantsObjectI" />
			<role name="Operation()" element="com.hp.hpl.jena.rdf.arp.states.Collection::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):com.hp.hpl.jena.rdf.arp.states.FrameI" />
			<role name="Operation()" element="com.hp.hpl.jena.rdf.arp.states.Collection::endElement():void" />
		</instance>
		<instance>
			<role name="Abstraction" element="jena.util.DBcmd" />
			<role name="Implementor" element="com.hp.hpl.jena.db.IDBConnection" />
			<role name="implementor" element="jena.util.DBcmd::jdbcConnection:com.hp.hpl.jena.db.IDBConnection" />
			<role name="Operation()" element="jena.util.DBcmd::closeConnection():void" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter" />
			<role name="Implementor" element="com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="implementor" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter::modelPrefixMapping:com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="Operation()" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter::substitutedAttribute(java.lang.String):java.lang.String" />
		</instance>
	</pattern>
	<pattern name="Template Method">
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.assembler.assemblers.AssemblerBase" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.assembler.assemblers.AssemblerBase::open(com.hp.hpl.jena.assembler.Assembler, com.hp.hpl.jena.rdf.model.Resource):java.lang.Object" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.assembler.assemblers.AssemblerBase::openModel(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.assembler.Mode):com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.assembler.assemblers.ModelAssembler" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.assembler.assemblers.ModelAssembler::openModel(com.hp.hpl.jena.assembler.Assembler, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.assembler.Content, com.hp.hpl.jena.assembler.Mode):com.hp.hpl.jena.rdf.model.Model" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.db.impl.DriverRDB" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.db.impl.DriverRDB::getSystemSpecializedGraph(boolean):com.hp.hpl.jena.db.impl.SpecializedGraph" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.db.impl.DriverRDB::formatAndConstructSystemSpecializedGraph():com.hp.hpl.jena.db.impl.SpecializedGraph" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.db.impl.DriverRDB::createSpecializedGraphs(java.lang.String, com.hp.hpl.jena.graph.Graph):java.util.List" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.db.impl.DriverRDB::createTable(int, boolean):java.lang.String" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.db.impl.ResultSetIterator" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.db.impl.ResultSetIterator::moveForward():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.enhanced.Polymorphic" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.enhanced.Polymorphic::findExistingView():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.graph.impl.FragmentTripleIterator" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.graph.impl.FragmentTripleIterator::refillFrom(com.hp.hpl.jena.graph.GraphAdd, java.util.Map$Entry):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.graph.impl.GraphBase" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.graph.impl.GraphBase::find(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.graph.impl.GraphBase::forTestingOnly_graphBaseFind(com.hp.hpl.jena.graph.TripleMatch):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.graph.impl.SimpleReifierFragmentHandler" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.graph.impl.SimpleReifierFragmentHandler::clashedWith(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple):boolean" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.graph.Node" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.graph.Node::sameValueAs(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.graph.Node::matches(com.hp.hpl.jena.graph.Node):boolean" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.graph.query.Rewrite$DyadicLiteral" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.graph.query.Rewrite$DyadicLiteral::evalBool(java.lang.Object, java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.graph.Triple$Field" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.graph.Triple$Field::filterOn(com.hp.hpl.jena.graph.Triple):com.hp.hpl.jena.util.iterator.Filter" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.mem.GraphMemBase" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.mem.GraphMemBase::close():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.mem.ObjectIterator" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.mem.ObjectIterator::refillPending():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.n3.JenaReaderBase" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.n3.JenaReaderBase::readImpl(com.hp.hpl.jena.rdf.model.Model, java.io.Reader, java.lang.String):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.ontology.impl.AbstractProfile" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.ontology.impl.AbstractProfile::aliasMap():com.hp.hpl.jena.util.OneToManyMap" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.ontology.impl.BooleanClassDescriptionImpl" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.ontology.impl.BooleanClassDescriptionImpl::setOperands(com.hp.hpl.jena.rdf.model.RDFList):void" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.ontology.impl.BooleanClassDescriptionImpl::addOperand(com.hp.hpl.jena.rdf.model.Resource):void" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.ontology.impl.BooleanClassDescriptionImpl::getOperands():com.hp.hpl.jena.rdf.model.RDFList" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext::withBase(com.hp.hpl.jena.rdf.arp.impl.XMLHandler, java.lang.String):com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext::withLang(com.hp.hpl.jena.rdf.arp.impl.XMLHandler, java.lang.String):com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext::resolveAsURI(com.hp.hpl.jena.rdf.arp.impl.XMLHandler, com.hp.hpl.jena.rdf.arp.impl.Taint, java.lang.String, boolean):com.hp.hpl.jena.iri.IRI" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.rdf.arp.impl.QNameLexer" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.arp.impl.QNameLexer::xml(java.lang.String, int):int" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.arp.impl.QNameLexer::rdf(com.hp.hpl.jena.rdf.arp.impl.Taint, java.lang.String, int):int" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.arp.impl.QNameLexer::lookup(com.hp.hpl.jena.rdf.arp.impl.Taint):int" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.arp.impl.QNameLexer::lookupNoMsg(com.hp.hpl.jena.rdf.arp.impl.Taint):int" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.rdf.arp.states.Collection" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.arp.states.Collection::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):com.hp.hpl.jena.rdf.arp.states.FrameI" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.arp.states.Collection::endElement():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.rdf.model.impl.StatementBase" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.model.impl.StatementBase::stringReplace(java.lang.String, java.lang.String, boolean):com.hp.hpl.jena.rdf.model.impl.StatementImpl" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.model.impl.StatementBase::changeObject(com.hp.hpl.jena.rdf.model.RDFNode):com.hp.hpl.jena.rdf.model.Statement" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.model.impl.StatementBase::getBoolean():boolean" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.model.impl.StatementBase::getByte():byte" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.model.impl.StatementBase::getShort():short" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.model.impl.StatementBase::getInt():int" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.model.impl.StatementBase::getLong():long" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.model.impl.StatementBase::getChar():char" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.model.impl.StatementBase::getFloat():float" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.model.impl.StatementBase::getDouble():double" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.model.impl.StatementBase::getString():java.lang.String" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.model.impl.StatementBase::getLanguage():java.lang.String" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.model.impl.StatementBase::hasWellFormedXML():boolean" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.rdf.model.impl.StatementBase::toString():java.lang.String" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.reasoner.BaseInfGraph" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.reasoner.BaseInfGraph::graphBaseFind(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.reasoner.BaseInfGraph::find(com.hp.hpl.jena.reasoner.TriplePattern):com.hp.hpl.jena.util.iterator.ExtendedIterator" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.reasoner.BaseInfGraph::cloneWithPremises(com.hp.hpl.jena.graph.Graph):com.hp.hpl.jena.reasoner.InfGraph" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.shared.uuid.JenaUUID" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.shared.uuid.JenaUUID::asUUID():java.util.UUID" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.shared.wg.LazyInputStream" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.shared.wg.LazyInputStream::connect():boolean" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.shared.wg.LazyInputStream::read():int" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.util.iterator.LateBindingIterator" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.util.iterator.LateBindingIterator::lazy():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.util.iterator.LazyIterator" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.util.iterator.LazyIterator::lazy():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter::writeXMLBody(com.hp.hpl.jena.rdf.model.Model, java.io.PrintWriter, java.lang.String):void" />
			<role name="TemplateMethod()" element="com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter::setBlockRules(java.lang.Object):com.hp.hpl.jena.rdf.model.Resource[]" />
		</instance>
		<instance>
			<role name="AbstractClass" element="jena.util.DBcmd" />
			<role name="TemplateMethod()" element="jena.util.DBcmd::exec():void" />
		</instance>
	</pattern>
	<pattern name="Visitor">
		<instance>
			<role name="ConcreteElement" element="com.hp.hpl.jena.rdf.model.impl.ResourceImpl" />
			<role name="Visitor" element="com.hp.hpl.jena.rdf.model.RDFVisitor" />
			<role name="Accept()" element="com.hp.hpl.jena.rdf.model.impl.ResourceImpl::visitWith(com.hp.hpl.jena.rdf.model.RDFVisitor):java.lang.Object" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="com.hp.hpl.jena.graph.Node_ANY" />
			<role name="Visitor" element="com.hp.hpl.jena.graph.NodeVisitor" />
			<role name="Accept()" element="com.hp.hpl.jena.graph.Node_ANY::visitWith(com.hp.hpl.jena.graph.NodeVisitor):java.lang.Object" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="com.hp.hpl.jena.graph.Node_Blank" />
			<role name="Visitor" element="com.hp.hpl.jena.graph.NodeVisitor" />
			<role name="Accept()" element="com.hp.hpl.jena.graph.Node_Blank::visitWith(com.hp.hpl.jena.graph.NodeVisitor):java.lang.Object" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="com.hp.hpl.jena.graph.Node_Literal" />
			<role name="Visitor" element="com.hp.hpl.jena.graph.NodeVisitor" />
			<role name="Accept()" element="com.hp.hpl.jena.graph.Node_Literal::visitWith(com.hp.hpl.jena.graph.NodeVisitor):java.lang.Object" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="com.hp.hpl.jena.graph.Node_URI" />
			<role name="Visitor" element="com.hp.hpl.jena.graph.NodeVisitor" />
			<role name="Accept()" element="com.hp.hpl.jena.graph.Node_URI::visitWith(com.hp.hpl.jena.graph.NodeVisitor):java.lang.Object" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="com.hp.hpl.jena.graph.Node_Variable" />
			<role name="Visitor" element="com.hp.hpl.jena.graph.NodeVisitor" />
			<role name="Accept()" element="com.hp.hpl.jena.graph.Node_Variable::visitWith(com.hp.hpl.jena.graph.NodeVisitor):java.lang.Object" />
		</instance>
		<instance>
			<role name="ConcreteElement" element="com.hp.hpl.jena.rdf.model.impl.LiteralImpl" />
			<role name="Visitor" element="com.hp.hpl.jena.rdf.model.RDFVisitor" />
			<role name="Accept()" element="com.hp.hpl.jena.rdf.model.impl.LiteralImpl::visitWith(com.hp.hpl.jena.rdf.model.RDFVisitor):java.lang.Object" />
		</instance>
	</pattern>
	<pattern name="Proxy">
		<instance>
			<role name="Proxy" element="com.hp.hpl.jena.assembler.assemblers.AssemblerGroup$ExpandingAssemblerGroup" />
			<role name="RealSubject" element="com.hp.hpl.jena.assembler.assemblers.AssemblerGroup$PlainAssemblerGroup" />
			<role name="Request()" element="com.hp.hpl.jena.assembler.assemblers.AssemblerGroup$ExpandingAssemblerGroup::open(com.hp.hpl.jena.assembler.Assembler, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.assembler.Mode):java.lang.Object" />
			<role name="Request()" element="com.hp.hpl.jena.assembler.assemblers.AssemblerGroup$ExpandingAssemblerGroup::implementWith(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.assembler.Assembler):com.hp.hpl.jena.assembler.assemblers.AssemblerGroup" />
			<role name="Request()" element="com.hp.hpl.jena.assembler.assemblers.AssemblerGroup$ExpandingAssemblerGroup::assemblerFor(com.hp.hpl.jena.rdf.model.Resource):com.hp.hpl.jena.assembler.Assembler" />
		</instance>
		<instance>
			<role name="Proxy" element="com.hp.hpl.jena.db.impl.DBReifierGraph" />
			<role name="RealSubject" element="com.hp.hpl.jena.db.GraphRDB" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifierGraph::getPrefixMapping():com.hp.hpl.jena.shared.PrefixMapping" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifierGraph::getTransactionHandler():com.hp.hpl.jena.graph.TransactionHandler" />
			<role name="Request()" element="com.hp.hpl.jena.db.impl.DBReifierGraph::getBulkUpdateHandler():com.hp.hpl.jena.graph.BulkUpdateHandler" />
		</instance>
		<instance>
			<role name="Proxy" element="com.hp.hpl.jena.n3.N3JenaWriter" />
			<role name="RealSubject" element="com.hp.hpl.jena.n3.N3JenaWriterCommon" />
			<role name="Request()" element="com.hp.hpl.jena.n3.N3JenaWriter::write(com.hp.hpl.jena.rdf.model.Model, java.io.Writer, java.lang.String):void" />
			<role name="Request()" element="com.hp.hpl.jena.n3.N3JenaWriter::write(com.hp.hpl.jena.rdf.model.Model, java.io.OutputStream, java.lang.String):void" />
			<role name="Request()" element="com.hp.hpl.jena.n3.N3JenaWriter::setProperty(java.lang.String, java.lang.Object):java.lang.Object" />
			<role name="Request()" element="com.hp.hpl.jena.n3.N3JenaWriter::setErrorHandler(com.hp.hpl.jena.rdf.model.RDFErrorHandler):com.hp.hpl.jena.rdf.model.RDFErrorHandler" />
		</instance>
	</pattern>
	<pattern name="Proxy2" />
	<pattern name="Chain of Responsibility">
		<instance>
			<role name="Handler" element="com.hp.hpl.jena.enhanced.Polymorphic" />
			<role name="successor" element="com.hp.hpl.jena.enhanced.Polymorphic::ring:com.hp.hpl.jena.enhanced.Polymorphic" />
		</instance>
		<instance>
			<role name="Handler" element="com.hp.hpl.jena.graph.query.Stage" />
			<role name="successor" element="com.hp.hpl.jena.graph.query.Stage::previous:com.hp.hpl.jena.graph.query.Stage" />
		</instance>
		<instance>
			<role name="Handler" element="com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext" />
			<role name="successor" element="com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext::document:com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext" />
		</instance>
	</pattern>
</system>

